// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2023.2.2 (lin64) Build 4126759 Thu Feb  8 23:52:05 MST 2024
// Date        : Tue Jan 14 19:02:27 2025
// Host        : bcheng-HP running 64-bit Ubuntu 22.04.5 LTS
// Command     : write_verilog /home/bcheng/workspace/dev/place-and-route/hdl/verilog//sim_postroute/_time_impl.v -force
//               -mode timesim -include_xilinx_libs -sdf_anno true
// Design      : top_level
// Purpose     : This verilog netlist is a timing simulation representation of the design and should not be modified or
//               synthesized. Please ensure that this netlist is used with the corresponding SDF file.
// Device      : xc7z020clg400-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps
`define XIL_TIMING

module deserializer_fsm
   (o_ready_OBUF,
    des_out_valid,
    Q,
    i_rst_IBUF,
    i_en_IBUF,
    CLK,
    i_din_valid_IBUF,
    i_din_IBUF,
    wea);
  output o_ready_OBUF;
  output des_out_valid;
  output [23:0]Q;
  input i_rst_IBUF;
  input i_en_IBUF;
  input CLK;
  input i_din_valid_IBUF;
  input i_din_IBUF;
  input [0:0]wea;

  wire CLK;
  wire [23:0]Q;
  wire [4:0]counter;
  wire \counter[4]_i_2_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire des_out_valid;
  wire i_din_IBUF;
  wire i_din_valid_IBUF;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [1:0]next_state;
  wire o_dout_valid_i_1__1_n_0;
  wire o_ready_OBUF;
  wire o_ready_i_1_n_0;
  wire \ov_dout[23]_i_1__0_n_0 ;
  wire [23:0]shift_reg;
  wire \shift_reg[0]_i_1_n_0 ;
  wire \shift_reg[10]_i_1_n_0 ;
  wire \shift_reg[11]_i_1_n_0 ;
  wire \shift_reg[12]_i_1_n_0 ;
  wire \shift_reg[13]_i_1_n_0 ;
  wire \shift_reg[14]_i_1_n_0 ;
  wire \shift_reg[15]_i_1_n_0 ;
  wire \shift_reg[16]_i_1_n_0 ;
  wire \shift_reg[17]_i_1_n_0 ;
  wire \shift_reg[18]_i_1_n_0 ;
  wire \shift_reg[19]_i_1_n_0 ;
  wire \shift_reg[1]_i_1_n_0 ;
  wire \shift_reg[20]_i_1_n_0 ;
  wire \shift_reg[21]_i_1_n_0 ;
  wire \shift_reg[22]_i_1_n_0 ;
  wire \shift_reg[23]_i_1__0_n_0 ;
  wire \shift_reg[2]_i_1_n_0 ;
  wire \shift_reg[3]_i_1_n_0 ;
  wire \shift_reg[4]_i_1_n_0 ;
  wire \shift_reg[5]_i_1_n_0 ;
  wire \shift_reg[6]_i_1_n_0 ;
  wire \shift_reg[7]_i_1_n_0 ;
  wire \shift_reg[8]_i_1_n_0 ;
  wire \shift_reg[9]_i_1_n_0 ;
  wire [1:0]state;
  wire \state[1]_i_2__0_n_0 ;
  wire [0:0]wea;

  LUT6 #(
    .INIT(64'h0000000000007000)) 
    \counter[0]_i_1 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[4] ),
        .I2(i_din_valid_IBUF),
        .I3(state[0]),
        .I4(state[1]),
        .I5(\counter_reg_n_0_[0] ),
        .O(counter[0]));
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1 
       (.I0(\counter[4]_i_2_n_0 ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(counter[1]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \counter[2]_i_1 
       (.I0(\counter[4]_i_2_n_0 ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .O(counter[2]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h28888888)) 
    \counter[3]_i_1 
       (.I0(\counter[4]_i_2_n_0 ),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .O(counter[3]));
  (* \PinAttr:I5:HOLD_DETOUR  = "208" *) 
  LUT6 #(
    .INIT(64'hEAAAAAAA00000000)) 
    \counter[4]_i_1 
       (.I0(\counter_reg_n_0_[4] ),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .I5(\counter[4]_i_2_n_0 ),
        .O(counter[4]));
  LUT5 #(
    .INIT(32'h00404040)) 
    \counter[4]_i_2 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(i_din_valid_IBUF),
        .I3(\counter_reg_n_0_[4] ),
        .I4(\counter_reg_n_0_[3] ),
        .O(\counter[4]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[0]),
        .Q(\counter_reg_n_0_[0] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[1]),
        .Q(\counter_reg_n_0_[1] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[2]),
        .Q(\counter_reg_n_0_[2] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[3]),
        .Q(\counter_reg_n_0_[3] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[4]),
        .Q(\counter_reg_n_0_[4] ),
        .R(i_rst_IBUF));
  LUT2 #(
    .INIT(4'h2)) 
    o_dout_valid_i_1__1
       (.I0(state[1]),
        .I1(state[0]),
        .O(o_dout_valid_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_dout_valid_reg
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(o_dout_valid_i_1__1_n_0),
        .Q(des_out_valid),
        .R(i_rst_IBUF));
  LUT2 #(
    .INIT(4'h2)) 
    o_ready_i_1
       (.I0(state[0]),
        .I1(state[1]),
        .O(o_ready_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_ready_reg
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(o_ready_i_1_n_0),
        .Q(o_ready_OBUF),
        .R(i_rst_IBUF));
  LUT6 #(
    .INIT(64'h0808000800080008)) 
    \ov_dout[23]_i_1__0 
       (.I0(o_ready_i_1_n_0),
        .I1(i_en_IBUF),
        .I2(i_rst_IBUF),
        .I3(i_din_valid_IBUF),
        .I4(\counter_reg_n_0_[4] ),
        .I5(\counter_reg_n_0_[3] ),
        .O(\ov_dout[23]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[0] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[0]),
        .Q(Q[0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[10] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[10]),
        .Q(Q[10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[11] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[11]),
        .Q(Q[11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[12] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[12]),
        .Q(Q[12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[13] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[13]),
        .Q(Q[13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[14] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[14]),
        .Q(Q[14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[15] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[15]),
        .Q(Q[15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[16] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[16]),
        .Q(Q[16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[17] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[17]),
        .Q(Q[17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[18] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[18]),
        .Q(Q[18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[19] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[19]),
        .Q(Q[19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[1] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[1]),
        .Q(Q[1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[20] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[20]),
        .Q(Q[20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[21] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[21]),
        .Q(Q[21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[22] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[22]),
        .Q(Q[22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[23] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[23]),
        .Q(Q[23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[2] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[2]),
        .Q(Q[2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[3] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[3]),
        .Q(Q[3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[4] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[4]),
        .Q(Q[4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[5] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[5]),
        .Q(Q[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[6] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[6]),
        .Q(Q[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[7] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[7]),
        .Q(Q[7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[8] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[8]),
        .Q(Q[8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[9] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1__0_n_0 ),
        .D(shift_reg[9]),
        .Q(Q[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[0]_i_1 
       (.I0(shift_reg[1]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[10]_i_1 
       (.I0(shift_reg[11]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[10]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[11]_i_1 
       (.I0(shift_reg[12]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[12]_i_1 
       (.I0(shift_reg[13]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[13]_i_1 
       (.I0(shift_reg[14]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[13]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[14]_i_1 
       (.I0(shift_reg[15]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[14]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[15]_i_1 
       (.I0(shift_reg[16]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[15]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[16]_i_1 
       (.I0(shift_reg[17]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[17]_i_1 
       (.I0(shift_reg[18]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[17]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[18]_i_1 
       (.I0(shift_reg[19]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[18]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[19]_i_1 
       (.I0(shift_reg[20]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[19]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[1]_i_1 
       (.I0(shift_reg[2]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[20]_i_1 
       (.I0(shift_reg[21]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[20]_i_1_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "511" *) 
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[21]_i_1 
       (.I0(shift_reg[22]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[21]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[22]_i_1 
       (.I0(shift_reg[23]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[22]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[23]_i_1__0 
       (.I0(i_din_IBUF),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[23]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[2]_i_1 
       (.I0(shift_reg[3]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[3]_i_1 
       (.I0(shift_reg[4]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[4]_i_1 
       (.I0(shift_reg[5]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[5]_i_1 
       (.I0(shift_reg[6]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[6]_i_1 
       (.I0(shift_reg[7]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[7]_i_1 
       (.I0(shift_reg[8]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[7]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[8]_i_1 
       (.I0(shift_reg[9]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[8]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000002A000000)) 
    \shift_reg[9]_i_1 
       (.I0(shift_reg[10]),
        .I1(\counter_reg_n_0_[3] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(i_din_valid_IBUF),
        .I4(state[0]),
        .I5(state[1]),
        .O(\shift_reg[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[0] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[0]_i_1_n_0 ),
        .Q(shift_reg[0]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[10] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[10]_i_1_n_0 ),
        .Q(shift_reg[10]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[11] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[11]_i_1_n_0 ),
        .Q(shift_reg[11]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[12] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[12]_i_1_n_0 ),
        .Q(shift_reg[12]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[13] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[13]_i_1_n_0 ),
        .Q(shift_reg[13]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[14] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[14]_i_1_n_0 ),
        .Q(shift_reg[14]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[15] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[15]_i_1_n_0 ),
        .Q(shift_reg[15]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[16] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[16]_i_1_n_0 ),
        .Q(shift_reg[16]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[17] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[17]_i_1_n_0 ),
        .Q(shift_reg[17]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[18] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[18]_i_1_n_0 ),
        .Q(shift_reg[18]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[19] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[19]_i_1_n_0 ),
        .Q(shift_reg[19]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[1] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[1]_i_1_n_0 ),
        .Q(shift_reg[1]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[20] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[20]_i_1_n_0 ),
        .Q(shift_reg[20]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[21] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[21]_i_1_n_0 ),
        .Q(shift_reg[21]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[22] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[22]_i_1_n_0 ),
        .Q(shift_reg[22]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[23] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[23]_i_1__0_n_0 ),
        .Q(shift_reg[23]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[2] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[2]_i_1_n_0 ),
        .Q(shift_reg[2]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[3] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[3]_i_1_n_0 ),
        .Q(shift_reg[3]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[4] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[4]_i_1_n_0 ),
        .Q(shift_reg[4]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[5] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[5]_i_1_n_0 ),
        .Q(shift_reg[5]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[6] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[6]_i_1_n_0 ),
        .Q(shift_reg[6]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[7] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[7]_i_1_n_0 ),
        .Q(shift_reg[7]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[8] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[8]_i_1_n_0 ),
        .Q(shift_reg[8]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[9] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(\shift_reg[9]_i_1_n_0 ),
        .Q(shift_reg[9]),
        .R(i_rst_IBUF));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h00B8)) 
    \state[0]_i_1__0 
       (.I0(\state[1]_i_2__0_n_0 ),
        .I1(state[0]),
        .I2(i_din_valid_IBUF),
        .I3(state[1]),
        .O(next_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0530)) 
    \state[1]_i_1__0 
       (.I0(wea),
        .I1(\state[1]_i_2__0_n_0 ),
        .I2(state[0]),
        .I3(state[1]),
        .O(next_state[1]));
  LUT5 #(
    .INIT(32'hFFFFFFBF)) 
    \state[1]_i_2__0 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[4] ),
        .I2(\counter_reg_n_0_[3] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[0] ),
        .O(\state[1]_i_2__0_n_0 ));
  (* FSM_ENCODED_STATES = "S1:0001,S2:0010,S0:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(next_state[0]),
        .Q(state[0]),
        .R(i_rst_IBUF));
  (* FSM_ENCODED_STATES = "S1:0001,S2:0010,S0:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(next_state[1]),
        .Q(state[1]),
        .R(i_rst_IBUF));
endmodule

module fir_filter_direct_form_partially_pipelined
   (wea,
    fir_out_valid,
    \ov_dout_reg[23]_0 ,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    Q,
    des_out_valid,
    ser_ready);
  output [0:0]wea;
  output fir_out_valid;
  output [23:0]\ov_dout_reg[23]_0 ;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [23:0]Q;
  input des_out_valid;
  input ser_ready;

  wire CLK;
  wire [23:0]Q;
  wire [23:0]acc;
  wire des_out_valid;
  wire fir_out_valid;
  wire \genblk1[0].tap_inst_n_10 ;
  wire \genblk1[0].tap_inst_n_11 ;
  wire \genblk1[0].tap_inst_n_12 ;
  wire \genblk1[0].tap_inst_n_13 ;
  wire \genblk1[0].tap_inst_n_14 ;
  wire \genblk1[0].tap_inst_n_15 ;
  wire \genblk1[0].tap_inst_n_16 ;
  wire \genblk1[0].tap_inst_n_17 ;
  wire \genblk1[0].tap_inst_n_18 ;
  wire \genblk1[0].tap_inst_n_19 ;
  wire \genblk1[0].tap_inst_n_20 ;
  wire \genblk1[0].tap_inst_n_21 ;
  wire \genblk1[0].tap_inst_n_22 ;
  wire \genblk1[0].tap_inst_n_23 ;
  wire \genblk1[0].tap_inst_n_24 ;
  wire \genblk1[0].tap_inst_n_25 ;
  wire \genblk1[0].tap_inst_n_26 ;
  wire \genblk1[0].tap_inst_n_27 ;
  wire \genblk1[0].tap_inst_n_28 ;
  wire \genblk1[0].tap_inst_n_29 ;
  wire \genblk1[0].tap_inst_n_30 ;
  wire \genblk1[0].tap_inst_n_31 ;
  wire \genblk1[0].tap_inst_n_32 ;
  wire \genblk1[0].tap_inst_n_33 ;
  wire \genblk1[0].tap_inst_n_34 ;
  wire \genblk1[0].tap_inst_n_35 ;
  wire \genblk1[0].tap_inst_n_36 ;
  wire \genblk1[0].tap_inst_n_37 ;
  wire \genblk1[0].tap_inst_n_38 ;
  wire \genblk1[0].tap_inst_n_39 ;
  wire \genblk1[0].tap_inst_n_4 ;
  wire \genblk1[0].tap_inst_n_40 ;
  wire \genblk1[0].tap_inst_n_41 ;
  wire \genblk1[0].tap_inst_n_42 ;
  wire \genblk1[0].tap_inst_n_43 ;
  wire \genblk1[0].tap_inst_n_44 ;
  wire \genblk1[0].tap_inst_n_45 ;
  wire \genblk1[0].tap_inst_n_46 ;
  wire \genblk1[0].tap_inst_n_47 ;
  wire \genblk1[0].tap_inst_n_48 ;
  wire \genblk1[0].tap_inst_n_5 ;
  wire \genblk1[0].tap_inst_n_6 ;
  wire \genblk1[0].tap_inst_n_7 ;
  wire \genblk1[0].tap_inst_n_8 ;
  wire \genblk1[0].tap_inst_n_9 ;
  wire \genblk1[1].tap_inst_n_23 ;
  wire \genblk1[1].tap_inst_n_24 ;
  wire \genblk1[1].tap_inst_n_25 ;
  wire \genblk1[1].tap_inst_n_26 ;
  wire \genblk1[3].tap_inst_n_23 ;
  wire \genblk1[4].tap_inst_n_23 ;
  wire \genblk1[4].tap_inst_n_24 ;
  wire \genblk1[4].tap_inst_n_25 ;
  wire \genblk1[5].tap_inst_n_10 ;
  wire \genblk1[5].tap_inst_n_11 ;
  wire \genblk1[5].tap_inst_n_12 ;
  wire \genblk1[5].tap_inst_n_13 ;
  wire \genblk1[5].tap_inst_n_14 ;
  wire \genblk1[5].tap_inst_n_15 ;
  wire \genblk1[5].tap_inst_n_16 ;
  wire \genblk1[5].tap_inst_n_17 ;
  wire \genblk1[5].tap_inst_n_18 ;
  wire \genblk1[5].tap_inst_n_19 ;
  wire \genblk1[5].tap_inst_n_20 ;
  wire \genblk1[5].tap_inst_n_21 ;
  wire \genblk1[5].tap_inst_n_22 ;
  wire \genblk1[5].tap_inst_n_23 ;
  wire \genblk1[5].tap_inst_n_24 ;
  wire \genblk1[5].tap_inst_n_25 ;
  wire \genblk1[5].tap_inst_n_26 ;
  wire \genblk1[5].tap_inst_n_27 ;
  wire \genblk1[5].tap_inst_n_28 ;
  wire \genblk1[5].tap_inst_n_29 ;
  wire \genblk1[5].tap_inst_n_30 ;
  wire \genblk1[5].tap_inst_n_31 ;
  wire \genblk1[5].tap_inst_n_32 ;
  wire \genblk1[5].tap_inst_n_33 ;
  wire \genblk1[5].tap_inst_n_34 ;
  wire \genblk1[5].tap_inst_n_35 ;
  wire \genblk1[5].tap_inst_n_36 ;
  wire \genblk1[5].tap_inst_n_37 ;
  wire \genblk1[5].tap_inst_n_38 ;
  wire \genblk1[5].tap_inst_n_39 ;
  wire \genblk1[5].tap_inst_n_4 ;
  wire \genblk1[5].tap_inst_n_40 ;
  wire \genblk1[5].tap_inst_n_41 ;
  wire \genblk1[5].tap_inst_n_42 ;
  wire \genblk1[5].tap_inst_n_43 ;
  wire \genblk1[5].tap_inst_n_44 ;
  wire \genblk1[5].tap_inst_n_45 ;
  wire \genblk1[5].tap_inst_n_5 ;
  wire \genblk1[5].tap_inst_n_6 ;
  wire \genblk1[5].tap_inst_n_7 ;
  wire \genblk1[5].tap_inst_n_8 ;
  wire \genblk1[5].tap_inst_n_9 ;
  wire \genblk1[7].tap_inst_n_22 ;
  wire \genblk1[7].tap_inst_n_23 ;
  wire \genblk1[7].tap_inst_n_24 ;
  wire \genblk1[7].tap_inst_n_25 ;
  wire \genblk1[7].tap_inst_n_26 ;
  wire i___142_carry__0_i_10_n_0;
  wire i___142_carry__0_i_11_n_0;
  wire i___142_carry__0_i_12_n_0;
  wire i___142_carry__0_i_1_n_0;
  wire i___142_carry__0_i_2_n_0;
  wire i___142_carry__0_i_3_n_0;
  wire i___142_carry__0_i_4_n_0;
  wire i___142_carry__0_i_5_n_0;
  wire i___142_carry__0_i_6_n_0;
  wire i___142_carry__0_i_7_n_0;
  wire i___142_carry__0_i_8_n_0;
  wire i___142_carry__0_i_9_n_0;
  wire i___142_carry__1_i_10_n_0;
  wire i___142_carry__1_i_11_n_0;
  wire i___142_carry__1_i_12_n_0;
  wire i___142_carry__1_i_1_n_0;
  wire i___142_carry__1_i_2_n_0;
  wire i___142_carry__1_i_3_n_0;
  wire i___142_carry__1_i_4_n_0;
  wire i___142_carry__1_i_5_n_0;
  wire i___142_carry__1_i_6_n_0;
  wire i___142_carry__1_i_7_n_0;
  wire i___142_carry__1_i_8_n_0;
  wire i___142_carry__1_i_9_n_0;
  wire i___142_carry__2_i_10_n_0;
  wire i___142_carry__2_i_11_n_0;
  wire i___142_carry__2_i_12_n_0;
  wire i___142_carry__2_i_1_n_0;
  wire i___142_carry__2_i_2_n_0;
  wire i___142_carry__2_i_3_n_0;
  wire i___142_carry__2_i_4_n_0;
  wire i___142_carry__2_i_5_n_0;
  wire i___142_carry__2_i_6_n_0;
  wire i___142_carry__2_i_7_n_0;
  wire i___142_carry__2_i_8_n_0;
  wire i___142_carry__2_i_9_n_0;
  wire i___142_carry__3_i_10_n_0;
  wire i___142_carry__3_i_11_n_0;
  wire i___142_carry__3_i_12_n_0;
  wire i___142_carry__3_i_1_n_0;
  wire i___142_carry__3_i_2_n_0;
  wire i___142_carry__3_i_3_n_0;
  wire i___142_carry__3_i_4_n_0;
  wire i___142_carry__3_i_5_n_0;
  wire i___142_carry__3_i_6_n_0;
  wire i___142_carry__3_i_7_n_0;
  wire i___142_carry__3_i_8_n_0;
  wire i___142_carry__3_i_9_n_0;
  wire i___142_carry__4_i_3_n_0;
  wire i___142_carry__4_i_7_n_0;
  wire i___142_carry__4_i_9_n_0;
  wire i___142_carry_i_1_n_0;
  wire i___142_carry_i_2_n_0;
  wire i___142_carry_i_3_n_0;
  wire i___142_carry_i_4_n_0;
  wire i___142_carry_i_5_n_0;
  wire i___142_carry_i_6_n_0;
  wire i___142_carry_i_7_n_0;
  wire i___142_carry_i_8_n_0;
  wire i___142_carry_i_9_n_0;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [2:0]next_state;
  wire o_dout_valid_i_1_n_0;
  wire o_ready_i_1__0_n_0;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_0 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry__0_n_7 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_0 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry__1_n_7 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_0 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry__2_n_7 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_0 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry__3_n_7 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry__4_n_7 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_0 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_1 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_2 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_3 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_4 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_5 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_6 ;
  wire \ov_dout0_inferred__0/i___0_carry_n_7 ;
  wire \ov_dout0_inferred__0/i___142_carry__0_n_0 ;
  wire \ov_dout0_inferred__0/i___142_carry__0_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry__0_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry__0_n_3 ;
  wire \ov_dout0_inferred__0/i___142_carry__1_n_0 ;
  wire \ov_dout0_inferred__0/i___142_carry__1_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry__1_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry__1_n_3 ;
  wire \ov_dout0_inferred__0/i___142_carry__2_n_0 ;
  wire \ov_dout0_inferred__0/i___142_carry__2_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry__2_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry__2_n_3 ;
  wire \ov_dout0_inferred__0/i___142_carry__3_n_0 ;
  wire \ov_dout0_inferred__0/i___142_carry__3_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry__3_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry__3_n_3 ;
  wire \ov_dout0_inferred__0/i___142_carry__4_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry__4_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry__4_n_3 ;
  wire \ov_dout0_inferred__0/i___142_carry_n_0 ;
  wire \ov_dout0_inferred__0/i___142_carry_n_1 ;
  wire \ov_dout0_inferred__0/i___142_carry_n_2 ;
  wire \ov_dout0_inferred__0/i___142_carry_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_0 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry__0_n_7 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_0 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry__1_n_7 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_0 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry__2_n_7 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_0 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry__3_n_7 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry__4_n_7 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_0 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_1 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_2 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_3 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_4 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_5 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_6 ;
  wire \ov_dout0_inferred__0/i___70_carry_n_7 ;
  wire \ov_dout[23]_i_1_n_0 ;
  wire [23:0]\ov_dout_reg[23]_0 ;
  wire [23:0]ov_sum_reg;
  wire [23:0]ov_sum_reg_0;
  wire [23:0]ov_sum_reg_1;
  wire [22:0]ov_sum_reg_2;
  wire [23:1]ov_sum_reg_3;
  wire [23:0]ov_sum_reg_4;
  wire [23:0]ov_sum_reg_5;
  wire [22:1]ov_sum_reg_6;
  wire [4:0]p_0_in__0;
  wire [4:0]p_0_in__1;
  wire [4:0]p_1_in;
  wire \sample_addr[0]_i_1_n_0 ;
  wire \sample_addr[1]_i_1_n_0 ;
  wire \sample_addr[2]_i_1_n_0 ;
  wire \sample_addr[2]_i_2_n_0 ;
  wire \sample_addr[3]_i_1_n_0 ;
  wire \sample_addr[3]_i_2_n_0 ;
  wire \sample_addr[3]_i_3_n_0 ;
  wire \sample_addr[4]_i_1_n_0 ;
  wire \sample_addr[4]_i_2_n_0 ;
  wire \sample_addr_reg_n_0_[0] ;
  wire \sample_addr_reg_n_0_[1] ;
  wire \sample_addr_reg_n_0_[2] ;
  wire \sample_addr_reg_n_0_[3] ;
  wire \sample_addr_reg_n_0_[4] ;
  wire [23:0]\sample_data[0]_8 ;
  wire [23:0]\sample_data[1]_9 ;
  wire [23:0]\sample_data[2]_10 ;
  wire [23:0]\sample_data[3]_11 ;
  wire [23:0]\sample_data[4]_12 ;
  wire [23:0]\sample_data[5]_13 ;
  wire [23:0]\sample_data[6]_14 ;
  wire [23:0]\sample_data[7]_15 ;
  wire [4:0]sample_re_addr;
  wire \sample_re_addr[4]_i_1_n_0 ;
  wire \sample_re_addr[4]_i_3_n_0 ;
  wire [4:0]sample_wr_addr_reg;
  wire ser_ready;
  wire [2:0]state;
  wire \state[1]_i_2_n_0 ;
  wire \state[2]_i_2_n_0 ;
  wire sum_rst;
  wire sum_rst_i_1_n_0;
  wire tap_en;
  wire tap_en_i_1_n_0;
  wire [0:0]wea;
  wire [23:0]\weight_data[0]_0 ;
  wire [23:0]\weight_data[1]_1 ;
  wire [23:0]\weight_data[2]_2 ;
  wire [23:0]\weight_data[3]_3 ;
  wire [23:0]\weight_data[4]_4 ;
  wire [23:0]\weight_data[5]_5 ;
  wire [23:0]\weight_data[6]_6 ;
  wire [23:0]\weight_data[7]_7 ;
  wire [4:0]weight_re_addr_reg;
  wire weight_re_i_1_n_0;
  wire weight_re_reg_n_0;
  wire [3:3]\NLW_ov_dout0_inferred__0/i___0_carry__4_CO_UNCONNECTED ;
  wire [3:3]\NLW_ov_dout0_inferred__0/i___142_carry__4_CO_UNCONNECTED ;
  wire [3:3]\NLW_ov_dout0_inferred__0/i___70_carry__4_CO_UNCONNECTED ;

  tap_transposed \genblk1[0].tap_inst 
       (.CLK(CLK),
        .DI(\genblk1[0].tap_inst_n_4 ),
        .O({\ov_dout0_inferred__0/i___0_carry__4_n_4 ,\ov_dout0_inferred__0/i___0_carry__4_n_6 ,\ov_dout0_inferred__0/i___0_carry__4_n_7 }),
        .S({\genblk1[0].tap_inst_n_6 ,\genblk1[0].tap_inst_n_7 ,\genblk1[0].tap_inst_n_8 }),
        .douta(\sample_data[0]_8 ),
        .i___142_carry__4_i_4({\ov_dout0_inferred__0/i___70_carry__4_n_4 ,\ov_dout0_inferred__0/i___70_carry__4_n_6 ,\ov_dout0_inferred__0/i___70_carry__4_n_7 }),
        .\ov_dout_reg[23] (i___142_carry__4_i_9_n_0),
        .\ov_dout_reg[23]_0 (\genblk1[1].tap_inst_n_24 ),
        .ov_sum1_0(\weight_data[0]_0 ),
        .ov_sum_reg({ov_sum_reg_0[23],ov_sum_reg_0[21:20]}),
        .\ov_sum_reg[0]_0 (\genblk1[7].tap_inst_n_22 ),
        .\ov_sum_reg[10]_0 ({\genblk1[0].tap_inst_n_25 ,\genblk1[0].tap_inst_n_26 ,\genblk1[0].tap_inst_n_27 ,\genblk1[0].tap_inst_n_28 }),
        .\ov_sum_reg[11]_0 ({\genblk1[0].tap_inst_n_29 ,\genblk1[0].tap_inst_n_30 ,\genblk1[0].tap_inst_n_31 ,\genblk1[0].tap_inst_n_32 }),
        .\ov_sum_reg[14]_0 ({\genblk1[0].tap_inst_n_33 ,\genblk1[0].tap_inst_n_34 ,\genblk1[0].tap_inst_n_35 ,\genblk1[0].tap_inst_n_36 }),
        .\ov_sum_reg[15]_0 ({\genblk1[0].tap_inst_n_37 ,\genblk1[0].tap_inst_n_38 ,\genblk1[0].tap_inst_n_39 ,\genblk1[0].tap_inst_n_40 }),
        .\ov_sum_reg[18]_0 ({\genblk1[0].tap_inst_n_41 ,\genblk1[0].tap_inst_n_42 ,\genblk1[0].tap_inst_n_43 ,\genblk1[0].tap_inst_n_44 }),
        .\ov_sum_reg[19]_0 ({\genblk1[0].tap_inst_n_45 ,\genblk1[0].tap_inst_n_46 ,\genblk1[0].tap_inst_n_47 ,\genblk1[0].tap_inst_n_48 }),
        .\ov_sum_reg[21]_0 ({\genblk1[0].tap_inst_n_9 ,\genblk1[0].tap_inst_n_10 ,\genblk1[0].tap_inst_n_11 }),
        .\ov_sum_reg[21]_1 (\genblk1[0].tap_inst_n_12 ),
        .\ov_sum_reg[23]_0 ({ov_sum_reg[23:22],ov_sum_reg[1:0]}),
        .\ov_sum_reg[23]_1 (\genblk1[0].tap_inst_n_5 ),
        .\ov_sum_reg[2]_0 ({\genblk1[0].tap_inst_n_13 ,\genblk1[0].tap_inst_n_14 }),
        .\ov_sum_reg[3]_0 ({\genblk1[0].tap_inst_n_15 ,\genblk1[0].tap_inst_n_16 }),
        .\ov_sum_reg[6]_0 ({\genblk1[0].tap_inst_n_17 ,\genblk1[0].tap_inst_n_18 ,\genblk1[0].tap_inst_n_19 ,\genblk1[0].tap_inst_n_20 }),
        .\ov_sum_reg[7]_0 ({\genblk1[0].tap_inst_n_21 ,\genblk1[0].tap_inst_n_22 ,\genblk1[0].tap_inst_n_23 ,\genblk1[0].tap_inst_n_24 }),
        .ov_sum_reg_0({ov_sum_reg_1[23],ov_sum_reg_1[21:20]}),
        .ov_sum_reg_1(ov_sum_reg_6),
        .ov_sum_reg_2(ov_sum_reg_5[22:1]),
        .tap_en(tap_en));
  tap_transposed_0 \genblk1[1].tap_inst 
       (.CLK(CLK),
        .DI(\genblk1[1].tap_inst_n_23 ),
        .O({\ov_dout0_inferred__0/i___0_carry__4_n_5 ,\ov_dout0_inferred__0/i___0_carry__4_n_6 ,\ov_dout0_inferred__0/i___0_carry__4_n_7 }),
        .S({\genblk1[1].tap_inst_n_25 ,\genblk1[1].tap_inst_n_26 }),
        .douta(\sample_data[1]_9 ),
        .\ov_dout_reg[23] ({\ov_dout0_inferred__0/i___70_carry__4_n_5 ,\ov_dout0_inferred__0/i___70_carry__4_n_6 ,\ov_dout0_inferred__0/i___70_carry__4_n_7 }),
        .\ov_dout_reg[23]_0 (\genblk1[0].tap_inst_n_5 ),
        .ov_sum1_0(\weight_data[1]_1 ),
        .ov_sum_reg(ov_sum_reg_1[22:21]),
        .\ov_sum_reg[20]_0 (\genblk1[1].tap_inst_n_24 ),
        .\ov_sum_reg[23]_0 ({ov_sum_reg_0[23],ov_sum_reg_0[21:0]}),
        .\ov_sum_reg[23]_1 (\genblk1[7].tap_inst_n_22 ),
        .tap_en(tap_en));
  tap_transposed_1 \genblk1[2].tap_inst 
       (.CLK(CLK),
        .douta(\sample_data[2]_10 ),
        .ov_sum1_0(\weight_data[2]_2 ),
        .ov_sum_reg(ov_sum_reg_1),
        .\ov_sum_reg[0]_0 (\genblk1[7].tap_inst_n_22 ),
        .tap_en(tap_en));
  tap_transposed_2 \genblk1[3].tap_inst 
       (.CLK(CLK),
        .S(\genblk1[3].tap_inst_n_23 ),
        .douta(\sample_data[3]_11 ),
        .ov_sum1_0(\weight_data[3]_3 ),
        .ov_sum_reg(ov_sum_reg_3[23:22]),
        .\ov_sum_reg[22]_0 (ov_sum_reg_2),
        .\ov_sum_reg[23]_0 (\genblk1[7].tap_inst_n_22 ),
        .ov_sum_reg_0(ov_sum_reg_4[23:22]),
        .tap_en(tap_en));
  tap_transposed_3 \genblk1[4].tap_inst 
       (.CLK(CLK),
        .DI(\genblk1[4].tap_inst_n_23 ),
        .S({\genblk1[4].tap_inst_n_24 ,\genblk1[4].tap_inst_n_25 }),
        .douta(\sample_data[4]_12 ),
        .\ov_dout0_inferred__0/i___70_carry (ov_sum_reg_2[1:0]),
        .ov_sum1_0(\weight_data[4]_4 ),
        .ov_sum_reg(ov_sum_reg_4[1:0]),
        .\ov_sum_reg[0]_0 (\genblk1[7].tap_inst_n_22 ),
        .\ov_sum_reg[23]_0 (ov_sum_reg_3),
        .tap_en(tap_en));
  tap_transposed_4 \genblk1[5].tap_inst 
       (.CLK(CLK),
        .DI({\genblk1[5].tap_inst_n_7 ,\genblk1[5].tap_inst_n_8 ,\genblk1[5].tap_inst_n_9 }),
        .S({\genblk1[5].tap_inst_n_4 ,\genblk1[5].tap_inst_n_5 ,\genblk1[5].tap_inst_n_6 }),
        .douta(\sample_data[5]_13 ),
        .\ov_dout0_inferred__0/i___70_carry__4 (ov_sum_reg_3[22:1]),
        .\ov_dout0_inferred__0/i___70_carry__4_0 (ov_sum_reg_2[22:1]),
        .ov_sum1_0(\weight_data[5]_5 ),
        .\ov_sum_reg[10]_0 ({\genblk1[5].tap_inst_n_22 ,\genblk1[5].tap_inst_n_23 ,\genblk1[5].tap_inst_n_24 ,\genblk1[5].tap_inst_n_25 }),
        .\ov_sum_reg[11]_0 ({\genblk1[5].tap_inst_n_26 ,\genblk1[5].tap_inst_n_27 ,\genblk1[5].tap_inst_n_28 ,\genblk1[5].tap_inst_n_29 }),
        .\ov_sum_reg[14]_0 ({\genblk1[5].tap_inst_n_30 ,\genblk1[5].tap_inst_n_31 ,\genblk1[5].tap_inst_n_32 ,\genblk1[5].tap_inst_n_33 }),
        .\ov_sum_reg[15]_0 ({\genblk1[5].tap_inst_n_34 ,\genblk1[5].tap_inst_n_35 ,\genblk1[5].tap_inst_n_36 ,\genblk1[5].tap_inst_n_37 }),
        .\ov_sum_reg[18]_0 ({\genblk1[5].tap_inst_n_38 ,\genblk1[5].tap_inst_n_39 ,\genblk1[5].tap_inst_n_40 ,\genblk1[5].tap_inst_n_41 }),
        .\ov_sum_reg[19]_0 ({\genblk1[5].tap_inst_n_42 ,\genblk1[5].tap_inst_n_43 ,\genblk1[5].tap_inst_n_44 ,\genblk1[5].tap_inst_n_45 }),
        .\ov_sum_reg[23]_0 ({ov_sum_reg_4[23:22],ov_sum_reg_4[1:0]}),
        .\ov_sum_reg[23]_1 (\genblk1[7].tap_inst_n_22 ),
        .\ov_sum_reg[2]_0 ({\genblk1[5].tap_inst_n_10 ,\genblk1[5].tap_inst_n_11 }),
        .\ov_sum_reg[3]_0 ({\genblk1[5].tap_inst_n_12 ,\genblk1[5].tap_inst_n_13 }),
        .\ov_sum_reg[6]_0 ({\genblk1[5].tap_inst_n_14 ,\genblk1[5].tap_inst_n_15 ,\genblk1[5].tap_inst_n_16 ,\genblk1[5].tap_inst_n_17 }),
        .\ov_sum_reg[7]_0 ({\genblk1[5].tap_inst_n_18 ,\genblk1[5].tap_inst_n_19 ,\genblk1[5].tap_inst_n_20 ,\genblk1[5].tap_inst_n_21 }),
        .tap_en(tap_en));
  tap_transposed_5 \genblk1[6].tap_inst 
       (.CLK(CLK),
        .douta(\sample_data[6]_14 ),
        .ov_sum1_0(\weight_data[6]_6 ),
        .ov_sum_reg(ov_sum_reg_5),
        .\ov_sum_reg[0]_0 (\genblk1[7].tap_inst_n_22 ),
        .tap_en(tap_en));
  tap_transposed_6 \genblk1[7].tap_inst 
       (.CLK(CLK),
        .DI(\genblk1[7].tap_inst_n_24 ),
        .S(\genblk1[7].tap_inst_n_23 ),
        .douta(\sample_data[7]_15 ),
        .i_rst_IBUF(i_rst_IBUF),
        .\ov_dout0_inferred__0/i___0_carry__4 ({ov_sum_reg[23:22],ov_sum_reg[1:0]}),
        .ov_sum1_0(\weight_data[7]_7 ),
        .ov_sum_reg({ov_sum_reg_5[23:22],ov_sum_reg_5[1:0]}),
        .\ov_sum_reg[1]_0 ({\genblk1[7].tap_inst_n_25 ,\genblk1[7].tap_inst_n_26 }),
        .\ov_sum_reg[22]_0 (ov_sum_reg_6),
        .sum_rst(sum_rst),
        .sum_rst_reg(\genblk1[7].tap_inst_n_22 ),
        .tap_en(tap_en));
  xpm_memory_sprom \genblk2[0].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[0]_0 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized0 \genblk2[1].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[1]_1 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized1 \genblk2[2].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[2]_2 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized2 \genblk2[3].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[3]_3 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized3 \genblk2[4].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[4]_4 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized4 \genblk2[5].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[5]_5 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized5 \genblk2[6].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[6]_6 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_sprom__parameterized6 \genblk2[7].xpm_memory_sprom_inst 
       (.CLK(CLK),
        .Q(weight_re_addr_reg),
        .douta(\weight_data[7]_7 ),
        .ena(weight_re_reg_n_0),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF));
  xpm_memory_spram \genblk3[0].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[0]_8 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (Q),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_7 \genblk3[1].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[1]_9 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[0]_8 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_8 \genblk3[2].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[2]_10 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[1]_9 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_9 \genblk3[3].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[3]_11 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[2]_10 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_10 \genblk3[4].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[4]_12 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[3]_11 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_11 \genblk3[5].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[5]_13 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[4]_12 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_12 \genblk3[6].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[6]_14 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[5]_13 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  xpm_memory_spram_13 \genblk3[7].xpm_memory_spram_inst 
       (.CLK(CLK),
        .Q({\sample_addr_reg_n_0_[4] ,\sample_addr_reg_n_0_[3] ,\sample_addr_reg_n_0_[2] ,\sample_addr_reg_n_0_[1] ,\sample_addr_reg_n_0_[0] }),
        .douta(\sample_data[7]_15 ),
        .\gen_wr_a.gen_word_narrow.mem_reg (\sample_data[6]_14 ),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .wea(wea));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__0_i_1
       (.I0(\ov_dout0_inferred__0/i___0_carry__0_n_5 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_5 ),
        .I2(ov_sum_reg_0[6]),
        .I3(ov_sum_reg_1[6]),
        .I4(i___142_carry__0_i_9_n_0),
        .O(i___142_carry__0_i_1_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__0_i_10
       (.I0(ov_sum_reg_0[4]),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_7 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__0_n_7 ),
        .O(i___142_carry__0_i_10_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__0_i_11
       (.I0(ov_sum_reg_0[3]),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_4 ),
        .I2(\ov_dout0_inferred__0/i___0_carry_n_4 ),
        .O(i___142_carry__0_i_11_n_0));
  LUT3 #(
    .INIT(8'h17)) 
    i___142_carry__0_i_12
       (.I0(ov_sum_reg_0[6]),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__0_n_5 ),
        .O(i___142_carry__0_i_12_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__0_i_2
       (.I0(\ov_dout0_inferred__0/i___0_carry__0_n_6 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_6 ),
        .I2(ov_sum_reg_0[5]),
        .I3(ov_sum_reg_1[5]),
        .I4(i___142_carry__0_i_10_n_0),
        .O(i___142_carry__0_i_2_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__0_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry__0_n_7 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_7 ),
        .I2(ov_sum_reg_0[4]),
        .I3(ov_sum_reg_1[4]),
        .I4(i___142_carry__0_i_11_n_0),
        .O(i___142_carry__0_i_3_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__0_i_4
       (.I0(\ov_dout0_inferred__0/i___0_carry_n_4 ),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_4 ),
        .I2(ov_sum_reg_0[3]),
        .I3(ov_sum_reg_1[3]),
        .I4(i___142_carry_i_9_n_0),
        .O(i___142_carry__0_i_4_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    i___142_carry__0_i_5
       (.I0(i___142_carry__0_i_1_n_0),
        .I1(i___142_carry__0_i_12_n_0),
        .I2(\ov_dout0_inferred__0/i___0_carry__0_n_4 ),
        .I3(\ov_dout0_inferred__0/i___70_carry__0_n_4 ),
        .I4(ov_sum_reg_0[7]),
        .I5(ov_sum_reg_1[7]),
        .O(i___142_carry__0_i_5_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__0_i_6
       (.I0(i___142_carry__0_i_2_n_0),
        .I1(i___142_carry__0_i_9_n_0),
        .I2(ov_sum_reg_1[6]),
        .I3(\ov_dout0_inferred__0/i___0_carry__0_n_5 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__0_n_5 ),
        .I5(ov_sum_reg_0[6]),
        .O(i___142_carry__0_i_6_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__0_i_7
       (.I0(i___142_carry__0_i_3_n_0),
        .I1(i___142_carry__0_i_10_n_0),
        .I2(ov_sum_reg_1[5]),
        .I3(\ov_dout0_inferred__0/i___0_carry__0_n_6 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__0_n_6 ),
        .I5(ov_sum_reg_0[5]),
        .O(i___142_carry__0_i_7_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__0_i_8
       (.I0(i___142_carry__0_i_4_n_0),
        .I1(i___142_carry__0_i_11_n_0),
        .I2(ov_sum_reg_1[4]),
        .I3(\ov_dout0_inferred__0/i___0_carry__0_n_7 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__0_n_7 ),
        .I5(ov_sum_reg_0[4]),
        .O(i___142_carry__0_i_8_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__0_i_9
       (.I0(ov_sum_reg_0[5]),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_6 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__0_n_6 ),
        .O(i___142_carry__0_i_9_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__1_i_1
       (.I0(\ov_dout0_inferred__0/i___0_carry__1_n_5 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_5 ),
        .I2(ov_sum_reg_0[10]),
        .I3(ov_sum_reg_1[10]),
        .I4(i___142_carry__1_i_9_n_0),
        .O(i___142_carry__1_i_1_n_0));
  LUT3 #(
    .INIT(8'h17)) 
    i___142_carry__1_i_10
       (.I0(ov_sum_reg_0[8]),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_7 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__1_n_7 ),
        .O(i___142_carry__1_i_10_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__1_i_11
       (.I0(ov_sum_reg_0[7]),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_4 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__0_n_4 ),
        .O(i___142_carry__1_i_11_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__1_i_12
       (.I0(ov_sum_reg_0[10]),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__1_n_5 ),
        .O(i___142_carry__1_i_12_n_0));
  LUT5 #(
    .INIT(32'h96FF0096)) 
    i___142_carry__1_i_2
       (.I0(\ov_dout0_inferred__0/i___0_carry__1_n_6 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_6 ),
        .I2(ov_sum_reg_0[9]),
        .I3(i___142_carry__1_i_10_n_0),
        .I4(ov_sum_reg_1[9]),
        .O(i___142_carry__1_i_2_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__1_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry__1_n_7 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_7 ),
        .I2(ov_sum_reg_0[8]),
        .I3(ov_sum_reg_1[8]),
        .I4(i___142_carry__1_i_11_n_0),
        .O(i___142_carry__1_i_3_n_0));
  LUT5 #(
    .INIT(32'h96FF0096)) 
    i___142_carry__1_i_4
       (.I0(\ov_dout0_inferred__0/i___0_carry__0_n_4 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__0_n_4 ),
        .I2(ov_sum_reg_0[7]),
        .I3(i___142_carry__0_i_12_n_0),
        .I4(ov_sum_reg_1[7]),
        .O(i___142_carry__1_i_4_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__1_i_5
       (.I0(i___142_carry__1_i_1_n_0),
        .I1(i___142_carry__1_i_12_n_0),
        .I2(ov_sum_reg_1[11]),
        .I3(\ov_dout0_inferred__0/i___0_carry__1_n_4 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__1_n_4 ),
        .I5(ov_sum_reg_0[11]),
        .O(i___142_carry__1_i_5_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__1_i_6
       (.I0(i___142_carry__1_i_2_n_0),
        .I1(i___142_carry__1_i_9_n_0),
        .I2(ov_sum_reg_1[10]),
        .I3(\ov_dout0_inferred__0/i___0_carry__1_n_5 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__1_n_5 ),
        .I5(ov_sum_reg_0[10]),
        .O(i___142_carry__1_i_6_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    i___142_carry__1_i_7
       (.I0(i___142_carry__1_i_3_n_0),
        .I1(i___142_carry__1_i_10_n_0),
        .I2(\ov_dout0_inferred__0/i___0_carry__1_n_6 ),
        .I3(\ov_dout0_inferred__0/i___70_carry__1_n_6 ),
        .I4(ov_sum_reg_0[9]),
        .I5(ov_sum_reg_1[9]),
        .O(i___142_carry__1_i_7_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__1_i_8
       (.I0(i___142_carry__1_i_4_n_0),
        .I1(i___142_carry__1_i_11_n_0),
        .I2(ov_sum_reg_1[8]),
        .I3(\ov_dout0_inferred__0/i___0_carry__1_n_7 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__1_n_7 ),
        .I5(ov_sum_reg_0[8]),
        .O(i___142_carry__1_i_8_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__1_i_9
       (.I0(ov_sum_reg_0[9]),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_6 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__1_n_6 ),
        .O(i___142_carry__1_i_9_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__2_i_1
       (.I0(\ov_dout0_inferred__0/i___0_carry__2_n_5 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_5 ),
        .I2(ov_sum_reg_0[14]),
        .I3(ov_sum_reg_1[14]),
        .I4(i___142_carry__2_i_9_n_0),
        .O(i___142_carry__2_i_1_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__2_i_10
       (.I0(ov_sum_reg_0[12]),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_7 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__2_n_7 ),
        .O(i___142_carry__2_i_10_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__2_i_11
       (.I0(ov_sum_reg_0[11]),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_4 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__1_n_4 ),
        .O(i___142_carry__2_i_11_n_0));
  LUT3 #(
    .INIT(8'h17)) 
    i___142_carry__2_i_12
       (.I0(ov_sum_reg_0[14]),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__2_n_5 ),
        .O(i___142_carry__2_i_12_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__2_i_2
       (.I0(\ov_dout0_inferred__0/i___0_carry__2_n_6 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_6 ),
        .I2(ov_sum_reg_0[13]),
        .I3(ov_sum_reg_1[13]),
        .I4(i___142_carry__2_i_10_n_0),
        .O(i___142_carry__2_i_2_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__2_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry__2_n_7 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_7 ),
        .I2(ov_sum_reg_0[12]),
        .I3(ov_sum_reg_1[12]),
        .I4(i___142_carry__2_i_11_n_0),
        .O(i___142_carry__2_i_3_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__2_i_4
       (.I0(\ov_dout0_inferred__0/i___0_carry__1_n_4 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__1_n_4 ),
        .I2(ov_sum_reg_0[11]),
        .I3(ov_sum_reg_1[11]),
        .I4(i___142_carry__1_i_12_n_0),
        .O(i___142_carry__2_i_4_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    i___142_carry__2_i_5
       (.I0(i___142_carry__2_i_1_n_0),
        .I1(i___142_carry__2_i_12_n_0),
        .I2(\ov_dout0_inferred__0/i___0_carry__2_n_4 ),
        .I3(\ov_dout0_inferred__0/i___70_carry__2_n_4 ),
        .I4(ov_sum_reg_0[15]),
        .I5(ov_sum_reg_1[15]),
        .O(i___142_carry__2_i_5_n_0));
  (* \PinAttr:I0:HOLD_DETOUR  = "143" *) 
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__2_i_6
       (.I0(i___142_carry__2_i_2_n_0),
        .I1(i___142_carry__2_i_9_n_0),
        .I2(ov_sum_reg_1[14]),
        .I3(\ov_dout0_inferred__0/i___0_carry__2_n_5 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__2_n_5 ),
        .I5(ov_sum_reg_0[14]),
        .O(i___142_carry__2_i_6_n_0));
  (* \PinAttr:I2:HOLD_DETOUR  = "454" *) 
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__2_i_7
       (.I0(i___142_carry__2_i_3_n_0),
        .I1(i___142_carry__2_i_10_n_0),
        .I2(ov_sum_reg_1[13]),
        .I3(\ov_dout0_inferred__0/i___0_carry__2_n_6 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__2_n_6 ),
        .I5(ov_sum_reg_0[13]),
        .O(i___142_carry__2_i_7_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__2_i_8
       (.I0(i___142_carry__2_i_4_n_0),
        .I1(i___142_carry__2_i_11_n_0),
        .I2(ov_sum_reg_1[12]),
        .I3(\ov_dout0_inferred__0/i___0_carry__2_n_7 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__2_n_7 ),
        .I5(ov_sum_reg_0[12]),
        .O(i___142_carry__2_i_8_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__2_i_9
       (.I0(ov_sum_reg_0[13]),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_6 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__2_n_6 ),
        .O(i___142_carry__2_i_9_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__3_i_1
       (.I0(\ov_dout0_inferred__0/i___0_carry__3_n_5 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_5 ),
        .I2(ov_sum_reg_0[18]),
        .I3(ov_sum_reg_1[18]),
        .I4(i___142_carry__3_i_9_n_0),
        .O(i___142_carry__3_i_1_n_0));
  LUT3 #(
    .INIT(8'h17)) 
    i___142_carry__3_i_10
       (.I0(ov_sum_reg_0[16]),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_7 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_7 ),
        .O(i___142_carry__3_i_10_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__3_i_11
       (.I0(ov_sum_reg_0[15]),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_4 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__2_n_4 ),
        .O(i___142_carry__3_i_11_n_0));
  LUT3 #(
    .INIT(8'h17)) 
    i___142_carry__3_i_12
       (.I0(ov_sum_reg_0[18]),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_5 ),
        .O(i___142_carry__3_i_12_n_0));
  LUT5 #(
    .INIT(32'h96FF0096)) 
    i___142_carry__3_i_2
       (.I0(\ov_dout0_inferred__0/i___0_carry__3_n_6 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_6 ),
        .I2(ov_sum_reg_0[17]),
        .I3(i___142_carry__3_i_10_n_0),
        .I4(ov_sum_reg_1[17]),
        .O(i___142_carry__3_i_2_n_0));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__3_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry__3_n_7 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_7 ),
        .I2(ov_sum_reg_0[16]),
        .I3(ov_sum_reg_1[16]),
        .I4(i___142_carry__3_i_11_n_0),
        .O(i___142_carry__3_i_3_n_0));
  LUT5 #(
    .INIT(32'h96FF0096)) 
    i___142_carry__3_i_4
       (.I0(\ov_dout0_inferred__0/i___0_carry__2_n_4 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__2_n_4 ),
        .I2(ov_sum_reg_0[15]),
        .I3(i___142_carry__2_i_12_n_0),
        .I4(ov_sum_reg_1[15]),
        .O(i___142_carry__3_i_4_n_0));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    i___142_carry__3_i_5
       (.I0(i___142_carry__3_i_1_n_0),
        .I1(i___142_carry__3_i_12_n_0),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_4 ),
        .I3(\ov_dout0_inferred__0/i___70_carry__3_n_4 ),
        .I4(ov_sum_reg_0[19]),
        .I5(ov_sum_reg_1[19]),
        .O(i___142_carry__3_i_5_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__3_i_6
       (.I0(i___142_carry__3_i_2_n_0),
        .I1(i___142_carry__3_i_9_n_0),
        .I2(ov_sum_reg_1[18]),
        .I3(\ov_dout0_inferred__0/i___0_carry__3_n_5 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__3_n_5 ),
        .I5(ov_sum_reg_0[18]),
        .O(i___142_carry__3_i_6_n_0));
  (* \PinAttr:I5:HOLD_DETOUR  = "394" *) 
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    i___142_carry__3_i_7
       (.I0(i___142_carry__3_i_3_n_0),
        .I1(i___142_carry__3_i_10_n_0),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_6 ),
        .I3(\ov_dout0_inferred__0/i___70_carry__3_n_6 ),
        .I4(ov_sum_reg_0[17]),
        .I5(ov_sum_reg_1[17]),
        .O(i___142_carry__3_i_7_n_0));
  (* \PinAttr:I2:HOLD_DETOUR  = "390" *) 
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__3_i_8
       (.I0(i___142_carry__3_i_4_n_0),
        .I1(i___142_carry__3_i_11_n_0),
        .I2(ov_sum_reg_1[16]),
        .I3(\ov_dout0_inferred__0/i___0_carry__3_n_7 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__3_n_7 ),
        .I5(ov_sum_reg_0[16]),
        .O(i___142_carry__3_i_8_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__3_i_9
       (.I0(ov_sum_reg_0[17]),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_6 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_6 ),
        .O(i___142_carry__3_i_9_n_0));
  LUT5 #(
    .INIT(32'h96FF0096)) 
    i___142_carry__4_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry__3_n_4 ),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_4 ),
        .I2(ov_sum_reg_0[19]),
        .I3(i___142_carry__3_i_12_n_0),
        .I4(ov_sum_reg_1[19]),
        .O(i___142_carry__4_i_3_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__4_i_7
       (.I0(i___142_carry__4_i_3_n_0),
        .I1(i___142_carry__4_i_9_n_0),
        .I2(ov_sum_reg_1[20]),
        .I3(\ov_dout0_inferred__0/i___0_carry__4_n_7 ),
        .I4(\ov_dout0_inferred__0/i___70_carry__4_n_7 ),
        .I5(ov_sum_reg_0[20]),
        .O(i___142_carry__4_i_7_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__4_i_9
       (.I0(ov_sum_reg_0[19]),
        .I1(\ov_dout0_inferred__0/i___70_carry__3_n_4 ),
        .I2(\ov_dout0_inferred__0/i___0_carry__3_n_4 ),
        .O(i___142_carry__4_i_9_n_0));
  (* \PinAttr:I4:HOLD_DETOUR  = "180" *) 
  LUT5 #(
    .INIT(32'hFFE8E800)) 
    i___142_carry_i_1
       (.I0(\ov_dout0_inferred__0/i___0_carry_n_6 ),
        .I1(ov_sum_reg_0[1]),
        .I2(\ov_dout0_inferred__0/i___70_carry_n_6 ),
        .I3(i___142_carry_i_8_n_0),
        .I4(ov_sum_reg_1[2]),
        .O(i___142_carry_i_1_n_0));
  (* \PinAttr:I4:HOLD_DETOUR  = "180" *) 
  LUT5 #(
    .INIT(32'hE81717E8)) 
    i___142_carry_i_2
       (.I0(\ov_dout0_inferred__0/i___70_carry_n_6 ),
        .I1(ov_sum_reg_0[1]),
        .I2(\ov_dout0_inferred__0/i___0_carry_n_6 ),
        .I3(i___142_carry_i_8_n_0),
        .I4(ov_sum_reg_1[2]),
        .O(i___142_carry_i_2_n_0));
  LUT4 #(
    .INIT(16'h6996)) 
    i___142_carry_i_3
       (.I0(\ov_dout0_inferred__0/i___0_carry_n_6 ),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_6 ),
        .I2(ov_sum_reg_0[1]),
        .I3(ov_sum_reg_1[1]),
        .O(i___142_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry_i_4
       (.I0(i___142_carry_i_1_n_0),
        .I1(i___142_carry_i_9_n_0),
        .I2(ov_sum_reg_1[3]),
        .I3(\ov_dout0_inferred__0/i___0_carry_n_4 ),
        .I4(\ov_dout0_inferred__0/i___70_carry_n_4 ),
        .I5(ov_sum_reg_0[3]),
        .O(i___142_carry_i_4_n_0));
  LUT6 #(
    .INIT(64'h6999999699969666)) 
    i___142_carry_i_5
       (.I0(ov_sum_reg_1[2]),
        .I1(i___142_carry_i_8_n_0),
        .I2(ov_sum_reg_1[1]),
        .I3(ov_sum_reg_0[1]),
        .I4(\ov_dout0_inferred__0/i___70_carry_n_6 ),
        .I5(\ov_dout0_inferred__0/i___0_carry_n_6 ),
        .O(i___142_carry_i_5_n_0));
  LUT4 #(
    .INIT(16'h566A)) 
    i___142_carry_i_6
       (.I0(i___142_carry_i_3_n_0),
        .I1(ov_sum_reg_0[0]),
        .I2(\ov_dout0_inferred__0/i___70_carry_n_7 ),
        .I3(\ov_dout0_inferred__0/i___0_carry_n_7 ),
        .O(i___142_carry_i_6_n_0));
  LUT4 #(
    .INIT(16'h6996)) 
    i___142_carry_i_7
       (.I0(ov_sum_reg_0[0]),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_7 ),
        .I2(\ov_dout0_inferred__0/i___0_carry_n_7 ),
        .I3(ov_sum_reg_1[0]),
        .O(i___142_carry_i_7_n_0));
  LUT3 #(
    .INIT(8'h96)) 
    i___142_carry_i_8
       (.I0(ov_sum_reg_0[2]),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry_n_5 ),
        .O(i___142_carry_i_8_n_0));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry_i_9
       (.I0(ov_sum_reg_0[2]),
        .I1(\ov_dout0_inferred__0/i___70_carry_n_5 ),
        .I2(\ov_dout0_inferred__0/i___0_carry_n_5 ),
        .O(i___142_carry_i_9_n_0));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    o_dout_valid_i_1
       (.I0(state[2]),
        .I1(state[1]),
        .I2(weight_re_addr_reg[4]),
        .I3(\state[1]_i_2_n_0 ),
        .I4(weight_re_addr_reg[3]),
        .I5(state[0]),
        .O(o_dout_valid_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_dout_valid_reg
       (.C(CLK),
        .CE(1'b1),
        .D(o_dout_valid_i_1_n_0),
        .Q(fir_out_valid),
        .R(i_rst_IBUF));
  LUT3 #(
    .INIT(8'h10)) 
    o_ready_i_1__0
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .O(o_ready_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_ready_reg
       (.C(CLK),
        .CE(1'b1),
        .D(o_ready_i_1__0_n_0),
        .Q(wea),
        .R(i_rst_IBUF));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry 
       (.CI(1'b0),
        .CO({\ov_dout0_inferred__0/i___0_carry_n_0 ,\ov_dout0_inferred__0/i___0_carry_n_1 ,\ov_dout0_inferred__0/i___0_carry_n_2 ,\ov_dout0_inferred__0/i___0_carry_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[0].tap_inst_n_13 ,\genblk1[0].tap_inst_n_14 ,\genblk1[7].tap_inst_n_24 ,1'b0}),
        .O({\ov_dout0_inferred__0/i___0_carry_n_4 ,\ov_dout0_inferred__0/i___0_carry_n_5 ,\ov_dout0_inferred__0/i___0_carry_n_6 ,\ov_dout0_inferred__0/i___0_carry_n_7 }),
        .S({\genblk1[0].tap_inst_n_15 ,\genblk1[0].tap_inst_n_16 ,\genblk1[7].tap_inst_n_25 ,\genblk1[7].tap_inst_n_26 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry__0 
       (.CI(\ov_dout0_inferred__0/i___0_carry_n_0 ),
        .CO({\ov_dout0_inferred__0/i___0_carry__0_n_0 ,\ov_dout0_inferred__0/i___0_carry__0_n_1 ,\ov_dout0_inferred__0/i___0_carry__0_n_2 ,\ov_dout0_inferred__0/i___0_carry__0_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[0].tap_inst_n_17 ,\genblk1[0].tap_inst_n_18 ,\genblk1[0].tap_inst_n_19 ,\genblk1[0].tap_inst_n_20 }),
        .O({\ov_dout0_inferred__0/i___0_carry__0_n_4 ,\ov_dout0_inferred__0/i___0_carry__0_n_5 ,\ov_dout0_inferred__0/i___0_carry__0_n_6 ,\ov_dout0_inferred__0/i___0_carry__0_n_7 }),
        .S({\genblk1[0].tap_inst_n_21 ,\genblk1[0].tap_inst_n_22 ,\genblk1[0].tap_inst_n_23 ,\genblk1[0].tap_inst_n_24 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry__1 
       (.CI(\ov_dout0_inferred__0/i___0_carry__0_n_0 ),
        .CO({\ov_dout0_inferred__0/i___0_carry__1_n_0 ,\ov_dout0_inferred__0/i___0_carry__1_n_1 ,\ov_dout0_inferred__0/i___0_carry__1_n_2 ,\ov_dout0_inferred__0/i___0_carry__1_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[0].tap_inst_n_25 ,\genblk1[0].tap_inst_n_26 ,\genblk1[0].tap_inst_n_27 ,\genblk1[0].tap_inst_n_28 }),
        .O({\ov_dout0_inferred__0/i___0_carry__1_n_4 ,\ov_dout0_inferred__0/i___0_carry__1_n_5 ,\ov_dout0_inferred__0/i___0_carry__1_n_6 ,\ov_dout0_inferred__0/i___0_carry__1_n_7 }),
        .S({\genblk1[0].tap_inst_n_29 ,\genblk1[0].tap_inst_n_30 ,\genblk1[0].tap_inst_n_31 ,\genblk1[0].tap_inst_n_32 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry__2 
       (.CI(\ov_dout0_inferred__0/i___0_carry__1_n_0 ),
        .CO({\ov_dout0_inferred__0/i___0_carry__2_n_0 ,\ov_dout0_inferred__0/i___0_carry__2_n_1 ,\ov_dout0_inferred__0/i___0_carry__2_n_2 ,\ov_dout0_inferred__0/i___0_carry__2_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[0].tap_inst_n_33 ,\genblk1[0].tap_inst_n_34 ,\genblk1[0].tap_inst_n_35 ,\genblk1[0].tap_inst_n_36 }),
        .O({\ov_dout0_inferred__0/i___0_carry__2_n_4 ,\ov_dout0_inferred__0/i___0_carry__2_n_5 ,\ov_dout0_inferred__0/i___0_carry__2_n_6 ,\ov_dout0_inferred__0/i___0_carry__2_n_7 }),
        .S({\genblk1[0].tap_inst_n_37 ,\genblk1[0].tap_inst_n_38 ,\genblk1[0].tap_inst_n_39 ,\genblk1[0].tap_inst_n_40 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry__3 
       (.CI(\ov_dout0_inferred__0/i___0_carry__2_n_0 ),
        .CO({\ov_dout0_inferred__0/i___0_carry__3_n_0 ,\ov_dout0_inferred__0/i___0_carry__3_n_1 ,\ov_dout0_inferred__0/i___0_carry__3_n_2 ,\ov_dout0_inferred__0/i___0_carry__3_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[0].tap_inst_n_41 ,\genblk1[0].tap_inst_n_42 ,\genblk1[0].tap_inst_n_43 ,\genblk1[0].tap_inst_n_44 }),
        .O({\ov_dout0_inferred__0/i___0_carry__3_n_4 ,\ov_dout0_inferred__0/i___0_carry__3_n_5 ,\ov_dout0_inferred__0/i___0_carry__3_n_6 ,\ov_dout0_inferred__0/i___0_carry__3_n_7 }),
        .S({\genblk1[0].tap_inst_n_45 ,\genblk1[0].tap_inst_n_46 ,\genblk1[0].tap_inst_n_47 ,\genblk1[0].tap_inst_n_48 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___0_carry__4 
       (.CI(\ov_dout0_inferred__0/i___0_carry__3_n_0 ),
        .CO({\NLW_ov_dout0_inferred__0/i___0_carry__4_CO_UNCONNECTED [3],\ov_dout0_inferred__0/i___0_carry__4_n_1 ,\ov_dout0_inferred__0/i___0_carry__4_n_2 ,\ov_dout0_inferred__0/i___0_carry__4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,\genblk1[0].tap_inst_n_9 ,\genblk1[0].tap_inst_n_10 ,\genblk1[0].tap_inst_n_11 }),
        .O({\ov_dout0_inferred__0/i___0_carry__4_n_4 ,\ov_dout0_inferred__0/i___0_carry__4_n_5 ,\ov_dout0_inferred__0/i___0_carry__4_n_6 ,\ov_dout0_inferred__0/i___0_carry__4_n_7 }),
        .S({\genblk1[7].tap_inst_n_23 ,\genblk1[0].tap_inst_n_6 ,\genblk1[0].tap_inst_n_7 ,\genblk1[0].tap_inst_n_8 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry 
       (.CI(1'b0),
        .CO({\ov_dout0_inferred__0/i___142_carry_n_0 ,\ov_dout0_inferred__0/i___142_carry_n_1 ,\ov_dout0_inferred__0/i___142_carry_n_2 ,\ov_dout0_inferred__0/i___142_carry_n_3 }),
        .CYINIT(1'b0),
        .DI({i___142_carry_i_1_n_0,i___142_carry_i_2_n_0,i___142_carry_i_3_n_0,ov_sum_reg_1[0]}),
        .O(acc[3:0]),
        .S({i___142_carry_i_4_n_0,i___142_carry_i_5_n_0,i___142_carry_i_6_n_0,i___142_carry_i_7_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry__0 
       (.CI(\ov_dout0_inferred__0/i___142_carry_n_0 ),
        .CO({\ov_dout0_inferred__0/i___142_carry__0_n_0 ,\ov_dout0_inferred__0/i___142_carry__0_n_1 ,\ov_dout0_inferred__0/i___142_carry__0_n_2 ,\ov_dout0_inferred__0/i___142_carry__0_n_3 }),
        .CYINIT(1'b0),
        .DI({i___142_carry__0_i_1_n_0,i___142_carry__0_i_2_n_0,i___142_carry__0_i_3_n_0,i___142_carry__0_i_4_n_0}),
        .O(acc[7:4]),
        .S({i___142_carry__0_i_5_n_0,i___142_carry__0_i_6_n_0,i___142_carry__0_i_7_n_0,i___142_carry__0_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry__1 
       (.CI(\ov_dout0_inferred__0/i___142_carry__0_n_0 ),
        .CO({\ov_dout0_inferred__0/i___142_carry__1_n_0 ,\ov_dout0_inferred__0/i___142_carry__1_n_1 ,\ov_dout0_inferred__0/i___142_carry__1_n_2 ,\ov_dout0_inferred__0/i___142_carry__1_n_3 }),
        .CYINIT(1'b0),
        .DI({i___142_carry__1_i_1_n_0,i___142_carry__1_i_2_n_0,i___142_carry__1_i_3_n_0,i___142_carry__1_i_4_n_0}),
        .O(acc[11:8]),
        .S({i___142_carry__1_i_5_n_0,i___142_carry__1_i_6_n_0,i___142_carry__1_i_7_n_0,i___142_carry__1_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry__2 
       (.CI(\ov_dout0_inferred__0/i___142_carry__1_n_0 ),
        .CO({\ov_dout0_inferred__0/i___142_carry__2_n_0 ,\ov_dout0_inferred__0/i___142_carry__2_n_1 ,\ov_dout0_inferred__0/i___142_carry__2_n_2 ,\ov_dout0_inferred__0/i___142_carry__2_n_3 }),
        .CYINIT(1'b0),
        .DI({i___142_carry__2_i_1_n_0,i___142_carry__2_i_2_n_0,i___142_carry__2_i_3_n_0,i___142_carry__2_i_4_n_0}),
        .O(acc[15:12]),
        .S({i___142_carry__2_i_5_n_0,i___142_carry__2_i_6_n_0,i___142_carry__2_i_7_n_0,i___142_carry__2_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry__3 
       (.CI(\ov_dout0_inferred__0/i___142_carry__2_n_0 ),
        .CO({\ov_dout0_inferred__0/i___142_carry__3_n_0 ,\ov_dout0_inferred__0/i___142_carry__3_n_1 ,\ov_dout0_inferred__0/i___142_carry__3_n_2 ,\ov_dout0_inferred__0/i___142_carry__3_n_3 }),
        .CYINIT(1'b0),
        .DI({i___142_carry__3_i_1_n_0,i___142_carry__3_i_2_n_0,i___142_carry__3_i_3_n_0,i___142_carry__3_i_4_n_0}),
        .O(acc[19:16]),
        .S({i___142_carry__3_i_5_n_0,i___142_carry__3_i_6_n_0,i___142_carry__3_i_7_n_0,i___142_carry__3_i_8_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___142_carry__4 
       (.CI(\ov_dout0_inferred__0/i___142_carry__3_n_0 ),
        .CO({\NLW_ov_dout0_inferred__0/i___142_carry__4_CO_UNCONNECTED [3],\ov_dout0_inferred__0/i___142_carry__4_n_1 ,\ov_dout0_inferred__0/i___142_carry__4_n_2 ,\ov_dout0_inferred__0/i___142_carry__4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,\genblk1[1].tap_inst_n_23 ,\genblk1[0].tap_inst_n_4 ,i___142_carry__4_i_3_n_0}),
        .O(acc[23:20]),
        .S({\genblk1[1].tap_inst_n_25 ,\genblk1[1].tap_inst_n_26 ,\genblk1[0].tap_inst_n_12 ,i___142_carry__4_i_7_n_0}));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry 
       (.CI(1'b0),
        .CO({\ov_dout0_inferred__0/i___70_carry_n_0 ,\ov_dout0_inferred__0/i___70_carry_n_1 ,\ov_dout0_inferred__0/i___70_carry_n_2 ,\ov_dout0_inferred__0/i___70_carry_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[5].tap_inst_n_10 ,\genblk1[5].tap_inst_n_11 ,\genblk1[4].tap_inst_n_23 ,1'b0}),
        .O({\ov_dout0_inferred__0/i___70_carry_n_4 ,\ov_dout0_inferred__0/i___70_carry_n_5 ,\ov_dout0_inferred__0/i___70_carry_n_6 ,\ov_dout0_inferred__0/i___70_carry_n_7 }),
        .S({\genblk1[5].tap_inst_n_12 ,\genblk1[5].tap_inst_n_13 ,\genblk1[4].tap_inst_n_24 ,\genblk1[4].tap_inst_n_25 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry__0 
       (.CI(\ov_dout0_inferred__0/i___70_carry_n_0 ),
        .CO({\ov_dout0_inferred__0/i___70_carry__0_n_0 ,\ov_dout0_inferred__0/i___70_carry__0_n_1 ,\ov_dout0_inferred__0/i___70_carry__0_n_2 ,\ov_dout0_inferred__0/i___70_carry__0_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[5].tap_inst_n_14 ,\genblk1[5].tap_inst_n_15 ,\genblk1[5].tap_inst_n_16 ,\genblk1[5].tap_inst_n_17 }),
        .O({\ov_dout0_inferred__0/i___70_carry__0_n_4 ,\ov_dout0_inferred__0/i___70_carry__0_n_5 ,\ov_dout0_inferred__0/i___70_carry__0_n_6 ,\ov_dout0_inferred__0/i___70_carry__0_n_7 }),
        .S({\genblk1[5].tap_inst_n_18 ,\genblk1[5].tap_inst_n_19 ,\genblk1[5].tap_inst_n_20 ,\genblk1[5].tap_inst_n_21 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry__1 
       (.CI(\ov_dout0_inferred__0/i___70_carry__0_n_0 ),
        .CO({\ov_dout0_inferred__0/i___70_carry__1_n_0 ,\ov_dout0_inferred__0/i___70_carry__1_n_1 ,\ov_dout0_inferred__0/i___70_carry__1_n_2 ,\ov_dout0_inferred__0/i___70_carry__1_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[5].tap_inst_n_22 ,\genblk1[5].tap_inst_n_23 ,\genblk1[5].tap_inst_n_24 ,\genblk1[5].tap_inst_n_25 }),
        .O({\ov_dout0_inferred__0/i___70_carry__1_n_4 ,\ov_dout0_inferred__0/i___70_carry__1_n_5 ,\ov_dout0_inferred__0/i___70_carry__1_n_6 ,\ov_dout0_inferred__0/i___70_carry__1_n_7 }),
        .S({\genblk1[5].tap_inst_n_26 ,\genblk1[5].tap_inst_n_27 ,\genblk1[5].tap_inst_n_28 ,\genblk1[5].tap_inst_n_29 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry__2 
       (.CI(\ov_dout0_inferred__0/i___70_carry__1_n_0 ),
        .CO({\ov_dout0_inferred__0/i___70_carry__2_n_0 ,\ov_dout0_inferred__0/i___70_carry__2_n_1 ,\ov_dout0_inferred__0/i___70_carry__2_n_2 ,\ov_dout0_inferred__0/i___70_carry__2_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[5].tap_inst_n_30 ,\genblk1[5].tap_inst_n_31 ,\genblk1[5].tap_inst_n_32 ,\genblk1[5].tap_inst_n_33 }),
        .O({\ov_dout0_inferred__0/i___70_carry__2_n_4 ,\ov_dout0_inferred__0/i___70_carry__2_n_5 ,\ov_dout0_inferred__0/i___70_carry__2_n_6 ,\ov_dout0_inferred__0/i___70_carry__2_n_7 }),
        .S({\genblk1[5].tap_inst_n_34 ,\genblk1[5].tap_inst_n_35 ,\genblk1[5].tap_inst_n_36 ,\genblk1[5].tap_inst_n_37 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry__3 
       (.CI(\ov_dout0_inferred__0/i___70_carry__2_n_0 ),
        .CO({\ov_dout0_inferred__0/i___70_carry__3_n_0 ,\ov_dout0_inferred__0/i___70_carry__3_n_1 ,\ov_dout0_inferred__0/i___70_carry__3_n_2 ,\ov_dout0_inferred__0/i___70_carry__3_n_3 }),
        .CYINIT(1'b0),
        .DI({\genblk1[5].tap_inst_n_38 ,\genblk1[5].tap_inst_n_39 ,\genblk1[5].tap_inst_n_40 ,\genblk1[5].tap_inst_n_41 }),
        .O({\ov_dout0_inferred__0/i___70_carry__3_n_4 ,\ov_dout0_inferred__0/i___70_carry__3_n_5 ,\ov_dout0_inferred__0/i___70_carry__3_n_6 ,\ov_dout0_inferred__0/i___70_carry__3_n_7 }),
        .S({\genblk1[5].tap_inst_n_42 ,\genblk1[5].tap_inst_n_43 ,\genblk1[5].tap_inst_n_44 ,\genblk1[5].tap_inst_n_45 }));
  (* ADDER_THRESHOLD = "35" *) 
  CARRY4 \ov_dout0_inferred__0/i___70_carry__4 
       (.CI(\ov_dout0_inferred__0/i___70_carry__3_n_0 ),
        .CO({\NLW_ov_dout0_inferred__0/i___70_carry__4_CO_UNCONNECTED [3],\ov_dout0_inferred__0/i___70_carry__4_n_1 ,\ov_dout0_inferred__0/i___70_carry__4_n_2 ,\ov_dout0_inferred__0/i___70_carry__4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,\genblk1[5].tap_inst_n_7 ,\genblk1[5].tap_inst_n_8 ,\genblk1[5].tap_inst_n_9 }),
        .O({\ov_dout0_inferred__0/i___70_carry__4_n_4 ,\ov_dout0_inferred__0/i___70_carry__4_n_5 ,\ov_dout0_inferred__0/i___70_carry__4_n_6 ,\ov_dout0_inferred__0/i___70_carry__4_n_7 }),
        .S({\genblk1[3].tap_inst_n_23 ,\genblk1[5].tap_inst_n_4 ,\genblk1[5].tap_inst_n_5 ,\genblk1[5].tap_inst_n_6 }));
  LUT4 #(
    .INIT(16'h0004)) 
    \ov_dout[23]_i_1 
       (.I0(i_rst_IBUF),
        .I1(state[1]),
        .I2(state[2]),
        .I3(\state[2]_i_2_n_0 ),
        .O(\ov_dout[23]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[0] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[0]),
        .Q(\ov_dout_reg[23]_0 [0]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[10] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[10]),
        .Q(\ov_dout_reg[23]_0 [10]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[11] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[11]),
        .Q(\ov_dout_reg[23]_0 [11]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[12] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[12]),
        .Q(\ov_dout_reg[23]_0 [12]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[13] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[13]),
        .Q(\ov_dout_reg[23]_0 [13]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[14] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[14]),
        .Q(\ov_dout_reg[23]_0 [14]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[15] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[15]),
        .Q(\ov_dout_reg[23]_0 [15]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[16] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[16]),
        .Q(\ov_dout_reg[23]_0 [16]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[17] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[17]),
        .Q(\ov_dout_reg[23]_0 [17]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[18] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[18]),
        .Q(\ov_dout_reg[23]_0 [18]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[19] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[19]),
        .Q(\ov_dout_reg[23]_0 [19]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[1] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[1]),
        .Q(\ov_dout_reg[23]_0 [1]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[20] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[20]),
        .Q(\ov_dout_reg[23]_0 [20]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[21] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[21]),
        .Q(\ov_dout_reg[23]_0 [21]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[22] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[22]),
        .Q(\ov_dout_reg[23]_0 [22]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[23] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[23]),
        .Q(\ov_dout_reg[23]_0 [23]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[2] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[2]),
        .Q(\ov_dout_reg[23]_0 [2]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[3] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[3]),
        .Q(\ov_dout_reg[23]_0 [3]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[4] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[4]),
        .Q(\ov_dout_reg[23]_0 [4]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[5] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[5]),
        .Q(\ov_dout_reg[23]_0 [5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[6] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[6]),
        .Q(\ov_dout_reg[23]_0 [6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[7] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[7]),
        .Q(\ov_dout_reg[23]_0 [7]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[8] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[8]),
        .Q(\ov_dout_reg[23]_0 [8]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \ov_dout_reg[9] 
       (.C(CLK),
        .CE(\ov_dout[23]_i_1_n_0 ),
        .D(acc[9]),
        .Q(\ov_dout_reg[23]_0 [9]),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h35A5)) 
    \sample_addr[0]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .I1(sample_re_addr[0]),
        .I2(state[1]),
        .I3(state[0]),
        .O(\sample_addr[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h09A9F9A9F9A909A9)) 
    \sample_addr[1]_i_1 
       (.I0(sample_wr_addr_reg[1]),
        .I1(sample_wr_addr_reg[0]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(sample_re_addr[1]),
        .I5(sample_re_addr[0]),
        .O(\sample_addr[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFA9AAA900A9AAA9)) 
    \sample_addr[2]_i_1 
       (.I0(sample_wr_addr_reg[2]),
        .I1(sample_wr_addr_reg[1]),
        .I2(sample_wr_addr_reg[0]),
        .I3(state[1]),
        .I4(state[0]),
        .I5(\sample_addr[2]_i_2_n_0 ),
        .O(\sample_addr[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h78)) 
    \sample_addr[2]_i_2 
       (.I0(sample_re_addr[0]),
        .I1(sample_re_addr[1]),
        .I2(sample_re_addr[2]),
        .O(\sample_addr[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFA9AAA900A9AAA9)) 
    \sample_addr[3]_i_1 
       (.I0(sample_wr_addr_reg[3]),
        .I1(sample_wr_addr_reg[2]),
        .I2(\sample_addr[3]_i_2_n_0 ),
        .I3(state[1]),
        .I4(state[0]),
        .I5(\sample_addr[3]_i_3_n_0 ),
        .O(\sample_addr[3]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \sample_addr[3]_i_2 
       (.I0(sample_wr_addr_reg[1]),
        .I1(sample_wr_addr_reg[0]),
        .O(\sample_addr[3]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h6AAA)) 
    \sample_addr[3]_i_3 
       (.I0(sample_re_addr[3]),
        .I1(sample_re_addr[1]),
        .I2(sample_re_addr[0]),
        .I3(sample_re_addr[2]),
        .O(\sample_addr[3]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h32)) 
    \sample_addr[4]_i_1 
       (.I0(state[0]),
        .I1(state[2]),
        .I2(state[1]),
        .O(\sample_addr[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFACA0ACA)) 
    \sample_addr[4]_i_2 
       (.I0(p_0_in__1[4]),
        .I1(sample_wr_addr_reg[4]),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\sample_re_addr[4]_i_3_n_0 ),
        .O(\sample_addr[4]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sample_addr_reg[0] 
       (.C(CLK),
        .CE(\sample_addr[4]_i_1_n_0 ),
        .D(\sample_addr[0]_i_1_n_0 ),
        .Q(\sample_addr_reg_n_0_[0] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_addr_reg[1] 
       (.C(CLK),
        .CE(\sample_addr[4]_i_1_n_0 ),
        .D(\sample_addr[1]_i_1_n_0 ),
        .Q(\sample_addr_reg_n_0_[1] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_addr_reg[2] 
       (.C(CLK),
        .CE(\sample_addr[4]_i_1_n_0 ),
        .D(\sample_addr[2]_i_1_n_0 ),
        .Q(\sample_addr_reg_n_0_[2] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_addr_reg[3] 
       (.C(CLK),
        .CE(\sample_addr[4]_i_1_n_0 ),
        .D(\sample_addr[3]_i_1_n_0 ),
        .Q(\sample_addr_reg_n_0_[3] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_addr_reg[4] 
       (.C(CLK),
        .CE(\sample_addr[4]_i_1_n_0 ),
        .D(\sample_addr[4]_i_2_n_0 ),
        .Q(\sample_addr_reg_n_0_[4] ),
        .R(i_rst_IBUF));
  (* \PinAttr:I1:HOLD_DETOUR  = "409" *) 
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h74)) 
    \sample_re_addr[0]_i_1 
       (.I0(sample_re_addr[0]),
        .I1(state[0]),
        .I2(sample_wr_addr_reg[0]),
        .O(p_1_in[0]));
  (* \PinAttr:I2:HOLD_DETOUR  = "409" *) 
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT4 #(
    .INIT(16'h6F60)) 
    \sample_re_addr[1]_i_1 
       (.I0(sample_re_addr[1]),
        .I1(sample_re_addr[0]),
        .I2(state[0]),
        .I3(sample_wr_addr_reg[1]),
        .O(p_1_in[1]));
  LUT5 #(
    .INIT(32'h78FF7800)) 
    \sample_re_addr[2]_i_1 
       (.I0(sample_re_addr[0]),
        .I1(sample_re_addr[1]),
        .I2(sample_re_addr[2]),
        .I3(state[0]),
        .I4(sample_wr_addr_reg[2]),
        .O(p_1_in[2]));
  (* \PinAttr:I0:HOLD_DETOUR  = "378" *) 
  LUT6 #(
    .INIT(64'h6AAAFFFF6AAA0000)) 
    \sample_re_addr[3]_i_1 
       (.I0(sample_re_addr[3]),
        .I1(sample_re_addr[1]),
        .I2(sample_re_addr[0]),
        .I3(sample_re_addr[2]),
        .I4(state[0]),
        .I5(sample_wr_addr_reg[3]),
        .O(p_1_in[3]));
  LUT2 #(
    .INIT(4'h2)) 
    \sample_re_addr[4]_i_1 
       (.I0(state[1]),
        .I1(state[2]),
        .O(\sample_re_addr[4]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \sample_re_addr[4]_i_2 
       (.I0(\sample_re_addr[4]_i_3_n_0 ),
        .I1(state[0]),
        .I2(sample_wr_addr_reg[4]),
        .O(p_1_in[4]));
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \sample_re_addr[4]_i_3 
       (.I0(sample_re_addr[2]),
        .I1(sample_re_addr[0]),
        .I2(sample_re_addr[1]),
        .I3(sample_re_addr[3]),
        .I4(sample_re_addr[4]),
        .O(\sample_re_addr[4]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \sample_re_addr_reg[0] 
       (.C(CLK),
        .CE(\sample_re_addr[4]_i_1_n_0 ),
        .D(p_1_in[0]),
        .Q(sample_re_addr[0]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_re_addr_reg[1] 
       (.C(CLK),
        .CE(\sample_re_addr[4]_i_1_n_0 ),
        .D(p_1_in[1]),
        .Q(sample_re_addr[1]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_re_addr_reg[2] 
       (.C(CLK),
        .CE(\sample_re_addr[4]_i_1_n_0 ),
        .D(p_1_in[2]),
        .Q(sample_re_addr[2]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_re_addr_reg[3] 
       (.C(CLK),
        .CE(\sample_re_addr[4]_i_1_n_0 ),
        .D(p_1_in[3]),
        .Q(sample_re_addr[3]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_re_addr_reg[4] 
       (.C(CLK),
        .CE(\sample_re_addr[4]_i_1_n_0 ),
        .D(p_1_in[4]),
        .Q(sample_re_addr[4]),
        .R(i_rst_IBUF));
  LUT1 #(
    .INIT(2'h1)) 
    \sample_wr_addr[0]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .O(p_0_in__1[0]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \sample_wr_addr[1]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .I1(sample_wr_addr_reg[1]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT3 #(
    .INIT(8'hE1)) 
    \sample_wr_addr[2]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .I1(sample_wr_addr_reg[1]),
        .I2(sample_wr_addr_reg[2]),
        .O(p_0_in__1[2]));
  LUT4 #(
    .INIT(16'hFE01)) 
    \sample_wr_addr[3]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .I1(sample_wr_addr_reg[1]),
        .I2(sample_wr_addr_reg[2]),
        .I3(sample_wr_addr_reg[3]),
        .O(p_0_in__1[3]));
  LUT5 #(
    .INIT(32'hFFFE0001)) 
    \sample_wr_addr[4]_i_1 
       (.I0(sample_wr_addr_reg[0]),
        .I1(sample_wr_addr_reg[1]),
        .I2(sample_wr_addr_reg[2]),
        .I3(sample_wr_addr_reg[3]),
        .I4(sample_wr_addr_reg[4]),
        .O(p_0_in__1[4]));
  FDRE #(
    .INIT(1'b0)) 
    \sample_wr_addr_reg[0] 
       (.C(CLK),
        .CE(o_ready_i_1__0_n_0),
        .D(p_0_in__1[0]),
        .Q(sample_wr_addr_reg[0]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_wr_addr_reg[1] 
       (.C(CLK),
        .CE(o_ready_i_1__0_n_0),
        .D(p_0_in__1[1]),
        .Q(sample_wr_addr_reg[1]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_wr_addr_reg[2] 
       (.C(CLK),
        .CE(o_ready_i_1__0_n_0),
        .D(p_0_in__1[2]),
        .Q(sample_wr_addr_reg[2]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_wr_addr_reg[3] 
       (.C(CLK),
        .CE(o_ready_i_1__0_n_0),
        .D(p_0_in__1[3]),
        .Q(sample_wr_addr_reg[3]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \sample_wr_addr_reg[4] 
       (.C(CLK),
        .CE(o_ready_i_1__0_n_0),
        .D(p_0_in__1[4]),
        .Q(sample_wr_addr_reg[4]),
        .R(i_rst_IBUF));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT5 #(
    .INIT(32'h0000F222)) 
    \state[0]_i_1 
       (.I0(des_out_valid),
        .I1(state[0]),
        .I2(\state[2]_i_2_n_0 ),
        .I3(state[1]),
        .I4(state[2]),
        .O(next_state[0]));
  LUT6 #(
    .INIT(64'h000000007FFFFF00)) 
    \state[1]_i_1 
       (.I0(weight_re_addr_reg[3]),
        .I1(\state[1]_i_2_n_0 ),
        .I2(weight_re_addr_reg[4]),
        .I3(state[0]),
        .I4(state[1]),
        .I5(state[2]),
        .O(next_state[1]));
  LUT3 #(
    .INIT(8'h80)) 
    \state[1]_i_2 
       (.I0(weight_re_addr_reg[2]),
        .I1(weight_re_addr_reg[1]),
        .I2(weight_re_addr_reg[0]),
        .O(\state[1]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00110F00)) 
    \state[2]_i_1 
       (.I0(ser_ready),
        .I1(state[0]),
        .I2(\state[2]_i_2_n_0 ),
        .I3(state[1]),
        .I4(state[2]),
        .O(next_state[2]));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \state[2]_i_2 
       (.I0(state[0]),
        .I1(weight_re_addr_reg[3]),
        .I2(weight_re_addr_reg[0]),
        .I3(weight_re_addr_reg[1]),
        .I4(weight_re_addr_reg[2]),
        .I5(weight_re_addr_reg[4]),
        .O(\state[2]_i_2_n_0 ));
  (* FSM_ENCODED_STATES = "INIT_READ:0010,WRITE_DIN_SAMPLE:0001,PROCESS_SAMPLE:0011,WAIT_DOUT_READY:0100,WAIT_DIN_VALID:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(CLK),
        .CE(1'b1),
        .D(next_state[0]),
        .Q(state[0]),
        .R(i_rst_IBUF));
  (* FSM_ENCODED_STATES = "INIT_READ:0010,WRITE_DIN_SAMPLE:0001,PROCESS_SAMPLE:0011,WAIT_DOUT_READY:0100,WAIT_DIN_VALID:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(CLK),
        .CE(1'b1),
        .D(next_state[1]),
        .Q(state[1]),
        .R(i_rst_IBUF));
  (* FSM_ENCODED_STATES = "INIT_READ:0010,WRITE_DIN_SAMPLE:0001,PROCESS_SAMPLE:0011,WAIT_DOUT_READY:0100,WAIT_DIN_VALID:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[2] 
       (.C(CLK),
        .CE(1'b1),
        .D(next_state[2]),
        .Q(state[2]),
        .R(i_rst_IBUF));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h01)) 
    sum_rst_i_1
       (.I0(state[2]),
        .I1(state[1]),
        .I2(state[0]),
        .O(sum_rst_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    sum_rst_reg
       (.C(CLK),
        .CE(1'b1),
        .D(sum_rst_i_1_n_0),
        .Q(sum_rst),
        .R(i_rst_IBUF));
  LUT3 #(
    .INIT(8'h08)) 
    tap_en_i_1
       (.I0(state[0]),
        .I1(state[1]),
        .I2(state[2]),
        .O(tap_en_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tap_en_reg
       (.C(CLK),
        .CE(1'b1),
        .D(tap_en_i_1_n_0),
        .Q(tap_en),
        .R(i_rst_IBUF));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \weight_re_addr[0]_i_1 
       (.I0(weight_re_addr_reg[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \weight_re_addr[1]_i_1 
       (.I0(weight_re_addr_reg[0]),
        .I1(weight_re_addr_reg[1]),
        .O(p_0_in__0[1]));
  LUT3 #(
    .INIT(8'h6A)) 
    \weight_re_addr[2]_i_1 
       (.I0(weight_re_addr_reg[2]),
        .I1(weight_re_addr_reg[1]),
        .I2(weight_re_addr_reg[0]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \weight_re_addr[3]_i_1 
       (.I0(weight_re_addr_reg[3]),
        .I1(weight_re_addr_reg[0]),
        .I2(weight_re_addr_reg[1]),
        .I3(weight_re_addr_reg[2]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \weight_re_addr[4]_i_1 
       (.I0(weight_re_addr_reg[2]),
        .I1(weight_re_addr_reg[1]),
        .I2(weight_re_addr_reg[0]),
        .I3(weight_re_addr_reg[3]),
        .I4(weight_re_addr_reg[4]),
        .O(p_0_in__0[4]));
  FDRE #(
    .INIT(1'b0)) 
    \weight_re_addr_reg[0] 
       (.C(CLK),
        .CE(tap_en_i_1_n_0),
        .D(p_0_in__0[0]),
        .Q(weight_re_addr_reg[0]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \weight_re_addr_reg[1] 
       (.C(CLK),
        .CE(tap_en_i_1_n_0),
        .D(p_0_in__0[1]),
        .Q(weight_re_addr_reg[1]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \weight_re_addr_reg[2] 
       (.C(CLK),
        .CE(tap_en_i_1_n_0),
        .D(p_0_in__0[2]),
        .Q(weight_re_addr_reg[2]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \weight_re_addr_reg[3] 
       (.C(CLK),
        .CE(tap_en_i_1_n_0),
        .D(p_0_in__0[3]),
        .Q(weight_re_addr_reg[3]),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \weight_re_addr_reg[4] 
       (.C(CLK),
        .CE(tap_en_i_1_n_0),
        .D(p_0_in__0[4]),
        .Q(weight_re_addr_reg[4]),
        .R(i_rst_IBUF));
  LUT6 #(
    .INIT(64'h0444444444444444)) 
    weight_re_i_1
       (.I0(state[2]),
        .I1(state[1]),
        .I2(weight_re_addr_reg[4]),
        .I3(\state[1]_i_2_n_0 ),
        .I4(weight_re_addr_reg[3]),
        .I5(state[0]),
        .O(weight_re_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    weight_re_reg
       (.C(CLK),
        .CE(1'b1),
        .D(weight_re_i_1_n_0),
        .Q(weight_re_reg_n_0),
        .R(i_rst_IBUF));
endmodule

module serializer_fsm
   (ser_ready,
    o_dout_valid_OBUF,
    Q,
    i_rst_IBUF,
    i_en_IBUF,
    CLK,
    i_ready_IBUF,
    \shift_reg_reg[23]_0 ,
    fir_out_valid);
  output ser_ready;
  output o_dout_valid_OBUF;
  output [0:0]Q;
  input i_rst_IBUF;
  input i_en_IBUF;
  input CLK;
  input i_ready_IBUF;
  input [23:0]\shift_reg_reg[23]_0 ;
  input fir_out_valid;

  wire CLK;
  wire [0:0]Q;
  wire [4:0]counter;
  wire \counter[3]_i_2_n_0 ;
  wire \counter[4]_i_2__0_n_0 ;
  wire \counter_reg_n_0_[0] ;
  wire \counter_reg_n_0_[1] ;
  wire \counter_reg_n_0_[2] ;
  wire \counter_reg_n_0_[3] ;
  wire \counter_reg_n_0_[4] ;
  wire fir_out_valid;
  wire i_en_IBUF;
  wire i_ready_IBUF;
  wire i_rst_IBUF;
  wire [1:0]next_state;
  wire o_dout_valid_OBUF;
  wire o_dout_valid_i_1__0_n_0;
  wire o_ready_i_1__1_n_0;
  wire ser_ready;
  wire \shift_reg[0]_i_1__0_n_0 ;
  wire \shift_reg[10]_i_1__0_n_0 ;
  wire \shift_reg[11]_i_1__0_n_0 ;
  wire \shift_reg[12]_i_1__0_n_0 ;
  wire \shift_reg[13]_i_1__0_n_0 ;
  wire \shift_reg[14]_i_1__0_n_0 ;
  wire \shift_reg[15]_i_1__0_n_0 ;
  wire \shift_reg[16]_i_1__0_n_0 ;
  wire \shift_reg[17]_i_1__0_n_0 ;
  wire \shift_reg[18]_i_1__0_n_0 ;
  wire \shift_reg[19]_i_1__0_n_0 ;
  wire \shift_reg[1]_i_1__0_n_0 ;
  wire \shift_reg[20]_i_1__0_n_0 ;
  wire \shift_reg[21]_i_1__0_n_0 ;
  wire \shift_reg[22]_i_1__0_n_0 ;
  wire \shift_reg[23]_i_1_n_0 ;
  wire \shift_reg[23]_i_2_n_0 ;
  wire \shift_reg[2]_i_1__0_n_0 ;
  wire \shift_reg[3]_i_1__0_n_0 ;
  wire \shift_reg[4]_i_1__0_n_0 ;
  wire \shift_reg[5]_i_1__0_n_0 ;
  wire \shift_reg[6]_i_1__0_n_0 ;
  wire \shift_reg[7]_i_1__0_n_0 ;
  wire \shift_reg[8]_i_1__0_n_0 ;
  wire \shift_reg[9]_i_1__0_n_0 ;
  wire [23:0]\shift_reg_reg[23]_0 ;
  wire \shift_reg_reg_n_0_[10] ;
  wire \shift_reg_reg_n_0_[11] ;
  wire \shift_reg_reg_n_0_[12] ;
  wire \shift_reg_reg_n_0_[13] ;
  wire \shift_reg_reg_n_0_[14] ;
  wire \shift_reg_reg_n_0_[15] ;
  wire \shift_reg_reg_n_0_[16] ;
  wire \shift_reg_reg_n_0_[17] ;
  wire \shift_reg_reg_n_0_[18] ;
  wire \shift_reg_reg_n_0_[19] ;
  wire \shift_reg_reg_n_0_[1] ;
  wire \shift_reg_reg_n_0_[20] ;
  wire \shift_reg_reg_n_0_[21] ;
  wire \shift_reg_reg_n_0_[22] ;
  wire \shift_reg_reg_n_0_[23] ;
  wire \shift_reg_reg_n_0_[2] ;
  wire \shift_reg_reg_n_0_[3] ;
  wire \shift_reg_reg_n_0_[4] ;
  wire \shift_reg_reg_n_0_[5] ;
  wire \shift_reg_reg_n_0_[6] ;
  wire \shift_reg_reg_n_0_[7] ;
  wire \shift_reg_reg_n_0_[8] ;
  wire \shift_reg_reg_n_0_[9] ;
  wire [1:0]state;
  wire \state[1]_i_2__1_n_0 ;
  wire \state[1]_i_3_n_0 ;

  LUT6 #(
    .INIT(64'h0000000000808080)) 
    \counter[0]_i_1__0 
       (.I0(state[0]),
        .I1(state[1]),
        .I2(i_ready_IBUF),
        .I3(\counter_reg_n_0_[4] ),
        .I4(\counter_reg_n_0_[3] ),
        .I5(\counter_reg_n_0_[0] ),
        .O(counter[0]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h28)) 
    \counter[1]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .O(counter[1]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h2A80)) 
    \counter[2]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\counter_reg_n_0_[1] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[2] ),
        .O(counter[2]));
  LUT6 #(
    .INIT(64'h7F80000000000000)) 
    \counter[3]_i_1__0 
       (.I0(\counter_reg_n_0_[1] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[2] ),
        .I3(\counter_reg_n_0_[3] ),
        .I4(state[0]),
        .I5(\counter[3]_i_2_n_0 ),
        .O(counter[3]));
  LUT4 #(
    .INIT(16'h0888)) 
    \counter[3]_i_2 
       (.I0(state[1]),
        .I1(i_ready_IBUF),
        .I2(\counter_reg_n_0_[4] ),
        .I3(\counter_reg_n_0_[3] ),
        .O(\counter[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF800000000000)) 
    \counter[4]_i_1__0 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[2] ),
        .I2(\counter_reg_n_0_[0] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\counter_reg_n_0_[4] ),
        .I5(\counter[4]_i_2__0_n_0 ),
        .O(counter[4]));
  LUT5 #(
    .INIT(32'h70000000)) 
    \counter[4]_i_2__0 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[4] ),
        .I2(i_ready_IBUF),
        .I3(state[1]),
        .I4(state[0]),
        .O(\counter[4]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[0] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[0]),
        .Q(\counter_reg_n_0_[0] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[1] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[1]),
        .Q(\counter_reg_n_0_[1] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[2] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[2]),
        .Q(\counter_reg_n_0_[2] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[3] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[3]),
        .Q(\counter_reg_n_0_[3] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \counter_reg[4] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(counter[4]),
        .Q(\counter_reg_n_0_[4] ),
        .R(i_rst_IBUF));
  LUT5 #(
    .INIT(32'h7000FF00)) 
    o_dout_valid_i_1__0
       (.I0(\counter_reg_n_0_[3] ),
        .I1(\counter_reg_n_0_[4] ),
        .I2(i_ready_IBUF),
        .I3(state[1]),
        .I4(state[0]),
        .O(o_dout_valid_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_dout_valid_reg
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(o_dout_valid_i_1__0_n_0),
        .Q(o_dout_valid_OBUF),
        .R(i_rst_IBUF));
  LUT2 #(
    .INIT(4'h2)) 
    o_ready_i_1__1
       (.I0(state[0]),
        .I1(state[1]),
        .O(o_ready_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    o_ready_reg
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(o_ready_i_1__1_n_0),
        .Q(ser_ready),
        .R(i_rst_IBUF));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[0]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[1] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [0]),
        .O(\shift_reg[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[10]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[11] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [10]),
        .O(\shift_reg[10]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[11]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[12] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [11]),
        .O(\shift_reg[11]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[12]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[13] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [12]),
        .O(\shift_reg[12]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[13]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[14] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [13]),
        .O(\shift_reg[13]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[14]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[15] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [14]),
        .O(\shift_reg[14]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[15]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[16] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [15]),
        .O(\shift_reg[15]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[16]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[17] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [16]),
        .O(\shift_reg[16]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[17]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[18] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [17]),
        .O(\shift_reg[17]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[18]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[19] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [18]),
        .O(\shift_reg[18]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[19]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[20] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [19]),
        .O(\shift_reg[19]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[1]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[2] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [1]),
        .O(\shift_reg[1]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[20]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[21] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [20]),
        .O(\shift_reg[20]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[21]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[22] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [21]),
        .O(\shift_reg[21]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[22]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[23] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [22]),
        .O(\shift_reg[22]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hD0)) 
    \shift_reg[23]_i_1 
       (.I0(state[1]),
        .I1(state[0]),
        .I2(i_en_IBUF),
        .O(\shift_reg[23]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h08)) 
    \shift_reg[23]_i_2 
       (.I0(\shift_reg_reg[23]_0 [23]),
        .I1(state[0]),
        .I2(state[1]),
        .O(\shift_reg[23]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[2]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[3] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [2]),
        .O(\shift_reg[2]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[3]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[4] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [3]),
        .O(\shift_reg[3]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[4]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[5] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [4]),
        .O(\shift_reg[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[5]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[6] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [5]),
        .O(\shift_reg[5]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[6]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[7] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [6]),
        .O(\shift_reg[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[7]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[8] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [7]),
        .O(\shift_reg[7]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[8]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[9] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [8]),
        .O(\shift_reg[8]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h8F888888)) 
    \shift_reg[9]_i_1__0 
       (.I0(\counter[4]_i_2__0_n_0 ),
        .I1(\shift_reg_reg_n_0_[10] ),
        .I2(state[1]),
        .I3(state[0]),
        .I4(\shift_reg_reg[23]_0 [9]),
        .O(\shift_reg[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[0] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[0]_i_1__0_n_0 ),
        .Q(Q),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[10] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[10]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[10] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[11] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[11]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[11] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[12] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[12]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[12] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[13] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[13]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[13] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[14] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[14]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[14] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[15] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[15]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[15] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[16] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[16]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[16] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[17] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[17]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[17] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[18] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[18]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[18] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[19] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[19]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[19] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[1] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[1]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[1] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[20] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[20]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[20] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[21] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[21]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[21] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[22] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[22]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[22] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[23] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[23]_i_2_n_0 ),
        .Q(\shift_reg_reg_n_0_[23] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[2] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[2]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[2] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[3] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[3]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[3] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[4] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[4]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[4] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[5] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[5]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[5] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[6] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[6]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[6] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[7] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[7]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[7] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[8] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[8]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[8] ),
        .R(i_rst_IBUF));
  FDRE #(
    .INIT(1'b0)) 
    \shift_reg_reg[9] 
       (.C(CLK),
        .CE(\shift_reg[23]_i_1_n_0 ),
        .D(\shift_reg[9]_i_1__0_n_0 ),
        .Q(\shift_reg_reg_n_0_[9] ),
        .R(i_rst_IBUF));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \state[0]_i_1__1 
       (.I0(\state[1]_i_2__1_n_0 ),
        .I1(state[0]),
        .I2(fir_out_valid),
        .O(next_state[0]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT3 #(
    .INIT(8'hAE)) 
    \state[1]_i_1__1 
       (.I0(\state[1]_i_2__1_n_0 ),
        .I1(state[0]),
        .I2(state[1]),
        .O(next_state[1]));
  LUT6 #(
    .INIT(64'hFFFFFFEF00000000)) 
    \state[1]_i_2__1 
       (.I0(\counter_reg_n_0_[2] ),
        .I1(\counter_reg_n_0_[0] ),
        .I2(\counter_reg_n_0_[4] ),
        .I3(\counter_reg_n_0_[1] ),
        .I4(\state[1]_i_3_n_0 ),
        .I5(state[1]),
        .O(\state[1]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \state[1]_i_3 
       (.I0(\counter_reg_n_0_[3] ),
        .I1(state[0]),
        .O(\state[1]_i_3_n_0 ));
  (* FSM_ENCODED_STATES = "S2:0010,S1:0001,S3:0011,S0:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[0] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(next_state[0]),
        .Q(state[0]),
        .R(i_rst_IBUF));
  (* FSM_ENCODED_STATES = "S2:0010,S1:0001,S3:0011,S0:0000" *) 
  FDRE #(
    .INIT(1'b0)) 
    \state_reg[1] 
       (.C(CLK),
        .CE(i_en_IBUF),
        .D(next_state[1]),
        .Q(state[1]),
        .R(i_rst_IBUF));
endmodule

module tap_transposed
   (\ov_sum_reg[23]_0 ,
    DI,
    \ov_sum_reg[23]_1 ,
    S,
    \ov_sum_reg[21]_0 ,
    \ov_sum_reg[21]_1 ,
    \ov_sum_reg[2]_0 ,
    \ov_sum_reg[3]_0 ,
    \ov_sum_reg[6]_0 ,
    \ov_sum_reg[7]_0 ,
    \ov_sum_reg[10]_0 ,
    \ov_sum_reg[11]_0 ,
    \ov_sum_reg[14]_0 ,
    \ov_sum_reg[15]_0 ,
    \ov_sum_reg[18]_0 ,
    \ov_sum_reg[19]_0 ,
    douta,
    ov_sum1_0,
    \ov_sum_reg[0]_0 ,
    tap_en,
    CLK,
    O,
    i___142_carry__4_i_4,
    ov_sum_reg,
    ov_sum_reg_0,
    \ov_dout_reg[23] ,
    ov_sum_reg_1,
    ov_sum_reg_2,
    \ov_dout_reg[23]_0 );
  output [3:0]\ov_sum_reg[23]_0 ;
  output [0:0]DI;
  output \ov_sum_reg[23]_1 ;
  output [2:0]S;
  output [2:0]\ov_sum_reg[21]_0 ;
  output [0:0]\ov_sum_reg[21]_1 ;
  output [1:0]\ov_sum_reg[2]_0 ;
  output [1:0]\ov_sum_reg[3]_0 ;
  output [3:0]\ov_sum_reg[6]_0 ;
  output [3:0]\ov_sum_reg[7]_0 ;
  output [3:0]\ov_sum_reg[10]_0 ;
  output [3:0]\ov_sum_reg[11]_0 ;
  output [3:0]\ov_sum_reg[14]_0 ;
  output [3:0]\ov_sum_reg[15]_0 ;
  output [3:0]\ov_sum_reg[18]_0 ;
  output [3:0]\ov_sum_reg[19]_0 ;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[0]_0 ;
  input tap_en;
  input CLK;
  input [2:0]O;
  input [2:0]i___142_carry__4_i_4;
  input [2:0]ov_sum_reg;
  input [2:0]ov_sum_reg_0;
  input \ov_dout_reg[23] ;
  input [21:0]ov_sum_reg_1;
  input [21:0]ov_sum_reg_2;
  input \ov_dout_reg[23]_0 ;

  wire CLK;
  wire [0:0]DI;
  wire [2:0]O;
  wire [2:0]S;
  wire [23:0]douta;
  wire [2:0]i___142_carry__4_i_4;
  wire \ov_dout_reg[23] ;
  wire \ov_dout_reg[23]_0 ;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__5_n_0 ;
  wire \ov_sum[0]_i_3__6_n_0 ;
  wire \ov_sum[0]_i_4__6_n_0 ;
  wire \ov_sum[0]_i_5__6_n_0 ;
  wire \ov_sum[12]_i_2__6_n_0 ;
  wire \ov_sum[12]_i_3__6_n_0 ;
  wire \ov_sum[12]_i_4__6_n_0 ;
  wire \ov_sum[12]_i_5__6_n_0 ;
  wire \ov_sum[16]_i_2__6_n_0 ;
  wire \ov_sum[16]_i_3__6_n_0 ;
  wire \ov_sum[16]_i_4__6_n_0 ;
  wire \ov_sum[16]_i_5__6_n_0 ;
  wire \ov_sum[20]_i_2__6_n_0 ;
  wire \ov_sum[20]_i_3__6_n_0 ;
  wire \ov_sum[20]_i_4__6_n_0 ;
  wire \ov_sum[20]_i_5__6_n_0 ;
  wire \ov_sum[4]_i_2__6_n_0 ;
  wire \ov_sum[4]_i_3__6_n_0 ;
  wire \ov_sum[4]_i_4__6_n_0 ;
  wire \ov_sum[4]_i_5__6_n_0 ;
  wire \ov_sum[8]_i_2__6_n_0 ;
  wire \ov_sum[8]_i_3__6_n_0 ;
  wire \ov_sum[8]_i_4__6_n_0 ;
  wire \ov_sum[8]_i_5__6_n_0 ;
  wire [2:0]ov_sum_reg;
  wire \ov_sum_reg[0]_0 ;
  wire \ov_sum_reg[0]_i_1__5_n_0 ;
  wire \ov_sum_reg[0]_i_1__5_n_1 ;
  wire \ov_sum_reg[0]_i_1__5_n_2 ;
  wire \ov_sum_reg[0]_i_1__5_n_3 ;
  wire \ov_sum_reg[0]_i_1__5_n_4 ;
  wire \ov_sum_reg[0]_i_1__5_n_5 ;
  wire \ov_sum_reg[0]_i_1__5_n_6 ;
  wire \ov_sum_reg[0]_i_1__5_n_7 ;
  wire [3:0]\ov_sum_reg[10]_0 ;
  wire [3:0]\ov_sum_reg[11]_0 ;
  wire \ov_sum_reg[12]_i_1__6_n_0 ;
  wire \ov_sum_reg[12]_i_1__6_n_1 ;
  wire \ov_sum_reg[12]_i_1__6_n_2 ;
  wire \ov_sum_reg[12]_i_1__6_n_3 ;
  wire \ov_sum_reg[12]_i_1__6_n_4 ;
  wire \ov_sum_reg[12]_i_1__6_n_5 ;
  wire \ov_sum_reg[12]_i_1__6_n_6 ;
  wire \ov_sum_reg[12]_i_1__6_n_7 ;
  wire [3:0]\ov_sum_reg[14]_0 ;
  wire [3:0]\ov_sum_reg[15]_0 ;
  wire \ov_sum_reg[16]_i_1__6_n_0 ;
  wire \ov_sum_reg[16]_i_1__6_n_1 ;
  wire \ov_sum_reg[16]_i_1__6_n_2 ;
  wire \ov_sum_reg[16]_i_1__6_n_3 ;
  wire \ov_sum_reg[16]_i_1__6_n_4 ;
  wire \ov_sum_reg[16]_i_1__6_n_5 ;
  wire \ov_sum_reg[16]_i_1__6_n_6 ;
  wire \ov_sum_reg[16]_i_1__6_n_7 ;
  wire [3:0]\ov_sum_reg[18]_0 ;
  wire [3:0]\ov_sum_reg[19]_0 ;
  wire \ov_sum_reg[20]_i_1__6_n_1 ;
  wire \ov_sum_reg[20]_i_1__6_n_2 ;
  wire \ov_sum_reg[20]_i_1__6_n_3 ;
  wire \ov_sum_reg[20]_i_1__6_n_4 ;
  wire \ov_sum_reg[20]_i_1__6_n_5 ;
  wire \ov_sum_reg[20]_i_1__6_n_6 ;
  wire \ov_sum_reg[20]_i_1__6_n_7 ;
  wire [2:0]\ov_sum_reg[21]_0 ;
  wire [0:0]\ov_sum_reg[21]_1 ;
  wire [3:0]\ov_sum_reg[23]_0 ;
  wire \ov_sum_reg[23]_1 ;
  wire [1:0]\ov_sum_reg[2]_0 ;
  wire [1:0]\ov_sum_reg[3]_0 ;
  wire \ov_sum_reg[4]_i_1__6_n_0 ;
  wire \ov_sum_reg[4]_i_1__6_n_1 ;
  wire \ov_sum_reg[4]_i_1__6_n_2 ;
  wire \ov_sum_reg[4]_i_1__6_n_3 ;
  wire \ov_sum_reg[4]_i_1__6_n_4 ;
  wire \ov_sum_reg[4]_i_1__6_n_5 ;
  wire \ov_sum_reg[4]_i_1__6_n_6 ;
  wire \ov_sum_reg[4]_i_1__6_n_7 ;
  wire [3:0]\ov_sum_reg[6]_0 ;
  wire [3:0]\ov_sum_reg[7]_0 ;
  wire \ov_sum_reg[8]_i_1__6_n_0 ;
  wire \ov_sum_reg[8]_i_1__6_n_1 ;
  wire \ov_sum_reg[8]_i_1__6_n_2 ;
  wire \ov_sum_reg[8]_i_1__6_n_3 ;
  wire \ov_sum_reg[8]_i_1__6_n_4 ;
  wire \ov_sum_reg[8]_i_1__6_n_5 ;
  wire \ov_sum_reg[8]_i_1__6_n_6 ;
  wire \ov_sum_reg[8]_i_1__6_n_7 ;
  wire [2:0]ov_sum_reg_0;
  wire [21:0]ov_sum_reg_1;
  wire [21:0]ov_sum_reg_2;
  wire [21:2]ov_sum_reg_3;
  wire [23:0]p_0_in;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__6_CO_UNCONNECTED ;

  (* HLUTNM = "lutpair4" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__0_i_1
       (.I0(ov_sum_reg_3[6]),
        .I1(ov_sum_reg_2[5]),
        .I2(ov_sum_reg_1[5]),
        .O(\ov_sum_reg[6]_0 [3]));
  (* HLUTNM = "lutpair3" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__0_i_2
       (.I0(ov_sum_reg_3[5]),
        .I1(ov_sum_reg_2[4]),
        .I2(ov_sum_reg_1[4]),
        .O(\ov_sum_reg[6]_0 [2]));
  (* HLUTNM = "lutpair2" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__0_i_3
       (.I0(ov_sum_reg_3[4]),
        .I1(ov_sum_reg_2[3]),
        .I2(ov_sum_reg_1[3]),
        .O(\ov_sum_reg[6]_0 [1]));
  (* HLUTNM = "lutpair1" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__0_i_4
       (.I0(ov_sum_reg_3[3]),
        .I1(ov_sum_reg_2[2]),
        .I2(ov_sum_reg_1[2]),
        .O(\ov_sum_reg[6]_0 [0]));
  (* HLUTNM = "lutpair5" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__0_i_5
       (.I0(ov_sum_reg_3[7]),
        .I1(ov_sum_reg_2[6]),
        .I2(ov_sum_reg_1[6]),
        .I3(\ov_sum_reg[6]_0 [3]),
        .O(\ov_sum_reg[7]_0 [3]));
  (* HLUTNM = "lutpair4" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__0_i_6
       (.I0(ov_sum_reg_3[6]),
        .I1(ov_sum_reg_2[5]),
        .I2(ov_sum_reg_1[5]),
        .I3(\ov_sum_reg[6]_0 [2]),
        .O(\ov_sum_reg[7]_0 [2]));
  (* HLUTNM = "lutpair3" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__0_i_7
       (.I0(ov_sum_reg_3[5]),
        .I1(ov_sum_reg_2[4]),
        .I2(ov_sum_reg_1[4]),
        .I3(\ov_sum_reg[6]_0 [1]),
        .O(\ov_sum_reg[7]_0 [1]));
  (* HLUTNM = "lutpair2" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__0_i_8
       (.I0(ov_sum_reg_3[4]),
        .I1(ov_sum_reg_2[3]),
        .I2(ov_sum_reg_1[3]),
        .I3(\ov_sum_reg[6]_0 [0]),
        .O(\ov_sum_reg[7]_0 [0]));
  (* HLUTNM = "lutpair8" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__1_i_1
       (.I0(ov_sum_reg_3[10]),
        .I1(ov_sum_reg_2[9]),
        .I2(ov_sum_reg_1[9]),
        .O(\ov_sum_reg[10]_0 [3]));
  (* HLUTNM = "lutpair7" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__1_i_2
       (.I0(ov_sum_reg_3[9]),
        .I1(ov_sum_reg_2[8]),
        .I2(ov_sum_reg_1[8]),
        .O(\ov_sum_reg[10]_0 [2]));
  (* HLUTNM = "lutpair6" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__1_i_3
       (.I0(ov_sum_reg_3[8]),
        .I1(ov_sum_reg_2[7]),
        .I2(ov_sum_reg_1[7]),
        .O(\ov_sum_reg[10]_0 [1]));
  (* HLUTNM = "lutpair5" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__1_i_4
       (.I0(ov_sum_reg_3[7]),
        .I1(ov_sum_reg_2[6]),
        .I2(ov_sum_reg_1[6]),
        .O(\ov_sum_reg[10]_0 [0]));
  (* HLUTNM = "lutpair9" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__1_i_5
       (.I0(ov_sum_reg_3[11]),
        .I1(ov_sum_reg_2[10]),
        .I2(ov_sum_reg_1[10]),
        .I3(\ov_sum_reg[10]_0 [3]),
        .O(\ov_sum_reg[11]_0 [3]));
  (* HLUTNM = "lutpair8" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__1_i_6
       (.I0(ov_sum_reg_3[10]),
        .I1(ov_sum_reg_2[9]),
        .I2(ov_sum_reg_1[9]),
        .I3(\ov_sum_reg[10]_0 [2]),
        .O(\ov_sum_reg[11]_0 [2]));
  (* HLUTNM = "lutpair7" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__1_i_7
       (.I0(ov_sum_reg_3[9]),
        .I1(ov_sum_reg_2[8]),
        .I2(ov_sum_reg_1[8]),
        .I3(\ov_sum_reg[10]_0 [1]),
        .O(\ov_sum_reg[11]_0 [1]));
  (* HLUTNM = "lutpair6" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__1_i_8
       (.I0(ov_sum_reg_3[8]),
        .I1(ov_sum_reg_2[7]),
        .I2(ov_sum_reg_1[7]),
        .I3(\ov_sum_reg[10]_0 [0]),
        .O(\ov_sum_reg[11]_0 [0]));
  (* HLUTNM = "lutpair12" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__2_i_1
       (.I0(ov_sum_reg_3[14]),
        .I1(ov_sum_reg_2[13]),
        .I2(ov_sum_reg_1[13]),
        .O(\ov_sum_reg[14]_0 [3]));
  (* HLUTNM = "lutpair11" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__2_i_2
       (.I0(ov_sum_reg_3[13]),
        .I1(ov_sum_reg_2[12]),
        .I2(ov_sum_reg_1[12]),
        .O(\ov_sum_reg[14]_0 [2]));
  (* HLUTNM = "lutpair10" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__2_i_3
       (.I0(ov_sum_reg_3[12]),
        .I1(ov_sum_reg_2[11]),
        .I2(ov_sum_reg_1[11]),
        .O(\ov_sum_reg[14]_0 [1]));
  (* HLUTNM = "lutpair9" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__2_i_4
       (.I0(ov_sum_reg_3[11]),
        .I1(ov_sum_reg_2[10]),
        .I2(ov_sum_reg_1[10]),
        .O(\ov_sum_reg[14]_0 [0]));
  (* HLUTNM = "lutpair13" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__2_i_5
       (.I0(ov_sum_reg_3[15]),
        .I1(ov_sum_reg_2[14]),
        .I2(ov_sum_reg_1[14]),
        .I3(\ov_sum_reg[14]_0 [3]),
        .O(\ov_sum_reg[15]_0 [3]));
  (* HLUTNM = "lutpair12" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__2_i_6
       (.I0(ov_sum_reg_3[14]),
        .I1(ov_sum_reg_2[13]),
        .I2(ov_sum_reg_1[13]),
        .I3(\ov_sum_reg[14]_0 [2]),
        .O(\ov_sum_reg[15]_0 [2]));
  (* HLUTNM = "lutpair11" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__2_i_7
       (.I0(ov_sum_reg_3[13]),
        .I1(ov_sum_reg_2[12]),
        .I2(ov_sum_reg_1[12]),
        .I3(\ov_sum_reg[14]_0 [1]),
        .O(\ov_sum_reg[15]_0 [1]));
  (* HLUTNM = "lutpair10" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__2_i_8
       (.I0(ov_sum_reg_3[12]),
        .I1(ov_sum_reg_2[11]),
        .I2(ov_sum_reg_1[11]),
        .I3(\ov_sum_reg[14]_0 [0]),
        .O(\ov_sum_reg[15]_0 [0]));
  (* HLUTNM = "lutpair16" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__3_i_1
       (.I0(ov_sum_reg_3[18]),
        .I1(ov_sum_reg_2[17]),
        .I2(ov_sum_reg_1[17]),
        .O(\ov_sum_reg[18]_0 [3]));
  (* HLUTNM = "lutpair15" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__3_i_2
       (.I0(ov_sum_reg_3[17]),
        .I1(ov_sum_reg_2[16]),
        .I2(ov_sum_reg_1[16]),
        .O(\ov_sum_reg[18]_0 [2]));
  (* HLUTNM = "lutpair14" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__3_i_3
       (.I0(ov_sum_reg_3[16]),
        .I1(ov_sum_reg_2[15]),
        .I2(ov_sum_reg_1[15]),
        .O(\ov_sum_reg[18]_0 [1]));
  (* HLUTNM = "lutpair13" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__3_i_4
       (.I0(ov_sum_reg_3[15]),
        .I1(ov_sum_reg_2[14]),
        .I2(ov_sum_reg_1[14]),
        .O(\ov_sum_reg[18]_0 [0]));
  (* HLUTNM = "lutpair17" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__3_i_5
       (.I0(ov_sum_reg_3[19]),
        .I1(ov_sum_reg_2[18]),
        .I2(ov_sum_reg_1[18]),
        .I3(\ov_sum_reg[18]_0 [3]),
        .O(\ov_sum_reg[19]_0 [3]));
  (* HLUTNM = "lutpair16" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__3_i_6
       (.I0(ov_sum_reg_3[18]),
        .I1(ov_sum_reg_2[17]),
        .I2(ov_sum_reg_1[17]),
        .I3(\ov_sum_reg[18]_0 [2]),
        .O(\ov_sum_reg[19]_0 [2]));
  (* HLUTNM = "lutpair15" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__3_i_7
       (.I0(ov_sum_reg_3[17]),
        .I1(ov_sum_reg_2[16]),
        .I2(ov_sum_reg_1[16]),
        .I3(\ov_sum_reg[18]_0 [1]),
        .O(\ov_sum_reg[19]_0 [1]));
  (* HLUTNM = "lutpair14" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__3_i_8
       (.I0(ov_sum_reg_3[16]),
        .I1(ov_sum_reg_2[15]),
        .I2(ov_sum_reg_1[15]),
        .I3(\ov_sum_reg[18]_0 [0]),
        .O(\ov_sum_reg[19]_0 [0]));
  (* HLUTNM = "lutpair19" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__4_i_1
       (.I0(ov_sum_reg_3[21]),
        .I1(ov_sum_reg_2[20]),
        .I2(ov_sum_reg_1[20]),
        .O(\ov_sum_reg[21]_0 [2]));
  (* HLUTNM = "lutpair18" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__4_i_2
       (.I0(ov_sum_reg_3[20]),
        .I1(ov_sum_reg_2[19]),
        .I2(ov_sum_reg_1[19]),
        .O(\ov_sum_reg[21]_0 [1]));
  (* HLUTNM = "lutpair17" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry__4_i_3
       (.I0(ov_sum_reg_3[19]),
        .I1(ov_sum_reg_2[18]),
        .I2(ov_sum_reg_1[18]),
        .O(\ov_sum_reg[21]_0 [0]));
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__4_i_5
       (.I0(\ov_sum_reg[21]_0 [2]),
        .I1(ov_sum_reg_1[21]),
        .I2(ov_sum_reg_2[21]),
        .I3(\ov_sum_reg[23]_0 [2]),
        .O(S[2]));
  (* HLUTNM = "lutpair19" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__4_i_6
       (.I0(ov_sum_reg_3[21]),
        .I1(ov_sum_reg_2[20]),
        .I2(ov_sum_reg_1[20]),
        .I3(\ov_sum_reg[21]_0 [1]),
        .O(S[1]));
  (* HLUTNM = "lutpair18" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry__4_i_7
       (.I0(ov_sum_reg_3[20]),
        .I1(ov_sum_reg_2[19]),
        .I2(ov_sum_reg_1[19]),
        .I3(\ov_sum_reg[21]_0 [0]),
        .O(S[0]));
  (* HLUTNM = "lutpair0" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry_i_1
       (.I0(ov_sum_reg_3[2]),
        .I1(ov_sum_reg_2[1]),
        .I2(ov_sum_reg_1[1]),
        .O(\ov_sum_reg[2]_0 [1]));
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry_i_2
       (.I0(\ov_sum_reg[23]_0 [1]),
        .I1(ov_sum_reg_2[0]),
        .I2(ov_sum_reg_1[0]),
        .O(\ov_sum_reg[2]_0 [0]));
  (* HLUTNM = "lutpair1" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry_i_4
       (.I0(ov_sum_reg_3[3]),
        .I1(ov_sum_reg_2[2]),
        .I2(ov_sum_reg_1[2]),
        .I3(\ov_sum_reg[2]_0 [1]),
        .O(\ov_sum_reg[3]_0 [1]));
  (* HLUTNM = "lutpair0" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry_i_5
       (.I0(ov_sum_reg_3[2]),
        .I1(ov_sum_reg_2[1]),
        .I2(ov_sum_reg_1[1]),
        .I3(\ov_sum_reg[2]_0 [0]),
        .O(\ov_sum_reg[3]_0 [0]));
  LUT4 #(
    .INIT(16'h6996)) 
    i___142_carry__4_i_11
       (.I0(O[2]),
        .I1(i___142_carry__4_i_4[2]),
        .I2(ov_sum_reg_0[2]),
        .I3(ov_sum_reg[2]),
        .O(\ov_sum_reg[23]_1 ));
  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__4_i_2
       (.I0(O[0]),
        .I1(i___142_carry__4_i_4[0]),
        .I2(ov_sum_reg[0]),
        .I3(ov_sum_reg_0[0]),
        .I4(\ov_dout_reg[23] ),
        .O(DI));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__4_i_6
       (.I0(DI),
        .I1(\ov_dout_reg[23]_0 ),
        .I2(ov_sum_reg_0[1]),
        .I3(O[1]),
        .I4(i___142_carry__4_i_4[1]),
        .I5(ov_sum_reg[1]),
        .O(\ov_sum_reg[21]_1 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],p_0_in,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__5 
       (.I0(p_0_in[3]),
        .I1(ov_sum_reg_3[3]),
        .O(\ov_sum[0]_i_2__5_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "328" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__6 
       (.I0(p_0_in[2]),
        .I1(ov_sum_reg_3[2]),
        .O(\ov_sum[0]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__6 
       (.I0(p_0_in[1]),
        .I1(\ov_sum_reg[23]_0 [1]),
        .O(\ov_sum[0]_i_4__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__6 
       (.I0(p_0_in[0]),
        .I1(\ov_sum_reg[23]_0 [0]),
        .O(\ov_sum[0]_i_5__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__6 
       (.I0(p_0_in[15]),
        .I1(ov_sum_reg_3[15]),
        .O(\ov_sum[12]_i_2__6_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "328" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__6 
       (.I0(p_0_in[14]),
        .I1(ov_sum_reg_3[14]),
        .O(\ov_sum[12]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__6 
       (.I0(p_0_in[13]),
        .I1(ov_sum_reg_3[13]),
        .O(\ov_sum[12]_i_4__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__6 
       (.I0(p_0_in[12]),
        .I1(ov_sum_reg_3[12]),
        .O(\ov_sum[12]_i_5__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__6 
       (.I0(p_0_in[19]),
        .I1(ov_sum_reg_3[19]),
        .O(\ov_sum[16]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__6 
       (.I0(p_0_in[18]),
        .I1(ov_sum_reg_3[18]),
        .O(\ov_sum[16]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__6 
       (.I0(p_0_in[17]),
        .I1(ov_sum_reg_3[17]),
        .O(\ov_sum[16]_i_4__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__6 
       (.I0(p_0_in[16]),
        .I1(ov_sum_reg_3[16]),
        .O(\ov_sum[16]_i_5__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__6 
       (.I0(\ov_sum_reg[23]_0 [3]),
        .I1(p_0_in[23]),
        .O(\ov_sum[20]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__6 
       (.I0(p_0_in[22]),
        .I1(\ov_sum_reg[23]_0 [2]),
        .O(\ov_sum[20]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__6 
       (.I0(p_0_in[21]),
        .I1(ov_sum_reg_3[21]),
        .O(\ov_sum[20]_i_4__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__6 
       (.I0(p_0_in[20]),
        .I1(ov_sum_reg_3[20]),
        .O(\ov_sum[20]_i_5__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__6 
       (.I0(p_0_in[7]),
        .I1(ov_sum_reg_3[7]),
        .O(\ov_sum[4]_i_2__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__6 
       (.I0(p_0_in[6]),
        .I1(ov_sum_reg_3[6]),
        .O(\ov_sum[4]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__6 
       (.I0(p_0_in[5]),
        .I1(ov_sum_reg_3[5]),
        .O(\ov_sum[4]_i_4__6_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "267" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__6 
       (.I0(p_0_in[4]),
        .I1(ov_sum_reg_3[4]),
        .O(\ov_sum[4]_i_5__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__6 
       (.I0(p_0_in[11]),
        .I1(ov_sum_reg_3[11]),
        .O(\ov_sum[8]_i_2__6_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "287" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__6 
       (.I0(p_0_in[10]),
        .I1(ov_sum_reg_3[10]),
        .O(\ov_sum[8]_i_3__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__6 
       (.I0(p_0_in[9]),
        .I1(ov_sum_reg_3[9]),
        .O(\ov_sum[8]_i_4__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__6 
       (.I0(p_0_in[8]),
        .I1(ov_sum_reg_3[8]),
        .O(\ov_sum[8]_i_5__6_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[23]_0 [0]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__5 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__5_n_0 ,\ov_sum_reg[0]_i_1__5_n_1 ,\ov_sum_reg[0]_i_1__5_n_2 ,\ov_sum_reg[0]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI(p_0_in[3:0]),
        .O({\ov_sum_reg[0]_i_1__5_n_4 ,\ov_sum_reg[0]_i_1__5_n_5 ,\ov_sum_reg[0]_i_1__5_n_6 ,\ov_sum_reg[0]_i_1__5_n_7 }),
        .S({\ov_sum[0]_i_2__5_n_0 ,\ov_sum[0]_i_3__6_n_0 ,\ov_sum[0]_i_4__6_n_0 ,\ov_sum[0]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__6_n_5 ),
        .Q(ov_sum_reg_3[10]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__6_n_4 ),
        .Q(ov_sum_reg_3[11]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__6_n_7 ),
        .Q(ov_sum_reg_3[12]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__6 
       (.CI(\ov_sum_reg[8]_i_1__6_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__6_n_0 ,\ov_sum_reg[12]_i_1__6_n_1 ,\ov_sum_reg[12]_i_1__6_n_2 ,\ov_sum_reg[12]_i_1__6_n_3 }),
        .CYINIT(1'b0),
        .DI(p_0_in[15:12]),
        .O({\ov_sum_reg[12]_i_1__6_n_4 ,\ov_sum_reg[12]_i_1__6_n_5 ,\ov_sum_reg[12]_i_1__6_n_6 ,\ov_sum_reg[12]_i_1__6_n_7 }),
        .S({\ov_sum[12]_i_2__6_n_0 ,\ov_sum[12]_i_3__6_n_0 ,\ov_sum[12]_i_4__6_n_0 ,\ov_sum[12]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__6_n_6 ),
        .Q(ov_sum_reg_3[13]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__6_n_5 ),
        .Q(ov_sum_reg_3[14]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__6_n_4 ),
        .Q(ov_sum_reg_3[15]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__6_n_7 ),
        .Q(ov_sum_reg_3[16]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__6 
       (.CI(\ov_sum_reg[12]_i_1__6_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__6_n_0 ,\ov_sum_reg[16]_i_1__6_n_1 ,\ov_sum_reg[16]_i_1__6_n_2 ,\ov_sum_reg[16]_i_1__6_n_3 }),
        .CYINIT(1'b0),
        .DI(p_0_in[19:16]),
        .O({\ov_sum_reg[16]_i_1__6_n_4 ,\ov_sum_reg[16]_i_1__6_n_5 ,\ov_sum_reg[16]_i_1__6_n_6 ,\ov_sum_reg[16]_i_1__6_n_7 }),
        .S({\ov_sum[16]_i_2__6_n_0 ,\ov_sum[16]_i_3__6_n_0 ,\ov_sum[16]_i_4__6_n_0 ,\ov_sum[16]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__6_n_6 ),
        .Q(ov_sum_reg_3[17]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__6_n_5 ),
        .Q(ov_sum_reg_3[18]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__6_n_4 ),
        .Q(ov_sum_reg_3[19]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[23]_0 [1]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__6_n_7 ),
        .Q(ov_sum_reg_3[20]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__6 
       (.CI(\ov_sum_reg[16]_i_1__6_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__6_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__6_n_1 ,\ov_sum_reg[20]_i_1__6_n_2 ,\ov_sum_reg[20]_i_1__6_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,p_0_in[22:20]}),
        .O({\ov_sum_reg[20]_i_1__6_n_4 ,\ov_sum_reg[20]_i_1__6_n_5 ,\ov_sum_reg[20]_i_1__6_n_6 ,\ov_sum_reg[20]_i_1__6_n_7 }),
        .S({\ov_sum[20]_i_2__6_n_0 ,\ov_sum[20]_i_3__6_n_0 ,\ov_sum[20]_i_4__6_n_0 ,\ov_sum[20]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__6_n_6 ),
        .Q(ov_sum_reg_3[21]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__6_n_5 ),
        .Q(\ov_sum_reg[23]_0 [2]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__6_n_4 ),
        .Q(\ov_sum_reg[23]_0 [3]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__5_n_5 ),
        .Q(ov_sum_reg_3[2]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__5_n_4 ),
        .Q(ov_sum_reg_3[3]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__6_n_7 ),
        .Q(ov_sum_reg_3[4]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__6 
       (.CI(\ov_sum_reg[0]_i_1__5_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__6_n_0 ,\ov_sum_reg[4]_i_1__6_n_1 ,\ov_sum_reg[4]_i_1__6_n_2 ,\ov_sum_reg[4]_i_1__6_n_3 }),
        .CYINIT(1'b0),
        .DI(p_0_in[7:4]),
        .O({\ov_sum_reg[4]_i_1__6_n_4 ,\ov_sum_reg[4]_i_1__6_n_5 ,\ov_sum_reg[4]_i_1__6_n_6 ,\ov_sum_reg[4]_i_1__6_n_7 }),
        .S({\ov_sum[4]_i_2__6_n_0 ,\ov_sum[4]_i_3__6_n_0 ,\ov_sum[4]_i_4__6_n_0 ,\ov_sum[4]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__6_n_6 ),
        .Q(ov_sum_reg_3[5]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__6_n_5 ),
        .Q(ov_sum_reg_3[6]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__6_n_4 ),
        .Q(ov_sum_reg_3[7]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__6_n_7 ),
        .Q(ov_sum_reg_3[8]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__6 
       (.CI(\ov_sum_reg[4]_i_1__6_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__6_n_0 ,\ov_sum_reg[8]_i_1__6_n_1 ,\ov_sum_reg[8]_i_1__6_n_2 ,\ov_sum_reg[8]_i_1__6_n_3 }),
        .CYINIT(1'b0),
        .DI(p_0_in[11:8]),
        .O({\ov_sum_reg[8]_i_1__6_n_4 ,\ov_sum_reg[8]_i_1__6_n_5 ,\ov_sum_reg[8]_i_1__6_n_6 ,\ov_sum_reg[8]_i_1__6_n_7 }),
        .S({\ov_sum[8]_i_2__6_n_0 ,\ov_sum[8]_i_3__6_n_0 ,\ov_sum[8]_i_4__6_n_0 ,\ov_sum[8]_i_5__6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__6_n_6 ),
        .Q(ov_sum_reg_3[9]),
        .R(\ov_sum_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_0
   (\ov_sum_reg[23]_0 ,
    DI,
    \ov_sum_reg[20]_0 ,
    S,
    douta,
    ov_sum1_0,
    \ov_sum_reg[23]_1 ,
    tap_en,
    CLK,
    O,
    \ov_dout_reg[23] ,
    ov_sum_reg,
    \ov_dout_reg[23]_0 );
  output [22:0]\ov_sum_reg[23]_0 ;
  output [0:0]DI;
  output \ov_sum_reg[20]_0 ;
  output [1:0]S;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[23]_1 ;
  input tap_en;
  input CLK;
  input [2:0]O;
  input [2:0]\ov_dout_reg[23] ;
  input [1:0]ov_sum_reg;
  input \ov_dout_reg[23]_0 ;

  wire CLK;
  wire [0:0]DI;
  wire [2:0]O;
  wire [1:0]S;
  wire [23:0]douta;
  wire i___142_carry__4_i_10_n_0;
  wire [2:0]\ov_dout_reg[23] ;
  wire \ov_dout_reg[23]_0 ;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_3_n_0 ;
  wire \ov_sum[0]_i_4_n_0 ;
  wire \ov_sum[0]_i_5_n_0 ;
  wire \ov_sum[0]_i_6_n_0 ;
  wire \ov_sum[12]_i_2_n_0 ;
  wire \ov_sum[12]_i_3_n_0 ;
  wire \ov_sum[12]_i_4_n_0 ;
  wire \ov_sum[12]_i_5_n_0 ;
  wire \ov_sum[16]_i_2_n_0 ;
  wire \ov_sum[16]_i_3_n_0 ;
  wire \ov_sum[16]_i_4_n_0 ;
  wire \ov_sum[16]_i_5_n_0 ;
  wire \ov_sum[20]_i_2_n_0 ;
  wire \ov_sum[20]_i_3_n_0 ;
  wire \ov_sum[20]_i_4_n_0 ;
  wire \ov_sum[20]_i_5_n_0 ;
  wire \ov_sum[4]_i_2_n_0 ;
  wire \ov_sum[4]_i_3_n_0 ;
  wire \ov_sum[4]_i_4_n_0 ;
  wire \ov_sum[4]_i_5_n_0 ;
  wire \ov_sum[8]_i_2_n_0 ;
  wire \ov_sum[8]_i_3_n_0 ;
  wire \ov_sum[8]_i_4_n_0 ;
  wire \ov_sum[8]_i_5_n_0 ;
  wire [1:0]ov_sum_reg;
  wire \ov_sum_reg[0]_i_2_n_0 ;
  wire \ov_sum_reg[0]_i_2_n_1 ;
  wire \ov_sum_reg[0]_i_2_n_2 ;
  wire \ov_sum_reg[0]_i_2_n_3 ;
  wire \ov_sum_reg[0]_i_2_n_4 ;
  wire \ov_sum_reg[0]_i_2_n_5 ;
  wire \ov_sum_reg[0]_i_2_n_6 ;
  wire \ov_sum_reg[0]_i_2_n_7 ;
  wire \ov_sum_reg[12]_i_1_n_0 ;
  wire \ov_sum_reg[12]_i_1_n_1 ;
  wire \ov_sum_reg[12]_i_1_n_2 ;
  wire \ov_sum_reg[12]_i_1_n_3 ;
  wire \ov_sum_reg[12]_i_1_n_4 ;
  wire \ov_sum_reg[12]_i_1_n_5 ;
  wire \ov_sum_reg[12]_i_1_n_6 ;
  wire \ov_sum_reg[12]_i_1_n_7 ;
  wire \ov_sum_reg[16]_i_1_n_0 ;
  wire \ov_sum_reg[16]_i_1_n_1 ;
  wire \ov_sum_reg[16]_i_1_n_2 ;
  wire \ov_sum_reg[16]_i_1_n_3 ;
  wire \ov_sum_reg[16]_i_1_n_4 ;
  wire \ov_sum_reg[16]_i_1_n_5 ;
  wire \ov_sum_reg[16]_i_1_n_6 ;
  wire \ov_sum_reg[16]_i_1_n_7 ;
  wire \ov_sum_reg[20]_0 ;
  wire \ov_sum_reg[20]_i_1_n_1 ;
  wire \ov_sum_reg[20]_i_1_n_2 ;
  wire \ov_sum_reg[20]_i_1_n_3 ;
  wire \ov_sum_reg[20]_i_1_n_4 ;
  wire \ov_sum_reg[20]_i_1_n_5 ;
  wire \ov_sum_reg[20]_i_1_n_6 ;
  wire \ov_sum_reg[20]_i_1_n_7 ;
  wire [22:0]\ov_sum_reg[23]_0 ;
  wire \ov_sum_reg[23]_1 ;
  wire \ov_sum_reg[4]_i_1_n_0 ;
  wire \ov_sum_reg[4]_i_1_n_1 ;
  wire \ov_sum_reg[4]_i_1_n_2 ;
  wire \ov_sum_reg[4]_i_1_n_3 ;
  wire \ov_sum_reg[4]_i_1_n_4 ;
  wire \ov_sum_reg[4]_i_1_n_5 ;
  wire \ov_sum_reg[4]_i_1_n_6 ;
  wire \ov_sum_reg[4]_i_1_n_7 ;
  wire \ov_sum_reg[8]_i_1_n_0 ;
  wire \ov_sum_reg[8]_i_1_n_1 ;
  wire \ov_sum_reg[8]_i_1_n_2 ;
  wire \ov_sum_reg[8]_i_1_n_3 ;
  wire \ov_sum_reg[8]_i_1_n_4 ;
  wire \ov_sum_reg[8]_i_1_n_5 ;
  wire \ov_sum_reg[8]_i_1_n_6 ;
  wire \ov_sum_reg[8]_i_1_n_7 ;
  wire [22:22]ov_sum_reg_0;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1_CO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hFF969600)) 
    i___142_carry__4_i_1
       (.I0(O[1]),
        .I1(\ov_dout_reg[23] [1]),
        .I2(\ov_sum_reg[23]_0 [21]),
        .I3(ov_sum_reg[0]),
        .I4(\ov_sum_reg[20]_0 ),
        .O(DI));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__4_i_10
       (.I0(\ov_sum_reg[23]_0 [21]),
        .I1(\ov_dout_reg[23] [1]),
        .I2(O[1]),
        .O(i___142_carry__4_i_10_n_0));
  LUT6 #(
    .INIT(64'hE817817E817E17E8)) 
    i___142_carry__4_i_4
       (.I0(i___142_carry__4_i_10_n_0),
        .I1(ov_sum_reg[1]),
        .I2(O[2]),
        .I3(\ov_dout_reg[23]_0 ),
        .I4(\ov_dout_reg[23] [2]),
        .I5(ov_sum_reg_0),
        .O(S[1]));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    i___142_carry__4_i_5
       (.I0(DI),
        .I1(i___142_carry__4_i_10_n_0),
        .I2(O[2]),
        .I3(\ov_dout_reg[23] [2]),
        .I4(ov_sum_reg_0),
        .I5(ov_sum_reg[1]),
        .O(S[0]));
  LUT3 #(
    .INIT(8'hE8)) 
    i___142_carry__4_i_8
       (.I0(\ov_sum_reg[23]_0 [20]),
        .I1(\ov_dout_reg[23] [0]),
        .I2(O[0]),
        .O(\ov_sum_reg[20]_0 ));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3 
       (.I0(ov_sum1__0_n_96),
        .I1(\ov_sum_reg[23]_0 [3]),
        .O(\ov_sum[0]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4 
       (.I0(ov_sum1__0_n_97),
        .I1(\ov_sum_reg[23]_0 [2]),
        .O(\ov_sum[0]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5 
       (.I0(ov_sum1__0_n_98),
        .I1(\ov_sum_reg[23]_0 [1]),
        .O(\ov_sum[0]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_6 
       (.I0(ov_sum1__0_n_99),
        .I1(\ov_sum_reg[23]_0 [0]),
        .O(\ov_sum[0]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2 
       (.I0(ov_sum1__0_n_84),
        .I1(\ov_sum_reg[23]_0 [15]),
        .O(\ov_sum[12]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3 
       (.I0(ov_sum1__0_n_85),
        .I1(\ov_sum_reg[23]_0 [14]),
        .O(\ov_sum[12]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4 
       (.I0(ov_sum1__0_n_86),
        .I1(\ov_sum_reg[23]_0 [13]),
        .O(\ov_sum[12]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5 
       (.I0(ov_sum1__0_n_87),
        .I1(\ov_sum_reg[23]_0 [12]),
        .O(\ov_sum[12]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2 
       (.I0(ov_sum1__0_n_80),
        .I1(\ov_sum_reg[23]_0 [19]),
        .O(\ov_sum[16]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3 
       (.I0(ov_sum1__0_n_81),
        .I1(\ov_sum_reg[23]_0 [18]),
        .O(\ov_sum[16]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4 
       (.I0(ov_sum1__0_n_82),
        .I1(\ov_sum_reg[23]_0 [17]),
        .O(\ov_sum[16]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5 
       (.I0(ov_sum1__0_n_83),
        .I1(\ov_sum_reg[23]_0 [16]),
        .O(\ov_sum[16]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2 
       (.I0(\ov_sum_reg[23]_0 [22]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3 
       (.I0(ov_sum1__0_n_77),
        .I1(ov_sum_reg_0),
        .O(\ov_sum[20]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4 
       (.I0(ov_sum1__0_n_78),
        .I1(\ov_sum_reg[23]_0 [21]),
        .O(\ov_sum[20]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5 
       (.I0(ov_sum1__0_n_79),
        .I1(\ov_sum_reg[23]_0 [20]),
        .O(\ov_sum[20]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2 
       (.I0(ov_sum1__0_n_92),
        .I1(\ov_sum_reg[23]_0 [7]),
        .O(\ov_sum[4]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3 
       (.I0(ov_sum1__0_n_93),
        .I1(\ov_sum_reg[23]_0 [6]),
        .O(\ov_sum[4]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4 
       (.I0(ov_sum1__0_n_94),
        .I1(\ov_sum_reg[23]_0 [5]),
        .O(\ov_sum[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5 
       (.I0(ov_sum1__0_n_95),
        .I1(\ov_sum_reg[23]_0 [4]),
        .O(\ov_sum[4]_i_5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2 
       (.I0(ov_sum1__0_n_88),
        .I1(\ov_sum_reg[23]_0 [11]),
        .O(\ov_sum[8]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3 
       (.I0(ov_sum1__0_n_89),
        .I1(\ov_sum_reg[23]_0 [10]),
        .O(\ov_sum[8]_i_3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4 
       (.I0(ov_sum1__0_n_90),
        .I1(\ov_sum_reg[23]_0 [9]),
        .O(\ov_sum[8]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5 
       (.I0(ov_sum1__0_n_91),
        .I1(\ov_sum_reg[23]_0 [8]),
        .O(\ov_sum[8]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [0]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_2_n_0 ,\ov_sum_reg[0]_i_2_n_1 ,\ov_sum_reg[0]_i_2_n_2 ,\ov_sum_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_2_n_4 ,\ov_sum_reg[0]_i_2_n_5 ,\ov_sum_reg[0]_i_2_n_6 ,\ov_sum_reg[0]_i_2_n_7 }),
        .S({\ov_sum[0]_i_3_n_0 ,\ov_sum[0]_i_4_n_0 ,\ov_sum[0]_i_5_n_0 ,\ov_sum[0]_i_6_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1_n_5 ),
        .Q(\ov_sum_reg[23]_0 [10]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [11]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1_n_7 ),
        .Q(\ov_sum_reg[23]_0 [12]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1 
       (.CI(\ov_sum_reg[8]_i_1_n_0 ),
        .CO({\ov_sum_reg[12]_i_1_n_0 ,\ov_sum_reg[12]_i_1_n_1 ,\ov_sum_reg[12]_i_1_n_2 ,\ov_sum_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1_n_4 ,\ov_sum_reg[12]_i_1_n_5 ,\ov_sum_reg[12]_i_1_n_6 ,\ov_sum_reg[12]_i_1_n_7 }),
        .S({\ov_sum[12]_i_2_n_0 ,\ov_sum[12]_i_3_n_0 ,\ov_sum[12]_i_4_n_0 ,\ov_sum[12]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [13]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1_n_5 ),
        .Q(\ov_sum_reg[23]_0 [14]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [15]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1_n_7 ),
        .Q(\ov_sum_reg[23]_0 [16]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1 
       (.CI(\ov_sum_reg[12]_i_1_n_0 ),
        .CO({\ov_sum_reg[16]_i_1_n_0 ,\ov_sum_reg[16]_i_1_n_1 ,\ov_sum_reg[16]_i_1_n_2 ,\ov_sum_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1_n_4 ,\ov_sum_reg[16]_i_1_n_5 ,\ov_sum_reg[16]_i_1_n_6 ,\ov_sum_reg[16]_i_1_n_7 }),
        .S({\ov_sum[16]_i_2_n_0 ,\ov_sum[16]_i_3_n_0 ,\ov_sum[16]_i_4_n_0 ,\ov_sum[16]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [17]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1_n_5 ),
        .Q(\ov_sum_reg[23]_0 [18]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [19]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [1]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1_n_7 ),
        .Q(\ov_sum_reg[23]_0 [20]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1 
       (.CI(\ov_sum_reg[16]_i_1_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1_n_1 ,\ov_sum_reg[20]_i_1_n_2 ,\ov_sum_reg[20]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1_n_4 ,\ov_sum_reg[20]_i_1_n_5 ,\ov_sum_reg[20]_i_1_n_6 ,\ov_sum_reg[20]_i_1_n_7 }),
        .S({\ov_sum[20]_i_2_n_0 ,\ov_sum[20]_i_3_n_0 ,\ov_sum[20]_i_4_n_0 ,\ov_sum[20]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [21]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1_n_5 ),
        .Q(ov_sum_reg_0),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [22]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [2]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [3]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1_n_7 ),
        .Q(\ov_sum_reg[23]_0 [4]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1 
       (.CI(\ov_sum_reg[0]_i_2_n_0 ),
        .CO({\ov_sum_reg[4]_i_1_n_0 ,\ov_sum_reg[4]_i_1_n_1 ,\ov_sum_reg[4]_i_1_n_2 ,\ov_sum_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1_n_4 ,\ov_sum_reg[4]_i_1_n_5 ,\ov_sum_reg[4]_i_1_n_6 ,\ov_sum_reg[4]_i_1_n_7 }),
        .S({\ov_sum[4]_i_2_n_0 ,\ov_sum[4]_i_3_n_0 ,\ov_sum[4]_i_4_n_0 ,\ov_sum[4]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [5]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1_n_5 ),
        .Q(\ov_sum_reg[23]_0 [6]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [7]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1_n_7 ),
        .Q(\ov_sum_reg[23]_0 [8]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1 
       (.CI(\ov_sum_reg[4]_i_1_n_0 ),
        .CO({\ov_sum_reg[8]_i_1_n_0 ,\ov_sum_reg[8]_i_1_n_1 ,\ov_sum_reg[8]_i_1_n_2 ,\ov_sum_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1_n_4 ,\ov_sum_reg[8]_i_1_n_5 ,\ov_sum_reg[8]_i_1_n_6 ,\ov_sum_reg[8]_i_1_n_7 }),
        .S({\ov_sum[8]_i_2_n_0 ,\ov_sum[8]_i_3_n_0 ,\ov_sum[8]_i_4_n_0 ,\ov_sum[8]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [9]),
        .R(\ov_sum_reg[23]_1 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_1
   (ov_sum_reg,
    douta,
    ov_sum1_0,
    \ov_sum_reg[0]_0 ,
    tap_en,
    CLK);
  output [23:0]ov_sum_reg;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[0]_0 ;
  input tap_en;
  input CLK;

  wire CLK;
  wire [23:0]douta;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2_n_0 ;
  wire \ov_sum[0]_i_3__0_n_0 ;
  wire \ov_sum[0]_i_4__0_n_0 ;
  wire \ov_sum[0]_i_5__0_n_0 ;
  wire \ov_sum[12]_i_2__0_n_0 ;
  wire \ov_sum[12]_i_3__0_n_0 ;
  wire \ov_sum[12]_i_4__0_n_0 ;
  wire \ov_sum[12]_i_5__0_n_0 ;
  wire \ov_sum[16]_i_2__0_n_0 ;
  wire \ov_sum[16]_i_3__0_n_0 ;
  wire \ov_sum[16]_i_4__0_n_0 ;
  wire \ov_sum[16]_i_5__0_n_0 ;
  wire \ov_sum[20]_i_2__0_n_0 ;
  wire \ov_sum[20]_i_3__0_n_0 ;
  wire \ov_sum[20]_i_4__0_n_0 ;
  wire \ov_sum[20]_i_5__0_n_0 ;
  wire \ov_sum[4]_i_2__0_n_0 ;
  wire \ov_sum[4]_i_3__0_n_0 ;
  wire \ov_sum[4]_i_4__0_n_0 ;
  wire \ov_sum[4]_i_5__0_n_0 ;
  wire \ov_sum[8]_i_2__0_n_0 ;
  wire \ov_sum[8]_i_3__0_n_0 ;
  wire \ov_sum[8]_i_4__0_n_0 ;
  wire \ov_sum[8]_i_5__0_n_0 ;
  wire [23:0]ov_sum_reg;
  wire \ov_sum_reg[0]_0 ;
  wire \ov_sum_reg[0]_i_1_n_0 ;
  wire \ov_sum_reg[0]_i_1_n_1 ;
  wire \ov_sum_reg[0]_i_1_n_2 ;
  wire \ov_sum_reg[0]_i_1_n_3 ;
  wire \ov_sum_reg[0]_i_1_n_4 ;
  wire \ov_sum_reg[0]_i_1_n_5 ;
  wire \ov_sum_reg[0]_i_1_n_6 ;
  wire \ov_sum_reg[0]_i_1_n_7 ;
  wire \ov_sum_reg[12]_i_1__0_n_0 ;
  wire \ov_sum_reg[12]_i_1__0_n_1 ;
  wire \ov_sum_reg[12]_i_1__0_n_2 ;
  wire \ov_sum_reg[12]_i_1__0_n_3 ;
  wire \ov_sum_reg[12]_i_1__0_n_4 ;
  wire \ov_sum_reg[12]_i_1__0_n_5 ;
  wire \ov_sum_reg[12]_i_1__0_n_6 ;
  wire \ov_sum_reg[12]_i_1__0_n_7 ;
  wire \ov_sum_reg[16]_i_1__0_n_0 ;
  wire \ov_sum_reg[16]_i_1__0_n_1 ;
  wire \ov_sum_reg[16]_i_1__0_n_2 ;
  wire \ov_sum_reg[16]_i_1__0_n_3 ;
  wire \ov_sum_reg[16]_i_1__0_n_4 ;
  wire \ov_sum_reg[16]_i_1__0_n_5 ;
  wire \ov_sum_reg[16]_i_1__0_n_6 ;
  wire \ov_sum_reg[16]_i_1__0_n_7 ;
  wire \ov_sum_reg[20]_i_1__0_n_1 ;
  wire \ov_sum_reg[20]_i_1__0_n_2 ;
  wire \ov_sum_reg[20]_i_1__0_n_3 ;
  wire \ov_sum_reg[20]_i_1__0_n_4 ;
  wire \ov_sum_reg[20]_i_1__0_n_5 ;
  wire \ov_sum_reg[20]_i_1__0_n_6 ;
  wire \ov_sum_reg[20]_i_1__0_n_7 ;
  wire \ov_sum_reg[4]_i_1__0_n_0 ;
  wire \ov_sum_reg[4]_i_1__0_n_1 ;
  wire \ov_sum_reg[4]_i_1__0_n_2 ;
  wire \ov_sum_reg[4]_i_1__0_n_3 ;
  wire \ov_sum_reg[4]_i_1__0_n_4 ;
  wire \ov_sum_reg[4]_i_1__0_n_5 ;
  wire \ov_sum_reg[4]_i_1__0_n_6 ;
  wire \ov_sum_reg[4]_i_1__0_n_7 ;
  wire \ov_sum_reg[8]_i_1__0_n_0 ;
  wire \ov_sum_reg[8]_i_1__0_n_1 ;
  wire \ov_sum_reg[8]_i_1__0_n_2 ;
  wire \ov_sum_reg[8]_i_1__0_n_3 ;
  wire \ov_sum_reg[8]_i_1__0_n_4 ;
  wire \ov_sum_reg[8]_i_1__0_n_5 ;
  wire \ov_sum_reg[8]_i_1__0_n_6 ;
  wire \ov_sum_reg[8]_i_1__0_n_7 ;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__0_CO_UNCONNECTED ;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  (* \PinAttr:I1:HOLD_DETOUR  = "250" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2 
       (.I0(ov_sum1__0_n_96),
        .I1(ov_sum_reg[3]),
        .O(\ov_sum[0]_i_2_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "247" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__0 
       (.I0(ov_sum1__0_n_97),
        .I1(ov_sum_reg[2]),
        .O(\ov_sum[0]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__0 
       (.I0(ov_sum1__0_n_98),
        .I1(ov_sum_reg[1]),
        .O(\ov_sum[0]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__0 
       (.I0(ov_sum1__0_n_99),
        .I1(ov_sum_reg[0]),
        .O(\ov_sum[0]_i_5__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "309" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__0 
       (.I0(ov_sum1__0_n_84),
        .I1(ov_sum_reg[15]),
        .O(\ov_sum[12]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__0 
       (.I0(ov_sum1__0_n_85),
        .I1(ov_sum_reg[14]),
        .O(\ov_sum[12]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__0 
       (.I0(ov_sum1__0_n_86),
        .I1(ov_sum_reg[13]),
        .O(\ov_sum[12]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__0 
       (.I0(ov_sum1__0_n_87),
        .I1(ov_sum_reg[12]),
        .O(\ov_sum[12]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__0 
       (.I0(ov_sum1__0_n_80),
        .I1(ov_sum_reg[19]),
        .O(\ov_sum[16]_i_2__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "362" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__0 
       (.I0(ov_sum1__0_n_81),
        .I1(ov_sum_reg[18]),
        .O(\ov_sum[16]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__0 
       (.I0(ov_sum1__0_n_82),
        .I1(ov_sum_reg[17]),
        .O(\ov_sum[16]_i_4__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "358" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__0 
       (.I0(ov_sum1__0_n_83),
        .I1(ov_sum_reg[16]),
        .O(\ov_sum[16]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__0 
       (.I0(ov_sum_reg[23]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__0 
       (.I0(ov_sum1__0_n_77),
        .I1(ov_sum_reg[22]),
        .O(\ov_sum[20]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__0 
       (.I0(ov_sum1__0_n_78),
        .I1(ov_sum_reg[21]),
        .O(\ov_sum[20]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__0 
       (.I0(ov_sum1__0_n_79),
        .I1(ov_sum_reg[20]),
        .O(\ov_sum[20]_i_5__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__0 
       (.I0(ov_sum1__0_n_92),
        .I1(ov_sum_reg[7]),
        .O(\ov_sum[4]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__0 
       (.I0(ov_sum1__0_n_93),
        .I1(ov_sum_reg[6]),
        .O(\ov_sum[4]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__0 
       (.I0(ov_sum1__0_n_94),
        .I1(ov_sum_reg[5]),
        .O(\ov_sum[4]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__0 
       (.I0(ov_sum1__0_n_95),
        .I1(ov_sum_reg[4]),
        .O(\ov_sum[4]_i_5__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "290" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__0 
       (.I0(ov_sum1__0_n_88),
        .I1(ov_sum_reg[11]),
        .O(\ov_sum[8]_i_2__0_n_0 ));
  (* \PinAttr:I1:HOLD_DETOUR  = "287" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__0 
       (.I0(ov_sum1__0_n_89),
        .I1(ov_sum_reg[10]),
        .O(\ov_sum[8]_i_3__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__0 
       (.I0(ov_sum1__0_n_90),
        .I1(ov_sum_reg[9]),
        .O(\ov_sum[8]_i_4__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__0 
       (.I0(ov_sum1__0_n_91),
        .I1(ov_sum_reg[8]),
        .O(\ov_sum[8]_i_5__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1_n_7 ),
        .Q(ov_sum_reg[0]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1_n_0 ,\ov_sum_reg[0]_i_1_n_1 ,\ov_sum_reg[0]_i_1_n_2 ,\ov_sum_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1_n_4 ,\ov_sum_reg[0]_i_1_n_5 ,\ov_sum_reg[0]_i_1_n_6 ,\ov_sum_reg[0]_i_1_n_7 }),
        .S({\ov_sum[0]_i_2_n_0 ,\ov_sum[0]_i_3__0_n_0 ,\ov_sum[0]_i_4__0_n_0 ,\ov_sum[0]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__0_n_5 ),
        .Q(ov_sum_reg[10]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__0_n_4 ),
        .Q(ov_sum_reg[11]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__0_n_7 ),
        .Q(ov_sum_reg[12]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__0 
       (.CI(\ov_sum_reg[8]_i_1__0_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__0_n_0 ,\ov_sum_reg[12]_i_1__0_n_1 ,\ov_sum_reg[12]_i_1__0_n_2 ,\ov_sum_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__0_n_4 ,\ov_sum_reg[12]_i_1__0_n_5 ,\ov_sum_reg[12]_i_1__0_n_6 ,\ov_sum_reg[12]_i_1__0_n_7 }),
        .S({\ov_sum[12]_i_2__0_n_0 ,\ov_sum[12]_i_3__0_n_0 ,\ov_sum[12]_i_4__0_n_0 ,\ov_sum[12]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__0_n_6 ),
        .Q(ov_sum_reg[13]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__0_n_5 ),
        .Q(ov_sum_reg[14]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__0_n_4 ),
        .Q(ov_sum_reg[15]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__0_n_7 ),
        .Q(ov_sum_reg[16]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__0 
       (.CI(\ov_sum_reg[12]_i_1__0_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__0_n_0 ,\ov_sum_reg[16]_i_1__0_n_1 ,\ov_sum_reg[16]_i_1__0_n_2 ,\ov_sum_reg[16]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__0_n_4 ,\ov_sum_reg[16]_i_1__0_n_5 ,\ov_sum_reg[16]_i_1__0_n_6 ,\ov_sum_reg[16]_i_1__0_n_7 }),
        .S({\ov_sum[16]_i_2__0_n_0 ,\ov_sum[16]_i_3__0_n_0 ,\ov_sum[16]_i_4__0_n_0 ,\ov_sum[16]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__0_n_6 ),
        .Q(ov_sum_reg[17]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__0_n_5 ),
        .Q(ov_sum_reg[18]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__0_n_4 ),
        .Q(ov_sum_reg[19]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1_n_6 ),
        .Q(ov_sum_reg[1]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__0_n_7 ),
        .Q(ov_sum_reg[20]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__0 
       (.CI(\ov_sum_reg[16]_i_1__0_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__0_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__0_n_1 ,\ov_sum_reg[20]_i_1__0_n_2 ,\ov_sum_reg[20]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__0_n_4 ,\ov_sum_reg[20]_i_1__0_n_5 ,\ov_sum_reg[20]_i_1__0_n_6 ,\ov_sum_reg[20]_i_1__0_n_7 }),
        .S({\ov_sum[20]_i_2__0_n_0 ,\ov_sum[20]_i_3__0_n_0 ,\ov_sum[20]_i_4__0_n_0 ,\ov_sum[20]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__0_n_6 ),
        .Q(ov_sum_reg[21]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__0_n_5 ),
        .Q(ov_sum_reg[22]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__0_n_4 ),
        .Q(ov_sum_reg[23]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1_n_5 ),
        .Q(ov_sum_reg[2]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1_n_4 ),
        .Q(ov_sum_reg[3]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__0_n_7 ),
        .Q(ov_sum_reg[4]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__0 
       (.CI(\ov_sum_reg[0]_i_1_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__0_n_0 ,\ov_sum_reg[4]_i_1__0_n_1 ,\ov_sum_reg[4]_i_1__0_n_2 ,\ov_sum_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__0_n_4 ,\ov_sum_reg[4]_i_1__0_n_5 ,\ov_sum_reg[4]_i_1__0_n_6 ,\ov_sum_reg[4]_i_1__0_n_7 }),
        .S({\ov_sum[4]_i_2__0_n_0 ,\ov_sum[4]_i_3__0_n_0 ,\ov_sum[4]_i_4__0_n_0 ,\ov_sum[4]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__0_n_6 ),
        .Q(ov_sum_reg[5]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__0_n_5 ),
        .Q(ov_sum_reg[6]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__0_n_4 ),
        .Q(ov_sum_reg[7]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__0_n_7 ),
        .Q(ov_sum_reg[8]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__0 
       (.CI(\ov_sum_reg[4]_i_1__0_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__0_n_0 ,\ov_sum_reg[8]_i_1__0_n_1 ,\ov_sum_reg[8]_i_1__0_n_2 ,\ov_sum_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__0_n_4 ,\ov_sum_reg[8]_i_1__0_n_5 ,\ov_sum_reg[8]_i_1__0_n_6 ,\ov_sum_reg[8]_i_1__0_n_7 }),
        .S({\ov_sum[8]_i_2__0_n_0 ,\ov_sum[8]_i_3__0_n_0 ,\ov_sum[8]_i_4__0_n_0 ,\ov_sum[8]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__0_n_6 ),
        .Q(ov_sum_reg[9]),
        .R(\ov_sum_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_2
   (\ov_sum_reg[22]_0 ,
    S,
    douta,
    ov_sum1_0,
    \ov_sum_reg[23]_0 ,
    tap_en,
    CLK,
    ov_sum_reg,
    ov_sum_reg_0);
  output [22:0]\ov_sum_reg[22]_0 ;
  output [0:0]S;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[23]_0 ;
  input tap_en;
  input CLK;
  input [1:0]ov_sum_reg;
  input [1:0]ov_sum_reg_0;

  wire CLK;
  wire [0:0]S;
  wire [23:0]douta;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__0_n_0 ;
  wire \ov_sum[0]_i_3__1_n_0 ;
  wire \ov_sum[0]_i_4__1_n_0 ;
  wire \ov_sum[0]_i_5__1_n_0 ;
  wire \ov_sum[12]_i_2__1_n_0 ;
  wire \ov_sum[12]_i_3__1_n_0 ;
  wire \ov_sum[12]_i_4__1_n_0 ;
  wire \ov_sum[12]_i_5__1_n_0 ;
  wire \ov_sum[16]_i_2__1_n_0 ;
  wire \ov_sum[16]_i_3__1_n_0 ;
  wire \ov_sum[16]_i_4__1_n_0 ;
  wire \ov_sum[16]_i_5__1_n_0 ;
  wire \ov_sum[20]_i_2__1_n_0 ;
  wire \ov_sum[20]_i_3__1_n_0 ;
  wire \ov_sum[20]_i_4__1_n_0 ;
  wire \ov_sum[20]_i_5__1_n_0 ;
  wire \ov_sum[4]_i_2__1_n_0 ;
  wire \ov_sum[4]_i_3__1_n_0 ;
  wire \ov_sum[4]_i_4__1_n_0 ;
  wire \ov_sum[4]_i_5__1_n_0 ;
  wire \ov_sum[8]_i_2__1_n_0 ;
  wire \ov_sum[8]_i_3__1_n_0 ;
  wire \ov_sum[8]_i_4__1_n_0 ;
  wire \ov_sum[8]_i_5__1_n_0 ;
  wire [1:0]ov_sum_reg;
  wire \ov_sum_reg[0]_i_1__0_n_0 ;
  wire \ov_sum_reg[0]_i_1__0_n_1 ;
  wire \ov_sum_reg[0]_i_1__0_n_2 ;
  wire \ov_sum_reg[0]_i_1__0_n_3 ;
  wire \ov_sum_reg[0]_i_1__0_n_4 ;
  wire \ov_sum_reg[0]_i_1__0_n_5 ;
  wire \ov_sum_reg[0]_i_1__0_n_6 ;
  wire \ov_sum_reg[0]_i_1__0_n_7 ;
  wire \ov_sum_reg[12]_i_1__1_n_0 ;
  wire \ov_sum_reg[12]_i_1__1_n_1 ;
  wire \ov_sum_reg[12]_i_1__1_n_2 ;
  wire \ov_sum_reg[12]_i_1__1_n_3 ;
  wire \ov_sum_reg[12]_i_1__1_n_4 ;
  wire \ov_sum_reg[12]_i_1__1_n_5 ;
  wire \ov_sum_reg[12]_i_1__1_n_6 ;
  wire \ov_sum_reg[12]_i_1__1_n_7 ;
  wire \ov_sum_reg[16]_i_1__1_n_0 ;
  wire \ov_sum_reg[16]_i_1__1_n_1 ;
  wire \ov_sum_reg[16]_i_1__1_n_2 ;
  wire \ov_sum_reg[16]_i_1__1_n_3 ;
  wire \ov_sum_reg[16]_i_1__1_n_4 ;
  wire \ov_sum_reg[16]_i_1__1_n_5 ;
  wire \ov_sum_reg[16]_i_1__1_n_6 ;
  wire \ov_sum_reg[16]_i_1__1_n_7 ;
  wire \ov_sum_reg[20]_i_1__1_n_1 ;
  wire \ov_sum_reg[20]_i_1__1_n_2 ;
  wire \ov_sum_reg[20]_i_1__1_n_3 ;
  wire \ov_sum_reg[20]_i_1__1_n_4 ;
  wire \ov_sum_reg[20]_i_1__1_n_5 ;
  wire \ov_sum_reg[20]_i_1__1_n_6 ;
  wire \ov_sum_reg[20]_i_1__1_n_7 ;
  wire [22:0]\ov_sum_reg[22]_0 ;
  wire \ov_sum_reg[23]_0 ;
  wire \ov_sum_reg[4]_i_1__1_n_0 ;
  wire \ov_sum_reg[4]_i_1__1_n_1 ;
  wire \ov_sum_reg[4]_i_1__1_n_2 ;
  wire \ov_sum_reg[4]_i_1__1_n_3 ;
  wire \ov_sum_reg[4]_i_1__1_n_4 ;
  wire \ov_sum_reg[4]_i_1__1_n_5 ;
  wire \ov_sum_reg[4]_i_1__1_n_6 ;
  wire \ov_sum_reg[4]_i_1__1_n_7 ;
  wire \ov_sum_reg[8]_i_1__1_n_0 ;
  wire \ov_sum_reg[8]_i_1__1_n_1 ;
  wire \ov_sum_reg[8]_i_1__1_n_2 ;
  wire \ov_sum_reg[8]_i_1__1_n_3 ;
  wire \ov_sum_reg[8]_i_1__1_n_4 ;
  wire \ov_sum_reg[8]_i_1__1_n_5 ;
  wire \ov_sum_reg[8]_i_1__1_n_6 ;
  wire \ov_sum_reg[8]_i_1__1_n_7 ;
  wire [1:0]ov_sum_reg_0;
  wire [23:23]ov_sum_reg_1;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h6969699669969696)) 
    i___70_carry__4_i_4
       (.I0(ov_sum_reg_1),
        .I1(ov_sum_reg[1]),
        .I2(ov_sum_reg_0[1]),
        .I3(ov_sum_reg[0]),
        .I4(\ov_sum_reg[22]_0 [22]),
        .I5(ov_sum_reg_0[0]),
        .O(S));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__0 
       (.I0(ov_sum1__0_n_96),
        .I1(\ov_sum_reg[22]_0 [3]),
        .O(\ov_sum[0]_i_2__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__1 
       (.I0(ov_sum1__0_n_97),
        .I1(\ov_sum_reg[22]_0 [2]),
        .O(\ov_sum[0]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__1 
       (.I0(ov_sum1__0_n_98),
        .I1(\ov_sum_reg[22]_0 [1]),
        .O(\ov_sum[0]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__1 
       (.I0(ov_sum1__0_n_99),
        .I1(\ov_sum_reg[22]_0 [0]),
        .O(\ov_sum[0]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__1 
       (.I0(ov_sum1__0_n_84),
        .I1(\ov_sum_reg[22]_0 [15]),
        .O(\ov_sum[12]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__1 
       (.I0(ov_sum1__0_n_85),
        .I1(\ov_sum_reg[22]_0 [14]),
        .O(\ov_sum[12]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__1 
       (.I0(ov_sum1__0_n_86),
        .I1(\ov_sum_reg[22]_0 [13]),
        .O(\ov_sum[12]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__1 
       (.I0(ov_sum1__0_n_87),
        .I1(\ov_sum_reg[22]_0 [12]),
        .O(\ov_sum[12]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__1 
       (.I0(ov_sum1__0_n_80),
        .I1(\ov_sum_reg[22]_0 [19]),
        .O(\ov_sum[16]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__1 
       (.I0(ov_sum1__0_n_81),
        .I1(\ov_sum_reg[22]_0 [18]),
        .O(\ov_sum[16]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__1 
       (.I0(ov_sum1__0_n_82),
        .I1(\ov_sum_reg[22]_0 [17]),
        .O(\ov_sum[16]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__1 
       (.I0(ov_sum1__0_n_83),
        .I1(\ov_sum_reg[22]_0 [16]),
        .O(\ov_sum[16]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__1 
       (.I0(ov_sum_reg_1),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__1 
       (.I0(ov_sum1__0_n_77),
        .I1(\ov_sum_reg[22]_0 [22]),
        .O(\ov_sum[20]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__1 
       (.I0(ov_sum1__0_n_78),
        .I1(\ov_sum_reg[22]_0 [21]),
        .O(\ov_sum[20]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__1 
       (.I0(ov_sum1__0_n_79),
        .I1(\ov_sum_reg[22]_0 [20]),
        .O(\ov_sum[20]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__1 
       (.I0(ov_sum1__0_n_92),
        .I1(\ov_sum_reg[22]_0 [7]),
        .O(\ov_sum[4]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__1 
       (.I0(ov_sum1__0_n_93),
        .I1(\ov_sum_reg[22]_0 [6]),
        .O(\ov_sum[4]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__1 
       (.I0(ov_sum1__0_n_94),
        .I1(\ov_sum_reg[22]_0 [5]),
        .O(\ov_sum[4]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__1 
       (.I0(ov_sum1__0_n_95),
        .I1(\ov_sum_reg[22]_0 [4]),
        .O(\ov_sum[4]_i_5__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__1 
       (.I0(ov_sum1__0_n_88),
        .I1(\ov_sum_reg[22]_0 [11]),
        .O(\ov_sum[8]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__1 
       (.I0(ov_sum1__0_n_89),
        .I1(\ov_sum_reg[22]_0 [10]),
        .O(\ov_sum[8]_i_3__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__1 
       (.I0(ov_sum1__0_n_90),
        .I1(\ov_sum_reg[22]_0 [9]),
        .O(\ov_sum[8]_i_4__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__1 
       (.I0(ov_sum1__0_n_91),
        .I1(\ov_sum_reg[22]_0 [8]),
        .O(\ov_sum[8]_i_5__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__0_n_7 ),
        .Q(\ov_sum_reg[22]_0 [0]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__0 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__0_n_0 ,\ov_sum_reg[0]_i_1__0_n_1 ,\ov_sum_reg[0]_i_1__0_n_2 ,\ov_sum_reg[0]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1__0_n_4 ,\ov_sum_reg[0]_i_1__0_n_5 ,\ov_sum_reg[0]_i_1__0_n_6 ,\ov_sum_reg[0]_i_1__0_n_7 }),
        .S({\ov_sum[0]_i_2__0_n_0 ,\ov_sum[0]_i_3__1_n_0 ,\ov_sum[0]_i_4__1_n_0 ,\ov_sum[0]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[22]_0 [10]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__1_n_4 ),
        .Q(\ov_sum_reg[22]_0 [11]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__1_n_7 ),
        .Q(\ov_sum_reg[22]_0 [12]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__1 
       (.CI(\ov_sum_reg[8]_i_1__1_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__1_n_0 ,\ov_sum_reg[12]_i_1__1_n_1 ,\ov_sum_reg[12]_i_1__1_n_2 ,\ov_sum_reg[12]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__1_n_4 ,\ov_sum_reg[12]_i_1__1_n_5 ,\ov_sum_reg[12]_i_1__1_n_6 ,\ov_sum_reg[12]_i_1__1_n_7 }),
        .S({\ov_sum[12]_i_2__1_n_0 ,\ov_sum[12]_i_3__1_n_0 ,\ov_sum[12]_i_4__1_n_0 ,\ov_sum[12]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[22]_0 [13]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[22]_0 [14]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__1_n_4 ),
        .Q(\ov_sum_reg[22]_0 [15]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__1_n_7 ),
        .Q(\ov_sum_reg[22]_0 [16]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__1 
       (.CI(\ov_sum_reg[12]_i_1__1_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__1_n_0 ,\ov_sum_reg[16]_i_1__1_n_1 ,\ov_sum_reg[16]_i_1__1_n_2 ,\ov_sum_reg[16]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__1_n_4 ,\ov_sum_reg[16]_i_1__1_n_5 ,\ov_sum_reg[16]_i_1__1_n_6 ,\ov_sum_reg[16]_i_1__1_n_7 }),
        .S({\ov_sum[16]_i_2__1_n_0 ,\ov_sum[16]_i_3__1_n_0 ,\ov_sum[16]_i_4__1_n_0 ,\ov_sum[16]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[22]_0 [17]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[22]_0 [18]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__1_n_4 ),
        .Q(\ov_sum_reg[22]_0 [19]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__0_n_6 ),
        .Q(\ov_sum_reg[22]_0 [1]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__1_n_7 ),
        .Q(\ov_sum_reg[22]_0 [20]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__1 
       (.CI(\ov_sum_reg[16]_i_1__1_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__1_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__1_n_1 ,\ov_sum_reg[20]_i_1__1_n_2 ,\ov_sum_reg[20]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__1_n_4 ,\ov_sum_reg[20]_i_1__1_n_5 ,\ov_sum_reg[20]_i_1__1_n_6 ,\ov_sum_reg[20]_i_1__1_n_7 }),
        .S({\ov_sum[20]_i_2__1_n_0 ,\ov_sum[20]_i_3__1_n_0 ,\ov_sum[20]_i_4__1_n_0 ,\ov_sum[20]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[22]_0 [21]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[22]_0 [22]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__1_n_4 ),
        .Q(ov_sum_reg_1),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__0_n_5 ),
        .Q(\ov_sum_reg[22]_0 [2]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__0_n_4 ),
        .Q(\ov_sum_reg[22]_0 [3]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__1_n_7 ),
        .Q(\ov_sum_reg[22]_0 [4]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__1 
       (.CI(\ov_sum_reg[0]_i_1__0_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__1_n_0 ,\ov_sum_reg[4]_i_1__1_n_1 ,\ov_sum_reg[4]_i_1__1_n_2 ,\ov_sum_reg[4]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__1_n_4 ,\ov_sum_reg[4]_i_1__1_n_5 ,\ov_sum_reg[4]_i_1__1_n_6 ,\ov_sum_reg[4]_i_1__1_n_7 }),
        .S({\ov_sum[4]_i_2__1_n_0 ,\ov_sum[4]_i_3__1_n_0 ,\ov_sum[4]_i_4__1_n_0 ,\ov_sum[4]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[22]_0 [5]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[22]_0 [6]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__1_n_4 ),
        .Q(\ov_sum_reg[22]_0 [7]),
        .R(\ov_sum_reg[23]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__1_n_7 ),
        .Q(\ov_sum_reg[22]_0 [8]),
        .R(\ov_sum_reg[23]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__1 
       (.CI(\ov_sum_reg[4]_i_1__1_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__1_n_0 ,\ov_sum_reg[8]_i_1__1_n_1 ,\ov_sum_reg[8]_i_1__1_n_2 ,\ov_sum_reg[8]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__1_n_4 ,\ov_sum_reg[8]_i_1__1_n_5 ,\ov_sum_reg[8]_i_1__1_n_6 ,\ov_sum_reg[8]_i_1__1_n_7 }),
        .S({\ov_sum[8]_i_2__1_n_0 ,\ov_sum[8]_i_3__1_n_0 ,\ov_sum[8]_i_4__1_n_0 ,\ov_sum[8]_i_5__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[22]_0 [9]),
        .R(\ov_sum_reg[23]_0 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_3
   (\ov_sum_reg[23]_0 ,
    DI,
    S,
    douta,
    ov_sum1_0,
    \ov_sum_reg[0]_0 ,
    tap_en,
    CLK,
    \ov_dout0_inferred__0/i___70_carry ,
    ov_sum_reg);
  output [22:0]\ov_sum_reg[23]_0 ;
  output [0:0]DI;
  output [1:0]S;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[0]_0 ;
  input tap_en;
  input CLK;
  input [1:0]\ov_dout0_inferred__0/i___70_carry ;
  input [1:0]ov_sum_reg;

  wire CLK;
  wire [0:0]DI;
  wire [1:0]S;
  wire [23:0]douta;
  wire [1:0]\ov_dout0_inferred__0/i___70_carry ;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__1_n_0 ;
  wire \ov_sum[0]_i_3__2_n_0 ;
  wire \ov_sum[0]_i_4__2_n_0 ;
  wire \ov_sum[0]_i_5__2_n_0 ;
  wire \ov_sum[12]_i_2__2_n_0 ;
  wire \ov_sum[12]_i_3__2_n_0 ;
  wire \ov_sum[12]_i_4__2_n_0 ;
  wire \ov_sum[12]_i_5__2_n_0 ;
  wire \ov_sum[16]_i_2__2_n_0 ;
  wire \ov_sum[16]_i_3__2_n_0 ;
  wire \ov_sum[16]_i_4__2_n_0 ;
  wire \ov_sum[16]_i_5__2_n_0 ;
  wire \ov_sum[20]_i_2__2_n_0 ;
  wire \ov_sum[20]_i_3__2_n_0 ;
  wire \ov_sum[20]_i_4__2_n_0 ;
  wire \ov_sum[20]_i_5__2_n_0 ;
  wire \ov_sum[4]_i_2__2_n_0 ;
  wire \ov_sum[4]_i_3__2_n_0 ;
  wire \ov_sum[4]_i_4__2_n_0 ;
  wire \ov_sum[4]_i_5__2_n_0 ;
  wire \ov_sum[8]_i_2__2_n_0 ;
  wire \ov_sum[8]_i_3__2_n_0 ;
  wire \ov_sum[8]_i_4__2_n_0 ;
  wire \ov_sum[8]_i_5__2_n_0 ;
  wire [1:0]ov_sum_reg;
  wire \ov_sum_reg[0]_0 ;
  wire \ov_sum_reg[0]_i_1__1_n_0 ;
  wire \ov_sum_reg[0]_i_1__1_n_1 ;
  wire \ov_sum_reg[0]_i_1__1_n_2 ;
  wire \ov_sum_reg[0]_i_1__1_n_3 ;
  wire \ov_sum_reg[0]_i_1__1_n_4 ;
  wire \ov_sum_reg[0]_i_1__1_n_5 ;
  wire \ov_sum_reg[0]_i_1__1_n_6 ;
  wire \ov_sum_reg[0]_i_1__1_n_7 ;
  wire \ov_sum_reg[12]_i_1__2_n_0 ;
  wire \ov_sum_reg[12]_i_1__2_n_1 ;
  wire \ov_sum_reg[12]_i_1__2_n_2 ;
  wire \ov_sum_reg[12]_i_1__2_n_3 ;
  wire \ov_sum_reg[12]_i_1__2_n_4 ;
  wire \ov_sum_reg[12]_i_1__2_n_5 ;
  wire \ov_sum_reg[12]_i_1__2_n_6 ;
  wire \ov_sum_reg[12]_i_1__2_n_7 ;
  wire \ov_sum_reg[16]_i_1__2_n_0 ;
  wire \ov_sum_reg[16]_i_1__2_n_1 ;
  wire \ov_sum_reg[16]_i_1__2_n_2 ;
  wire \ov_sum_reg[16]_i_1__2_n_3 ;
  wire \ov_sum_reg[16]_i_1__2_n_4 ;
  wire \ov_sum_reg[16]_i_1__2_n_5 ;
  wire \ov_sum_reg[16]_i_1__2_n_6 ;
  wire \ov_sum_reg[16]_i_1__2_n_7 ;
  wire \ov_sum_reg[20]_i_1__2_n_1 ;
  wire \ov_sum_reg[20]_i_1__2_n_2 ;
  wire \ov_sum_reg[20]_i_1__2_n_3 ;
  wire \ov_sum_reg[20]_i_1__2_n_4 ;
  wire \ov_sum_reg[20]_i_1__2_n_5 ;
  wire \ov_sum_reg[20]_i_1__2_n_6 ;
  wire \ov_sum_reg[20]_i_1__2_n_7 ;
  wire [22:0]\ov_sum_reg[23]_0 ;
  wire \ov_sum_reg[4]_i_1__2_n_0 ;
  wire \ov_sum_reg[4]_i_1__2_n_1 ;
  wire \ov_sum_reg[4]_i_1__2_n_2 ;
  wire \ov_sum_reg[4]_i_1__2_n_3 ;
  wire \ov_sum_reg[4]_i_1__2_n_4 ;
  wire \ov_sum_reg[4]_i_1__2_n_5 ;
  wire \ov_sum_reg[4]_i_1__2_n_6 ;
  wire \ov_sum_reg[4]_i_1__2_n_7 ;
  wire \ov_sum_reg[8]_i_1__2_n_0 ;
  wire \ov_sum_reg[8]_i_1__2_n_1 ;
  wire \ov_sum_reg[8]_i_1__2_n_2 ;
  wire \ov_sum_reg[8]_i_1__2_n_3 ;
  wire \ov_sum_reg[8]_i_1__2_n_4 ;
  wire \ov_sum_reg[8]_i_1__2_n_5 ;
  wire \ov_sum_reg[8]_i_1__2_n_6 ;
  wire \ov_sum_reg[8]_i_1__2_n_7 ;
  wire [0:0]ov_sum_reg_0;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__2_CO_UNCONNECTED ;

  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry_i_3
       (.I0(ov_sum_reg_0),
        .I1(\ov_dout0_inferred__0/i___70_carry [0]),
        .I2(ov_sum_reg[0]),
        .O(DI));
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry_i_6
       (.I0(ov_sum_reg[1]),
        .I1(\ov_dout0_inferred__0/i___70_carry [1]),
        .I2(\ov_sum_reg[23]_0 [0]),
        .I3(DI),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h96)) 
    i___70_carry_i_7
       (.I0(ov_sum_reg_0),
        .I1(\ov_dout0_inferred__0/i___70_carry [0]),
        .I2(ov_sum_reg[0]),
        .O(S[0]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__1 
       (.I0(ov_sum1__0_n_96),
        .I1(\ov_sum_reg[23]_0 [2]),
        .O(\ov_sum[0]_i_2__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__2 
       (.I0(ov_sum1__0_n_97),
        .I1(\ov_sum_reg[23]_0 [1]),
        .O(\ov_sum[0]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__2 
       (.I0(ov_sum1__0_n_98),
        .I1(\ov_sum_reg[23]_0 [0]),
        .O(\ov_sum[0]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__2 
       (.I0(ov_sum1__0_n_99),
        .I1(ov_sum_reg_0),
        .O(\ov_sum[0]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__2 
       (.I0(ov_sum1__0_n_84),
        .I1(\ov_sum_reg[23]_0 [14]),
        .O(\ov_sum[12]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__2 
       (.I0(ov_sum1__0_n_85),
        .I1(\ov_sum_reg[23]_0 [13]),
        .O(\ov_sum[12]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__2 
       (.I0(ov_sum1__0_n_86),
        .I1(\ov_sum_reg[23]_0 [12]),
        .O(\ov_sum[12]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__2 
       (.I0(ov_sum1__0_n_87),
        .I1(\ov_sum_reg[23]_0 [11]),
        .O(\ov_sum[12]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__2 
       (.I0(ov_sum1__0_n_80),
        .I1(\ov_sum_reg[23]_0 [18]),
        .O(\ov_sum[16]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__2 
       (.I0(ov_sum1__0_n_81),
        .I1(\ov_sum_reg[23]_0 [17]),
        .O(\ov_sum[16]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__2 
       (.I0(ov_sum1__0_n_82),
        .I1(\ov_sum_reg[23]_0 [16]),
        .O(\ov_sum[16]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__2 
       (.I0(ov_sum1__0_n_83),
        .I1(\ov_sum_reg[23]_0 [15]),
        .O(\ov_sum[16]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__2 
       (.I0(\ov_sum_reg[23]_0 [22]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__2 
       (.I0(ov_sum1__0_n_77),
        .I1(\ov_sum_reg[23]_0 [21]),
        .O(\ov_sum[20]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__2 
       (.I0(ov_sum1__0_n_78),
        .I1(\ov_sum_reg[23]_0 [20]),
        .O(\ov_sum[20]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__2 
       (.I0(ov_sum1__0_n_79),
        .I1(\ov_sum_reg[23]_0 [19]),
        .O(\ov_sum[20]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__2 
       (.I0(ov_sum1__0_n_92),
        .I1(\ov_sum_reg[23]_0 [6]),
        .O(\ov_sum[4]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__2 
       (.I0(ov_sum1__0_n_93),
        .I1(\ov_sum_reg[23]_0 [5]),
        .O(\ov_sum[4]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__2 
       (.I0(ov_sum1__0_n_94),
        .I1(\ov_sum_reg[23]_0 [4]),
        .O(\ov_sum[4]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__2 
       (.I0(ov_sum1__0_n_95),
        .I1(\ov_sum_reg[23]_0 [3]),
        .O(\ov_sum[4]_i_5__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__2 
       (.I0(ov_sum1__0_n_88),
        .I1(\ov_sum_reg[23]_0 [10]),
        .O(\ov_sum[8]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__2 
       (.I0(ov_sum1__0_n_89),
        .I1(\ov_sum_reg[23]_0 [9]),
        .O(\ov_sum[8]_i_3__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__2 
       (.I0(ov_sum1__0_n_90),
        .I1(\ov_sum_reg[23]_0 [8]),
        .O(\ov_sum[8]_i_4__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__2 
       (.I0(ov_sum1__0_n_91),
        .I1(\ov_sum_reg[23]_0 [7]),
        .O(\ov_sum[8]_i_5__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__1_n_7 ),
        .Q(ov_sum_reg_0),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__1 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__1_n_0 ,\ov_sum_reg[0]_i_1__1_n_1 ,\ov_sum_reg[0]_i_1__1_n_2 ,\ov_sum_reg[0]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1__1_n_4 ,\ov_sum_reg[0]_i_1__1_n_5 ,\ov_sum_reg[0]_i_1__1_n_6 ,\ov_sum_reg[0]_i_1__1_n_7 }),
        .S({\ov_sum[0]_i_2__1_n_0 ,\ov_sum[0]_i_3__2_n_0 ,\ov_sum[0]_i_4__2_n_0 ,\ov_sum[0]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [9]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [10]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [11]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__2 
       (.CI(\ov_sum_reg[8]_i_1__2_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__2_n_0 ,\ov_sum_reg[12]_i_1__2_n_1 ,\ov_sum_reg[12]_i_1__2_n_2 ,\ov_sum_reg[12]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__2_n_4 ,\ov_sum_reg[12]_i_1__2_n_5 ,\ov_sum_reg[12]_i_1__2_n_6 ,\ov_sum_reg[12]_i_1__2_n_7 }),
        .S({\ov_sum[12]_i_2__2_n_0 ,\ov_sum[12]_i_3__2_n_0 ,\ov_sum[12]_i_4__2_n_0 ,\ov_sum[12]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [12]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [13]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [14]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [15]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__2 
       (.CI(\ov_sum_reg[12]_i_1__2_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__2_n_0 ,\ov_sum_reg[16]_i_1__2_n_1 ,\ov_sum_reg[16]_i_1__2_n_2 ,\ov_sum_reg[16]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__2_n_4 ,\ov_sum_reg[16]_i_1__2_n_5 ,\ov_sum_reg[16]_i_1__2_n_6 ,\ov_sum_reg[16]_i_1__2_n_7 }),
        .S({\ov_sum[16]_i_2__2_n_0 ,\ov_sum[16]_i_3__2_n_0 ,\ov_sum[16]_i_4__2_n_0 ,\ov_sum[16]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [16]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [17]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [18]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__1_n_6 ),
        .Q(\ov_sum_reg[23]_0 [0]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [19]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__2 
       (.CI(\ov_sum_reg[16]_i_1__2_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__2_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__2_n_1 ,\ov_sum_reg[20]_i_1__2_n_2 ,\ov_sum_reg[20]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__2_n_4 ,\ov_sum_reg[20]_i_1__2_n_5 ,\ov_sum_reg[20]_i_1__2_n_6 ,\ov_sum_reg[20]_i_1__2_n_7 }),
        .S({\ov_sum[20]_i_2__2_n_0 ,\ov_sum[20]_i_3__2_n_0 ,\ov_sum[20]_i_4__2_n_0 ,\ov_sum[20]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [20]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [21]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [22]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__1_n_5 ),
        .Q(\ov_sum_reg[23]_0 [1]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__1_n_4 ),
        .Q(\ov_sum_reg[23]_0 [2]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [3]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__2 
       (.CI(\ov_sum_reg[0]_i_1__1_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__2_n_0 ,\ov_sum_reg[4]_i_1__2_n_1 ,\ov_sum_reg[4]_i_1__2_n_2 ,\ov_sum_reg[4]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__2_n_4 ,\ov_sum_reg[4]_i_1__2_n_5 ,\ov_sum_reg[4]_i_1__2_n_6 ,\ov_sum_reg[4]_i_1__2_n_7 }),
        .S({\ov_sum[4]_i_2__2_n_0 ,\ov_sum[4]_i_3__2_n_0 ,\ov_sum[4]_i_4__2_n_0 ,\ov_sum[4]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [4]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__2_n_5 ),
        .Q(\ov_sum_reg[23]_0 [5]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__2_n_4 ),
        .Q(\ov_sum_reg[23]_0 [6]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [7]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__2 
       (.CI(\ov_sum_reg[4]_i_1__2_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__2_n_0 ,\ov_sum_reg[8]_i_1__2_n_1 ,\ov_sum_reg[8]_i_1__2_n_2 ,\ov_sum_reg[8]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__2_n_4 ,\ov_sum_reg[8]_i_1__2_n_5 ,\ov_sum_reg[8]_i_1__2_n_6 ,\ov_sum_reg[8]_i_1__2_n_7 }),
        .S({\ov_sum[8]_i_2__2_n_0 ,\ov_sum[8]_i_3__2_n_0 ,\ov_sum[8]_i_4__2_n_0 ,\ov_sum[8]_i_5__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [8]),
        .R(\ov_sum_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_4
   (\ov_sum_reg[23]_0 ,
    S,
    DI,
    \ov_sum_reg[2]_0 ,
    \ov_sum_reg[3]_0 ,
    \ov_sum_reg[6]_0 ,
    \ov_sum_reg[7]_0 ,
    \ov_sum_reg[10]_0 ,
    \ov_sum_reg[11]_0 ,
    \ov_sum_reg[14]_0 ,
    \ov_sum_reg[15]_0 ,
    \ov_sum_reg[18]_0 ,
    \ov_sum_reg[19]_0 ,
    douta,
    ov_sum1_0,
    \ov_sum_reg[23]_1 ,
    tap_en,
    CLK,
    \ov_dout0_inferred__0/i___70_carry__4 ,
    \ov_dout0_inferred__0/i___70_carry__4_0 );
  output [3:0]\ov_sum_reg[23]_0 ;
  output [2:0]S;
  output [2:0]DI;
  output [1:0]\ov_sum_reg[2]_0 ;
  output [1:0]\ov_sum_reg[3]_0 ;
  output [3:0]\ov_sum_reg[6]_0 ;
  output [3:0]\ov_sum_reg[7]_0 ;
  output [3:0]\ov_sum_reg[10]_0 ;
  output [3:0]\ov_sum_reg[11]_0 ;
  output [3:0]\ov_sum_reg[14]_0 ;
  output [3:0]\ov_sum_reg[15]_0 ;
  output [3:0]\ov_sum_reg[18]_0 ;
  output [3:0]\ov_sum_reg[19]_0 ;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[23]_1 ;
  input tap_en;
  input CLK;
  input [21:0]\ov_dout0_inferred__0/i___70_carry__4 ;
  input [21:0]\ov_dout0_inferred__0/i___70_carry__4_0 ;

  wire CLK;
  wire [2:0]DI;
  wire [2:0]S;
  wire [23:0]douta;
  wire [21:0]\ov_dout0_inferred__0/i___70_carry__4 ;
  wire [21:0]\ov_dout0_inferred__0/i___70_carry__4_0 ;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__2_n_0 ;
  wire \ov_sum[0]_i_3__3_n_0 ;
  wire \ov_sum[0]_i_4__3_n_0 ;
  wire \ov_sum[0]_i_5__3_n_0 ;
  wire \ov_sum[12]_i_2__3_n_0 ;
  wire \ov_sum[12]_i_3__3_n_0 ;
  wire \ov_sum[12]_i_4__3_n_0 ;
  wire \ov_sum[12]_i_5__3_n_0 ;
  wire \ov_sum[16]_i_2__3_n_0 ;
  wire \ov_sum[16]_i_3__3_n_0 ;
  wire \ov_sum[16]_i_4__3_n_0 ;
  wire \ov_sum[16]_i_5__3_n_0 ;
  wire \ov_sum[20]_i_2__3_n_0 ;
  wire \ov_sum[20]_i_3__3_n_0 ;
  wire \ov_sum[20]_i_4__3_n_0 ;
  wire \ov_sum[20]_i_5__3_n_0 ;
  wire \ov_sum[4]_i_2__3_n_0 ;
  wire \ov_sum[4]_i_3__3_n_0 ;
  wire \ov_sum[4]_i_4__3_n_0 ;
  wire \ov_sum[4]_i_5__3_n_0 ;
  wire \ov_sum[8]_i_2__3_n_0 ;
  wire \ov_sum[8]_i_3__3_n_0 ;
  wire \ov_sum[8]_i_4__3_n_0 ;
  wire \ov_sum[8]_i_5__3_n_0 ;
  wire [21:2]ov_sum_reg;
  wire \ov_sum_reg[0]_i_1__2_n_0 ;
  wire \ov_sum_reg[0]_i_1__2_n_1 ;
  wire \ov_sum_reg[0]_i_1__2_n_2 ;
  wire \ov_sum_reg[0]_i_1__2_n_3 ;
  wire \ov_sum_reg[0]_i_1__2_n_4 ;
  wire \ov_sum_reg[0]_i_1__2_n_5 ;
  wire \ov_sum_reg[0]_i_1__2_n_6 ;
  wire \ov_sum_reg[0]_i_1__2_n_7 ;
  wire [3:0]\ov_sum_reg[10]_0 ;
  wire [3:0]\ov_sum_reg[11]_0 ;
  wire \ov_sum_reg[12]_i_1__3_n_0 ;
  wire \ov_sum_reg[12]_i_1__3_n_1 ;
  wire \ov_sum_reg[12]_i_1__3_n_2 ;
  wire \ov_sum_reg[12]_i_1__3_n_3 ;
  wire \ov_sum_reg[12]_i_1__3_n_4 ;
  wire \ov_sum_reg[12]_i_1__3_n_5 ;
  wire \ov_sum_reg[12]_i_1__3_n_6 ;
  wire \ov_sum_reg[12]_i_1__3_n_7 ;
  wire [3:0]\ov_sum_reg[14]_0 ;
  wire [3:0]\ov_sum_reg[15]_0 ;
  wire \ov_sum_reg[16]_i_1__3_n_0 ;
  wire \ov_sum_reg[16]_i_1__3_n_1 ;
  wire \ov_sum_reg[16]_i_1__3_n_2 ;
  wire \ov_sum_reg[16]_i_1__3_n_3 ;
  wire \ov_sum_reg[16]_i_1__3_n_4 ;
  wire \ov_sum_reg[16]_i_1__3_n_5 ;
  wire \ov_sum_reg[16]_i_1__3_n_6 ;
  wire \ov_sum_reg[16]_i_1__3_n_7 ;
  wire [3:0]\ov_sum_reg[18]_0 ;
  wire [3:0]\ov_sum_reg[19]_0 ;
  wire \ov_sum_reg[20]_i_1__3_n_1 ;
  wire \ov_sum_reg[20]_i_1__3_n_2 ;
  wire \ov_sum_reg[20]_i_1__3_n_3 ;
  wire \ov_sum_reg[20]_i_1__3_n_4 ;
  wire \ov_sum_reg[20]_i_1__3_n_5 ;
  wire \ov_sum_reg[20]_i_1__3_n_6 ;
  wire \ov_sum_reg[20]_i_1__3_n_7 ;
  wire [3:0]\ov_sum_reg[23]_0 ;
  wire \ov_sum_reg[23]_1 ;
  wire [1:0]\ov_sum_reg[2]_0 ;
  wire [1:0]\ov_sum_reg[3]_0 ;
  wire \ov_sum_reg[4]_i_1__3_n_0 ;
  wire \ov_sum_reg[4]_i_1__3_n_1 ;
  wire \ov_sum_reg[4]_i_1__3_n_2 ;
  wire \ov_sum_reg[4]_i_1__3_n_3 ;
  wire \ov_sum_reg[4]_i_1__3_n_4 ;
  wire \ov_sum_reg[4]_i_1__3_n_5 ;
  wire \ov_sum_reg[4]_i_1__3_n_6 ;
  wire \ov_sum_reg[4]_i_1__3_n_7 ;
  wire [3:0]\ov_sum_reg[6]_0 ;
  wire [3:0]\ov_sum_reg[7]_0 ;
  wire \ov_sum_reg[8]_i_1__3_n_0 ;
  wire \ov_sum_reg[8]_i_1__3_n_1 ;
  wire \ov_sum_reg[8]_i_1__3_n_2 ;
  wire \ov_sum_reg[8]_i_1__3_n_3 ;
  wire \ov_sum_reg[8]_i_1__3_n_4 ;
  wire \ov_sum_reg[8]_i_1__3_n_5 ;
  wire \ov_sum_reg[8]_i_1__3_n_6 ;
  wire \ov_sum_reg[8]_i_1__3_n_7 ;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__3_CO_UNCONNECTED ;

  (* HLUTNM = "lutpair24" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__0_i_1
       (.I0(ov_sum_reg[6]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [5]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [5]),
        .O(\ov_sum_reg[6]_0 [3]));
  (* HLUTNM = "lutpair23" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__0_i_2
       (.I0(ov_sum_reg[5]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [4]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [4]),
        .O(\ov_sum_reg[6]_0 [2]));
  (* HLUTNM = "lutpair22" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__0_i_3
       (.I0(ov_sum_reg[4]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [3]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [3]),
        .O(\ov_sum_reg[6]_0 [1]));
  (* HLUTNM = "lutpair21" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__0_i_4
       (.I0(ov_sum_reg[3]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [2]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [2]),
        .O(\ov_sum_reg[6]_0 [0]));
  (* HLUTNM = "lutpair25" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__0_i_5
       (.I0(ov_sum_reg[7]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [6]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [6]),
        .I3(\ov_sum_reg[6]_0 [3]),
        .O(\ov_sum_reg[7]_0 [3]));
  (* HLUTNM = "lutpair24" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__0_i_6
       (.I0(ov_sum_reg[6]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [5]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [5]),
        .I3(\ov_sum_reg[6]_0 [2]),
        .O(\ov_sum_reg[7]_0 [2]));
  (* HLUTNM = "lutpair23" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__0_i_7
       (.I0(ov_sum_reg[5]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [4]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [4]),
        .I3(\ov_sum_reg[6]_0 [1]),
        .O(\ov_sum_reg[7]_0 [1]));
  (* HLUTNM = "lutpair22" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__0_i_8
       (.I0(ov_sum_reg[4]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [3]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [3]),
        .I3(\ov_sum_reg[6]_0 [0]),
        .O(\ov_sum_reg[7]_0 [0]));
  (* HLUTNM = "lutpair28" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__1_i_1
       (.I0(ov_sum_reg[10]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [9]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [9]),
        .O(\ov_sum_reg[10]_0 [3]));
  (* HLUTNM = "lutpair27" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__1_i_2
       (.I0(ov_sum_reg[9]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [8]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [8]),
        .O(\ov_sum_reg[10]_0 [2]));
  (* HLUTNM = "lutpair26" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__1_i_3
       (.I0(ov_sum_reg[8]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [7]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [7]),
        .O(\ov_sum_reg[10]_0 [1]));
  (* HLUTNM = "lutpair25" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__1_i_4
       (.I0(ov_sum_reg[7]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [6]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [6]),
        .O(\ov_sum_reg[10]_0 [0]));
  (* HLUTNM = "lutpair29" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__1_i_5
       (.I0(ov_sum_reg[11]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [10]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [10]),
        .I3(\ov_sum_reg[10]_0 [3]),
        .O(\ov_sum_reg[11]_0 [3]));
  (* HLUTNM = "lutpair28" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__1_i_6
       (.I0(ov_sum_reg[10]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [9]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [9]),
        .I3(\ov_sum_reg[10]_0 [2]),
        .O(\ov_sum_reg[11]_0 [2]));
  (* HLUTNM = "lutpair27" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__1_i_7
       (.I0(ov_sum_reg[9]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [8]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [8]),
        .I3(\ov_sum_reg[10]_0 [1]),
        .O(\ov_sum_reg[11]_0 [1]));
  (* HLUTNM = "lutpair26" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__1_i_8
       (.I0(ov_sum_reg[8]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [7]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [7]),
        .I3(\ov_sum_reg[10]_0 [0]),
        .O(\ov_sum_reg[11]_0 [0]));
  (* HLUTNM = "lutpair32" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__2_i_1
       (.I0(ov_sum_reg[14]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [13]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [13]),
        .O(\ov_sum_reg[14]_0 [3]));
  (* HLUTNM = "lutpair31" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__2_i_2
       (.I0(ov_sum_reg[13]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [12]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [12]),
        .O(\ov_sum_reg[14]_0 [2]));
  (* HLUTNM = "lutpair30" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__2_i_3
       (.I0(ov_sum_reg[12]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [11]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [11]),
        .O(\ov_sum_reg[14]_0 [1]));
  (* HLUTNM = "lutpair29" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__2_i_4
       (.I0(ov_sum_reg[11]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [10]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [10]),
        .O(\ov_sum_reg[14]_0 [0]));
  (* HLUTNM = "lutpair33" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__2_i_5
       (.I0(ov_sum_reg[15]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [14]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [14]),
        .I3(\ov_sum_reg[14]_0 [3]),
        .O(\ov_sum_reg[15]_0 [3]));
  (* HLUTNM = "lutpair32" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__2_i_6
       (.I0(ov_sum_reg[14]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [13]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [13]),
        .I3(\ov_sum_reg[14]_0 [2]),
        .O(\ov_sum_reg[15]_0 [2]));
  (* HLUTNM = "lutpair31" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__2_i_7
       (.I0(ov_sum_reg[13]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [12]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [12]),
        .I3(\ov_sum_reg[14]_0 [1]),
        .O(\ov_sum_reg[15]_0 [1]));
  (* HLUTNM = "lutpair30" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__2_i_8
       (.I0(ov_sum_reg[12]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [11]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [11]),
        .I3(\ov_sum_reg[14]_0 [0]),
        .O(\ov_sum_reg[15]_0 [0]));
  (* HLUTNM = "lutpair36" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__3_i_1
       (.I0(ov_sum_reg[18]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [17]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [17]),
        .O(\ov_sum_reg[18]_0 [3]));
  (* HLUTNM = "lutpair35" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__3_i_2
       (.I0(ov_sum_reg[17]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [16]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [16]),
        .O(\ov_sum_reg[18]_0 [2]));
  (* HLUTNM = "lutpair34" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__3_i_3
       (.I0(ov_sum_reg[16]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [15]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [15]),
        .O(\ov_sum_reg[18]_0 [1]));
  (* HLUTNM = "lutpair33" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__3_i_4
       (.I0(ov_sum_reg[15]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [14]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [14]),
        .O(\ov_sum_reg[18]_0 [0]));
  (* HLUTNM = "lutpair37" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__3_i_5
       (.I0(ov_sum_reg[19]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [18]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [18]),
        .I3(\ov_sum_reg[18]_0 [3]),
        .O(\ov_sum_reg[19]_0 [3]));
  (* HLUTNM = "lutpair36" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__3_i_6
       (.I0(ov_sum_reg[18]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [17]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [17]),
        .I3(\ov_sum_reg[18]_0 [2]),
        .O(\ov_sum_reg[19]_0 [2]));
  (* HLUTNM = "lutpair35" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__3_i_7
       (.I0(ov_sum_reg[17]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [16]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [16]),
        .I3(\ov_sum_reg[18]_0 [1]),
        .O(\ov_sum_reg[19]_0 [1]));
  (* HLUTNM = "lutpair34" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__3_i_8
       (.I0(ov_sum_reg[16]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [15]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [15]),
        .I3(\ov_sum_reg[18]_0 [0]),
        .O(\ov_sum_reg[19]_0 [0]));
  (* HLUTNM = "lutpair39" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__4_i_1
       (.I0(ov_sum_reg[21]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [20]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [20]),
        .O(DI[2]));
  (* HLUTNM = "lutpair38" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__4_i_2
       (.I0(ov_sum_reg[20]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [19]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [19]),
        .O(DI[1]));
  (* HLUTNM = "lutpair37" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry__4_i_3
       (.I0(ov_sum_reg[19]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [18]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [18]),
        .O(DI[0]));
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__4_i_5
       (.I0(DI[2]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4 [21]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4_0 [21]),
        .I3(\ov_sum_reg[23]_0 [2]),
        .O(S[2]));
  (* HLUTNM = "lutpair39" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__4_i_6
       (.I0(ov_sum_reg[21]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [20]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [20]),
        .I3(DI[1]),
        .O(S[1]));
  (* HLUTNM = "lutpair38" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry__4_i_7
       (.I0(ov_sum_reg[20]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [19]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [19]),
        .I3(DI[0]),
        .O(S[0]));
  (* HLUTNM = "lutpair20" *) 
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry_i_1
       (.I0(ov_sum_reg[2]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [1]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [1]),
        .O(\ov_sum_reg[2]_0 [1]));
  LUT3 #(
    .INIT(8'hE8)) 
    i___70_carry_i_2
       (.I0(\ov_sum_reg[23]_0 [1]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [0]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [0]),
        .O(\ov_sum_reg[2]_0 [0]));
  (* HLUTNM = "lutpair21" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry_i_4
       (.I0(ov_sum_reg[3]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [2]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [2]),
        .I3(\ov_sum_reg[2]_0 [1]),
        .O(\ov_sum_reg[3]_0 [1]));
  (* HLUTNM = "lutpair20" *) 
  LUT4 #(
    .INIT(16'h6996)) 
    i___70_carry_i_5
       (.I0(ov_sum_reg[2]),
        .I1(\ov_dout0_inferred__0/i___70_carry__4_0 [1]),
        .I2(\ov_dout0_inferred__0/i___70_carry__4 [1]),
        .I3(\ov_sum_reg[2]_0 [0]),
        .O(\ov_sum_reg[3]_0 [0]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__2 
       (.I0(ov_sum1__0_n_96),
        .I1(ov_sum_reg[3]),
        .O(\ov_sum[0]_i_2__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__3 
       (.I0(ov_sum1__0_n_97),
        .I1(ov_sum_reg[2]),
        .O(\ov_sum[0]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__3 
       (.I0(ov_sum1__0_n_98),
        .I1(\ov_sum_reg[23]_0 [1]),
        .O(\ov_sum[0]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__3 
       (.I0(ov_sum1__0_n_99),
        .I1(\ov_sum_reg[23]_0 [0]),
        .O(\ov_sum[0]_i_5__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__3 
       (.I0(ov_sum1__0_n_84),
        .I1(ov_sum_reg[15]),
        .O(\ov_sum[12]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__3 
       (.I0(ov_sum1__0_n_85),
        .I1(ov_sum_reg[14]),
        .O(\ov_sum[12]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__3 
       (.I0(ov_sum1__0_n_86),
        .I1(ov_sum_reg[13]),
        .O(\ov_sum[12]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__3 
       (.I0(ov_sum1__0_n_87),
        .I1(ov_sum_reg[12]),
        .O(\ov_sum[12]_i_5__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__3 
       (.I0(ov_sum1__0_n_80),
        .I1(ov_sum_reg[19]),
        .O(\ov_sum[16]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__3 
       (.I0(ov_sum1__0_n_81),
        .I1(ov_sum_reg[18]),
        .O(\ov_sum[16]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__3 
       (.I0(ov_sum1__0_n_82),
        .I1(ov_sum_reg[17]),
        .O(\ov_sum[16]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__3 
       (.I0(ov_sum1__0_n_83),
        .I1(ov_sum_reg[16]),
        .O(\ov_sum[16]_i_5__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__3 
       (.I0(\ov_sum_reg[23]_0 [3]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__3 
       (.I0(ov_sum1__0_n_77),
        .I1(\ov_sum_reg[23]_0 [2]),
        .O(\ov_sum[20]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__3 
       (.I0(ov_sum1__0_n_78),
        .I1(ov_sum_reg[21]),
        .O(\ov_sum[20]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__3 
       (.I0(ov_sum1__0_n_79),
        .I1(ov_sum_reg[20]),
        .O(\ov_sum[20]_i_5__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__3 
       (.I0(ov_sum1__0_n_92),
        .I1(ov_sum_reg[7]),
        .O(\ov_sum[4]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__3 
       (.I0(ov_sum1__0_n_93),
        .I1(ov_sum_reg[6]),
        .O(\ov_sum[4]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__3 
       (.I0(ov_sum1__0_n_94),
        .I1(ov_sum_reg[5]),
        .O(\ov_sum[4]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__3 
       (.I0(ov_sum1__0_n_95),
        .I1(ov_sum_reg[4]),
        .O(\ov_sum[4]_i_5__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__3 
       (.I0(ov_sum1__0_n_88),
        .I1(ov_sum_reg[11]),
        .O(\ov_sum[8]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__3 
       (.I0(ov_sum1__0_n_89),
        .I1(ov_sum_reg[10]),
        .O(\ov_sum[8]_i_3__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__3 
       (.I0(ov_sum1__0_n_90),
        .I1(ov_sum_reg[9]),
        .O(\ov_sum[8]_i_4__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__3 
       (.I0(ov_sum1__0_n_91),
        .I1(ov_sum_reg[8]),
        .O(\ov_sum[8]_i_5__3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__2_n_7 ),
        .Q(\ov_sum_reg[23]_0 [0]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__2 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__2_n_0 ,\ov_sum_reg[0]_i_1__2_n_1 ,\ov_sum_reg[0]_i_1__2_n_2 ,\ov_sum_reg[0]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1__2_n_4 ,\ov_sum_reg[0]_i_1__2_n_5 ,\ov_sum_reg[0]_i_1__2_n_6 ,\ov_sum_reg[0]_i_1__2_n_7 }),
        .S({\ov_sum[0]_i_2__2_n_0 ,\ov_sum[0]_i_3__3_n_0 ,\ov_sum[0]_i_4__3_n_0 ,\ov_sum[0]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__3_n_5 ),
        .Q(ov_sum_reg[10]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__3_n_4 ),
        .Q(ov_sum_reg[11]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__3_n_7 ),
        .Q(ov_sum_reg[12]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__3 
       (.CI(\ov_sum_reg[8]_i_1__3_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__3_n_0 ,\ov_sum_reg[12]_i_1__3_n_1 ,\ov_sum_reg[12]_i_1__3_n_2 ,\ov_sum_reg[12]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__3_n_4 ,\ov_sum_reg[12]_i_1__3_n_5 ,\ov_sum_reg[12]_i_1__3_n_6 ,\ov_sum_reg[12]_i_1__3_n_7 }),
        .S({\ov_sum[12]_i_2__3_n_0 ,\ov_sum[12]_i_3__3_n_0 ,\ov_sum[12]_i_4__3_n_0 ,\ov_sum[12]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__3_n_6 ),
        .Q(ov_sum_reg[13]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__3_n_5 ),
        .Q(ov_sum_reg[14]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__3_n_4 ),
        .Q(ov_sum_reg[15]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__3_n_7 ),
        .Q(ov_sum_reg[16]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__3 
       (.CI(\ov_sum_reg[12]_i_1__3_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__3_n_0 ,\ov_sum_reg[16]_i_1__3_n_1 ,\ov_sum_reg[16]_i_1__3_n_2 ,\ov_sum_reg[16]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__3_n_4 ,\ov_sum_reg[16]_i_1__3_n_5 ,\ov_sum_reg[16]_i_1__3_n_6 ,\ov_sum_reg[16]_i_1__3_n_7 }),
        .S({\ov_sum[16]_i_2__3_n_0 ,\ov_sum[16]_i_3__3_n_0 ,\ov_sum[16]_i_4__3_n_0 ,\ov_sum[16]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__3_n_6 ),
        .Q(ov_sum_reg[17]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__3_n_5 ),
        .Q(ov_sum_reg[18]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__3_n_4 ),
        .Q(ov_sum_reg[19]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__2_n_6 ),
        .Q(\ov_sum_reg[23]_0 [1]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__3_n_7 ),
        .Q(ov_sum_reg[20]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__3 
       (.CI(\ov_sum_reg[16]_i_1__3_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__3_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__3_n_1 ,\ov_sum_reg[20]_i_1__3_n_2 ,\ov_sum_reg[20]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__3_n_4 ,\ov_sum_reg[20]_i_1__3_n_5 ,\ov_sum_reg[20]_i_1__3_n_6 ,\ov_sum_reg[20]_i_1__3_n_7 }),
        .S({\ov_sum[20]_i_2__3_n_0 ,\ov_sum[20]_i_3__3_n_0 ,\ov_sum[20]_i_4__3_n_0 ,\ov_sum[20]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__3_n_6 ),
        .Q(ov_sum_reg[21]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__3_n_5 ),
        .Q(\ov_sum_reg[23]_0 [2]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__3_n_4 ),
        .Q(\ov_sum_reg[23]_0 [3]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__2_n_5 ),
        .Q(ov_sum_reg[2]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__2_n_4 ),
        .Q(ov_sum_reg[3]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__3_n_7 ),
        .Q(ov_sum_reg[4]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__3 
       (.CI(\ov_sum_reg[0]_i_1__2_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__3_n_0 ,\ov_sum_reg[4]_i_1__3_n_1 ,\ov_sum_reg[4]_i_1__3_n_2 ,\ov_sum_reg[4]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__3_n_4 ,\ov_sum_reg[4]_i_1__3_n_5 ,\ov_sum_reg[4]_i_1__3_n_6 ,\ov_sum_reg[4]_i_1__3_n_7 }),
        .S({\ov_sum[4]_i_2__3_n_0 ,\ov_sum[4]_i_3__3_n_0 ,\ov_sum[4]_i_4__3_n_0 ,\ov_sum[4]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__3_n_6 ),
        .Q(ov_sum_reg[5]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__3_n_5 ),
        .Q(ov_sum_reg[6]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__3_n_4 ),
        .Q(ov_sum_reg[7]),
        .R(\ov_sum_reg[23]_1 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__3_n_7 ),
        .Q(ov_sum_reg[8]),
        .R(\ov_sum_reg[23]_1 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__3 
       (.CI(\ov_sum_reg[4]_i_1__3_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__3_n_0 ,\ov_sum_reg[8]_i_1__3_n_1 ,\ov_sum_reg[8]_i_1__3_n_2 ,\ov_sum_reg[8]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__3_n_4 ,\ov_sum_reg[8]_i_1__3_n_5 ,\ov_sum_reg[8]_i_1__3_n_6 ,\ov_sum_reg[8]_i_1__3_n_7 }),
        .S({\ov_sum[8]_i_2__3_n_0 ,\ov_sum[8]_i_3__3_n_0 ,\ov_sum[8]_i_4__3_n_0 ,\ov_sum[8]_i_5__3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__3_n_6 ),
        .Q(ov_sum_reg[9]),
        .R(\ov_sum_reg[23]_1 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_5
   (ov_sum_reg,
    douta,
    ov_sum1_0,
    \ov_sum_reg[0]_0 ,
    tap_en,
    CLK);
  output [23:0]ov_sum_reg;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input \ov_sum_reg[0]_0 ;
  input tap_en;
  input CLK;

  wire CLK;
  wire [23:0]douta;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__3_n_0 ;
  wire \ov_sum[0]_i_3__4_n_0 ;
  wire \ov_sum[0]_i_4__4_n_0 ;
  wire \ov_sum[0]_i_5__4_n_0 ;
  wire \ov_sum[12]_i_2__4_n_0 ;
  wire \ov_sum[12]_i_3__4_n_0 ;
  wire \ov_sum[12]_i_4__4_n_0 ;
  wire \ov_sum[12]_i_5__4_n_0 ;
  wire \ov_sum[16]_i_2__4_n_0 ;
  wire \ov_sum[16]_i_3__4_n_0 ;
  wire \ov_sum[16]_i_4__4_n_0 ;
  wire \ov_sum[16]_i_5__4_n_0 ;
  wire \ov_sum[20]_i_2__4_n_0 ;
  wire \ov_sum[20]_i_3__4_n_0 ;
  wire \ov_sum[20]_i_4__4_n_0 ;
  wire \ov_sum[20]_i_5__4_n_0 ;
  wire \ov_sum[4]_i_2__4_n_0 ;
  wire \ov_sum[4]_i_3__4_n_0 ;
  wire \ov_sum[4]_i_4__4_n_0 ;
  wire \ov_sum[4]_i_5__4_n_0 ;
  wire \ov_sum[8]_i_2__4_n_0 ;
  wire \ov_sum[8]_i_3__4_n_0 ;
  wire \ov_sum[8]_i_4__4_n_0 ;
  wire \ov_sum[8]_i_5__4_n_0 ;
  wire [23:0]ov_sum_reg;
  wire \ov_sum_reg[0]_0 ;
  wire \ov_sum_reg[0]_i_1__3_n_0 ;
  wire \ov_sum_reg[0]_i_1__3_n_1 ;
  wire \ov_sum_reg[0]_i_1__3_n_2 ;
  wire \ov_sum_reg[0]_i_1__3_n_3 ;
  wire \ov_sum_reg[0]_i_1__3_n_4 ;
  wire \ov_sum_reg[0]_i_1__3_n_5 ;
  wire \ov_sum_reg[0]_i_1__3_n_6 ;
  wire \ov_sum_reg[0]_i_1__3_n_7 ;
  wire \ov_sum_reg[12]_i_1__4_n_0 ;
  wire \ov_sum_reg[12]_i_1__4_n_1 ;
  wire \ov_sum_reg[12]_i_1__4_n_2 ;
  wire \ov_sum_reg[12]_i_1__4_n_3 ;
  wire \ov_sum_reg[12]_i_1__4_n_4 ;
  wire \ov_sum_reg[12]_i_1__4_n_5 ;
  wire \ov_sum_reg[12]_i_1__4_n_6 ;
  wire \ov_sum_reg[12]_i_1__4_n_7 ;
  wire \ov_sum_reg[16]_i_1__4_n_0 ;
  wire \ov_sum_reg[16]_i_1__4_n_1 ;
  wire \ov_sum_reg[16]_i_1__4_n_2 ;
  wire \ov_sum_reg[16]_i_1__4_n_3 ;
  wire \ov_sum_reg[16]_i_1__4_n_4 ;
  wire \ov_sum_reg[16]_i_1__4_n_5 ;
  wire \ov_sum_reg[16]_i_1__4_n_6 ;
  wire \ov_sum_reg[16]_i_1__4_n_7 ;
  wire \ov_sum_reg[20]_i_1__4_n_1 ;
  wire \ov_sum_reg[20]_i_1__4_n_2 ;
  wire \ov_sum_reg[20]_i_1__4_n_3 ;
  wire \ov_sum_reg[20]_i_1__4_n_4 ;
  wire \ov_sum_reg[20]_i_1__4_n_5 ;
  wire \ov_sum_reg[20]_i_1__4_n_6 ;
  wire \ov_sum_reg[20]_i_1__4_n_7 ;
  wire \ov_sum_reg[4]_i_1__4_n_0 ;
  wire \ov_sum_reg[4]_i_1__4_n_1 ;
  wire \ov_sum_reg[4]_i_1__4_n_2 ;
  wire \ov_sum_reg[4]_i_1__4_n_3 ;
  wire \ov_sum_reg[4]_i_1__4_n_4 ;
  wire \ov_sum_reg[4]_i_1__4_n_5 ;
  wire \ov_sum_reg[4]_i_1__4_n_6 ;
  wire \ov_sum_reg[4]_i_1__4_n_7 ;
  wire \ov_sum_reg[8]_i_1__4_n_0 ;
  wire \ov_sum_reg[8]_i_1__4_n_1 ;
  wire \ov_sum_reg[8]_i_1__4_n_2 ;
  wire \ov_sum_reg[8]_i_1__4_n_3 ;
  wire \ov_sum_reg[8]_i_1__4_n_4 ;
  wire \ov_sum_reg[8]_i_1__4_n_5 ;
  wire \ov_sum_reg[8]_i_1__4_n_6 ;
  wire \ov_sum_reg[8]_i_1__4_n_7 ;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__4_CO_UNCONNECTED ;

  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__3 
       (.I0(ov_sum1__0_n_96),
        .I1(ov_sum_reg[3]),
        .O(\ov_sum[0]_i_2__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__4 
       (.I0(ov_sum1__0_n_97),
        .I1(ov_sum_reg[2]),
        .O(\ov_sum[0]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__4 
       (.I0(ov_sum1__0_n_98),
        .I1(ov_sum_reg[1]),
        .O(\ov_sum[0]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__4 
       (.I0(ov_sum1__0_n_99),
        .I1(ov_sum_reg[0]),
        .O(\ov_sum[0]_i_5__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__4 
       (.I0(ov_sum1__0_n_84),
        .I1(ov_sum_reg[15]),
        .O(\ov_sum[12]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__4 
       (.I0(ov_sum1__0_n_85),
        .I1(ov_sum_reg[14]),
        .O(\ov_sum[12]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__4 
       (.I0(ov_sum1__0_n_86),
        .I1(ov_sum_reg[13]),
        .O(\ov_sum[12]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__4 
       (.I0(ov_sum1__0_n_87),
        .I1(ov_sum_reg[12]),
        .O(\ov_sum[12]_i_5__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__4 
       (.I0(ov_sum1__0_n_80),
        .I1(ov_sum_reg[19]),
        .O(\ov_sum[16]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__4 
       (.I0(ov_sum1__0_n_81),
        .I1(ov_sum_reg[18]),
        .O(\ov_sum[16]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__4 
       (.I0(ov_sum1__0_n_82),
        .I1(ov_sum_reg[17]),
        .O(\ov_sum[16]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__4 
       (.I0(ov_sum1__0_n_83),
        .I1(ov_sum_reg[16]),
        .O(\ov_sum[16]_i_5__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__4 
       (.I0(ov_sum_reg[23]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__4 
       (.I0(ov_sum1__0_n_77),
        .I1(ov_sum_reg[22]),
        .O(\ov_sum[20]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__4 
       (.I0(ov_sum1__0_n_78),
        .I1(ov_sum_reg[21]),
        .O(\ov_sum[20]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__4 
       (.I0(ov_sum1__0_n_79),
        .I1(ov_sum_reg[20]),
        .O(\ov_sum[20]_i_5__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__4 
       (.I0(ov_sum1__0_n_92),
        .I1(ov_sum_reg[7]),
        .O(\ov_sum[4]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__4 
       (.I0(ov_sum1__0_n_93),
        .I1(ov_sum_reg[6]),
        .O(\ov_sum[4]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__4 
       (.I0(ov_sum1__0_n_94),
        .I1(ov_sum_reg[5]),
        .O(\ov_sum[4]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__4 
       (.I0(ov_sum1__0_n_95),
        .I1(ov_sum_reg[4]),
        .O(\ov_sum[4]_i_5__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__4 
       (.I0(ov_sum1__0_n_88),
        .I1(ov_sum_reg[11]),
        .O(\ov_sum[8]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__4 
       (.I0(ov_sum1__0_n_89),
        .I1(ov_sum_reg[10]),
        .O(\ov_sum[8]_i_3__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__4 
       (.I0(ov_sum1__0_n_90),
        .I1(ov_sum_reg[9]),
        .O(\ov_sum[8]_i_4__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__4 
       (.I0(ov_sum1__0_n_91),
        .I1(ov_sum_reg[8]),
        .O(\ov_sum[8]_i_5__4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__3_n_7 ),
        .Q(ov_sum_reg[0]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__3 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__3_n_0 ,\ov_sum_reg[0]_i_1__3_n_1 ,\ov_sum_reg[0]_i_1__3_n_2 ,\ov_sum_reg[0]_i_1__3_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1__3_n_4 ,\ov_sum_reg[0]_i_1__3_n_5 ,\ov_sum_reg[0]_i_1__3_n_6 ,\ov_sum_reg[0]_i_1__3_n_7 }),
        .S({\ov_sum[0]_i_2__3_n_0 ,\ov_sum[0]_i_3__4_n_0 ,\ov_sum[0]_i_4__4_n_0 ,\ov_sum[0]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__4_n_5 ),
        .Q(ov_sum_reg[10]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__4_n_4 ),
        .Q(ov_sum_reg[11]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__4_n_7 ),
        .Q(ov_sum_reg[12]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__4 
       (.CI(\ov_sum_reg[8]_i_1__4_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__4_n_0 ,\ov_sum_reg[12]_i_1__4_n_1 ,\ov_sum_reg[12]_i_1__4_n_2 ,\ov_sum_reg[12]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__4_n_4 ,\ov_sum_reg[12]_i_1__4_n_5 ,\ov_sum_reg[12]_i_1__4_n_6 ,\ov_sum_reg[12]_i_1__4_n_7 }),
        .S({\ov_sum[12]_i_2__4_n_0 ,\ov_sum[12]_i_3__4_n_0 ,\ov_sum[12]_i_4__4_n_0 ,\ov_sum[12]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__4_n_6 ),
        .Q(ov_sum_reg[13]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__4_n_5 ),
        .Q(ov_sum_reg[14]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__4_n_4 ),
        .Q(ov_sum_reg[15]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__4_n_7 ),
        .Q(ov_sum_reg[16]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__4 
       (.CI(\ov_sum_reg[12]_i_1__4_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__4_n_0 ,\ov_sum_reg[16]_i_1__4_n_1 ,\ov_sum_reg[16]_i_1__4_n_2 ,\ov_sum_reg[16]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__4_n_4 ,\ov_sum_reg[16]_i_1__4_n_5 ,\ov_sum_reg[16]_i_1__4_n_6 ,\ov_sum_reg[16]_i_1__4_n_7 }),
        .S({\ov_sum[16]_i_2__4_n_0 ,\ov_sum[16]_i_3__4_n_0 ,\ov_sum[16]_i_4__4_n_0 ,\ov_sum[16]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__4_n_6 ),
        .Q(ov_sum_reg[17]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__4_n_5 ),
        .Q(ov_sum_reg[18]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__4_n_4 ),
        .Q(ov_sum_reg[19]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__3_n_6 ),
        .Q(ov_sum_reg[1]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__4_n_7 ),
        .Q(ov_sum_reg[20]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__4 
       (.CI(\ov_sum_reg[16]_i_1__4_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__4_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__4_n_1 ,\ov_sum_reg[20]_i_1__4_n_2 ,\ov_sum_reg[20]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__4_n_4 ,\ov_sum_reg[20]_i_1__4_n_5 ,\ov_sum_reg[20]_i_1__4_n_6 ,\ov_sum_reg[20]_i_1__4_n_7 }),
        .S({\ov_sum[20]_i_2__4_n_0 ,\ov_sum[20]_i_3__4_n_0 ,\ov_sum[20]_i_4__4_n_0 ,\ov_sum[20]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__4_n_6 ),
        .Q(ov_sum_reg[21]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__4_n_5 ),
        .Q(ov_sum_reg[22]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__4_n_4 ),
        .Q(ov_sum_reg[23]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__3_n_5 ),
        .Q(ov_sum_reg[2]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__3_n_4 ),
        .Q(ov_sum_reg[3]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__4_n_7 ),
        .Q(ov_sum_reg[4]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__4 
       (.CI(\ov_sum_reg[0]_i_1__3_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__4_n_0 ,\ov_sum_reg[4]_i_1__4_n_1 ,\ov_sum_reg[4]_i_1__4_n_2 ,\ov_sum_reg[4]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__4_n_4 ,\ov_sum_reg[4]_i_1__4_n_5 ,\ov_sum_reg[4]_i_1__4_n_6 ,\ov_sum_reg[4]_i_1__4_n_7 }),
        .S({\ov_sum[4]_i_2__4_n_0 ,\ov_sum[4]_i_3__4_n_0 ,\ov_sum[4]_i_4__4_n_0 ,\ov_sum[4]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__4_n_6 ),
        .Q(ov_sum_reg[5]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__4_n_5 ),
        .Q(ov_sum_reg[6]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__4_n_4 ),
        .Q(ov_sum_reg[7]),
        .R(\ov_sum_reg[0]_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__4_n_7 ),
        .Q(ov_sum_reg[8]),
        .R(\ov_sum_reg[0]_0 ));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__4 
       (.CI(\ov_sum_reg[4]_i_1__4_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__4_n_0 ,\ov_sum_reg[8]_i_1__4_n_1 ,\ov_sum_reg[8]_i_1__4_n_2 ,\ov_sum_reg[8]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__4_n_4 ,\ov_sum_reg[8]_i_1__4_n_5 ,\ov_sum_reg[8]_i_1__4_n_6 ,\ov_sum_reg[8]_i_1__4_n_7 }),
        .S({\ov_sum[8]_i_2__4_n_0 ,\ov_sum[8]_i_3__4_n_0 ,\ov_sum[8]_i_4__4_n_0 ,\ov_sum[8]_i_5__4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__4_n_6 ),
        .Q(ov_sum_reg[9]),
        .R(\ov_sum_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "tap_transposed" *) 
module tap_transposed_6
   (\ov_sum_reg[22]_0 ,
    sum_rst_reg,
    S,
    DI,
    \ov_sum_reg[1]_0 ,
    douta,
    ov_sum1_0,
    tap_en,
    CLK,
    i_rst_IBUF,
    sum_rst,
    ov_sum_reg,
    \ov_dout0_inferred__0/i___0_carry__4 );
  output [21:0]\ov_sum_reg[22]_0 ;
  output sum_rst_reg;
  output [0:0]S;
  output [0:0]DI;
  output [1:0]\ov_sum_reg[1]_0 ;
  input [23:0]douta;
  input [23:0]ov_sum1_0;
  input tap_en;
  input CLK;
  input i_rst_IBUF;
  input sum_rst;
  input [3:0]ov_sum_reg;
  input [3:0]\ov_dout0_inferred__0/i___0_carry__4 ;

  wire CLK;
  wire [0:0]DI;
  wire [0:0]S;
  wire [23:0]douta;
  wire i_rst_IBUF;
  wire [3:0]\ov_dout0_inferred__0/i___0_carry__4 ;
  wire [23:0]ov_sum1_0;
  wire ov_sum1__0_n_100;
  wire ov_sum1__0_n_101;
  wire ov_sum1__0_n_102;
  wire ov_sum1__0_n_103;
  wire ov_sum1__0_n_104;
  wire ov_sum1__0_n_105;
  wire ov_sum1__0_n_76;
  wire ov_sum1__0_n_77;
  wire ov_sum1__0_n_78;
  wire ov_sum1__0_n_79;
  wire ov_sum1__0_n_80;
  wire ov_sum1__0_n_81;
  wire ov_sum1__0_n_82;
  wire ov_sum1__0_n_83;
  wire ov_sum1__0_n_84;
  wire ov_sum1__0_n_85;
  wire ov_sum1__0_n_86;
  wire ov_sum1__0_n_87;
  wire ov_sum1__0_n_88;
  wire ov_sum1__0_n_89;
  wire ov_sum1__0_n_90;
  wire ov_sum1__0_n_91;
  wire ov_sum1__0_n_92;
  wire ov_sum1__0_n_93;
  wire ov_sum1__0_n_94;
  wire ov_sum1__0_n_95;
  wire ov_sum1__0_n_96;
  wire ov_sum1__0_n_97;
  wire ov_sum1__0_n_98;
  wire ov_sum1__0_n_99;
  wire ov_sum1_n_100;
  wire ov_sum1_n_101;
  wire ov_sum1_n_102;
  wire ov_sum1_n_103;
  wire ov_sum1_n_104;
  wire ov_sum1_n_105;
  wire ov_sum1_n_106;
  wire ov_sum1_n_107;
  wire ov_sum1_n_108;
  wire ov_sum1_n_109;
  wire ov_sum1_n_110;
  wire ov_sum1_n_111;
  wire ov_sum1_n_112;
  wire ov_sum1_n_113;
  wire ov_sum1_n_114;
  wire ov_sum1_n_115;
  wire ov_sum1_n_116;
  wire ov_sum1_n_117;
  wire ov_sum1_n_118;
  wire ov_sum1_n_119;
  wire ov_sum1_n_120;
  wire ov_sum1_n_121;
  wire ov_sum1_n_122;
  wire ov_sum1_n_123;
  wire ov_sum1_n_124;
  wire ov_sum1_n_125;
  wire ov_sum1_n_126;
  wire ov_sum1_n_127;
  wire ov_sum1_n_128;
  wire ov_sum1_n_129;
  wire ov_sum1_n_130;
  wire ov_sum1_n_131;
  wire ov_sum1_n_132;
  wire ov_sum1_n_133;
  wire ov_sum1_n_134;
  wire ov_sum1_n_135;
  wire ov_sum1_n_136;
  wire ov_sum1_n_137;
  wire ov_sum1_n_138;
  wire ov_sum1_n_139;
  wire ov_sum1_n_140;
  wire ov_sum1_n_141;
  wire ov_sum1_n_142;
  wire ov_sum1_n_143;
  wire ov_sum1_n_144;
  wire ov_sum1_n_145;
  wire ov_sum1_n_146;
  wire ov_sum1_n_147;
  wire ov_sum1_n_148;
  wire ov_sum1_n_149;
  wire ov_sum1_n_150;
  wire ov_sum1_n_151;
  wire ov_sum1_n_152;
  wire ov_sum1_n_153;
  wire ov_sum1_n_58;
  wire ov_sum1_n_59;
  wire ov_sum1_n_60;
  wire ov_sum1_n_61;
  wire ov_sum1_n_62;
  wire ov_sum1_n_63;
  wire ov_sum1_n_64;
  wire ov_sum1_n_65;
  wire ov_sum1_n_66;
  wire ov_sum1_n_67;
  wire ov_sum1_n_68;
  wire ov_sum1_n_69;
  wire ov_sum1_n_70;
  wire ov_sum1_n_71;
  wire ov_sum1_n_72;
  wire ov_sum1_n_73;
  wire ov_sum1_n_74;
  wire ov_sum1_n_75;
  wire ov_sum1_n_76;
  wire ov_sum1_n_77;
  wire ov_sum1_n_78;
  wire ov_sum1_n_79;
  wire ov_sum1_n_80;
  wire ov_sum1_n_81;
  wire ov_sum1_n_82;
  wire ov_sum1_n_83;
  wire ov_sum1_n_84;
  wire ov_sum1_n_85;
  wire ov_sum1_n_86;
  wire ov_sum1_n_87;
  wire ov_sum1_n_88;
  wire ov_sum1_n_89;
  wire ov_sum1_n_90;
  wire ov_sum1_n_91;
  wire ov_sum1_n_92;
  wire ov_sum1_n_93;
  wire ov_sum1_n_94;
  wire ov_sum1_n_95;
  wire ov_sum1_n_96;
  wire ov_sum1_n_97;
  wire ov_sum1_n_98;
  wire ov_sum1_n_99;
  wire \ov_sum[0]_i_2__4_n_0 ;
  wire \ov_sum[0]_i_3__5_n_0 ;
  wire \ov_sum[0]_i_4__5_n_0 ;
  wire \ov_sum[0]_i_5__5_n_0 ;
  wire \ov_sum[12]_i_2__5_n_0 ;
  wire \ov_sum[12]_i_3__5_n_0 ;
  wire \ov_sum[12]_i_4__5_n_0 ;
  wire \ov_sum[12]_i_5__5_n_0 ;
  wire \ov_sum[16]_i_2__5_n_0 ;
  wire \ov_sum[16]_i_3__5_n_0 ;
  wire \ov_sum[16]_i_4__5_n_0 ;
  wire \ov_sum[16]_i_5__5_n_0 ;
  wire \ov_sum[20]_i_2__5_n_0 ;
  wire \ov_sum[20]_i_3__5_n_0 ;
  wire \ov_sum[20]_i_4__5_n_0 ;
  wire \ov_sum[20]_i_5__5_n_0 ;
  wire \ov_sum[4]_i_2__5_n_0 ;
  wire \ov_sum[4]_i_3__5_n_0 ;
  wire \ov_sum[4]_i_4__5_n_0 ;
  wire \ov_sum[4]_i_5__5_n_0 ;
  wire \ov_sum[8]_i_2__5_n_0 ;
  wire \ov_sum[8]_i_3__5_n_0 ;
  wire \ov_sum[8]_i_4__5_n_0 ;
  wire \ov_sum[8]_i_5__5_n_0 ;
  wire [3:0]ov_sum_reg;
  wire \ov_sum_reg[0]_i_1__4_n_0 ;
  wire \ov_sum_reg[0]_i_1__4_n_1 ;
  wire \ov_sum_reg[0]_i_1__4_n_2 ;
  wire \ov_sum_reg[0]_i_1__4_n_3 ;
  wire \ov_sum_reg[0]_i_1__4_n_4 ;
  wire \ov_sum_reg[0]_i_1__4_n_5 ;
  wire \ov_sum_reg[0]_i_1__4_n_6 ;
  wire \ov_sum_reg[0]_i_1__4_n_7 ;
  wire \ov_sum_reg[12]_i_1__5_n_0 ;
  wire \ov_sum_reg[12]_i_1__5_n_1 ;
  wire \ov_sum_reg[12]_i_1__5_n_2 ;
  wire \ov_sum_reg[12]_i_1__5_n_3 ;
  wire \ov_sum_reg[12]_i_1__5_n_4 ;
  wire \ov_sum_reg[12]_i_1__5_n_5 ;
  wire \ov_sum_reg[12]_i_1__5_n_6 ;
  wire \ov_sum_reg[12]_i_1__5_n_7 ;
  wire \ov_sum_reg[16]_i_1__5_n_0 ;
  wire \ov_sum_reg[16]_i_1__5_n_1 ;
  wire \ov_sum_reg[16]_i_1__5_n_2 ;
  wire \ov_sum_reg[16]_i_1__5_n_3 ;
  wire \ov_sum_reg[16]_i_1__5_n_4 ;
  wire \ov_sum_reg[16]_i_1__5_n_5 ;
  wire \ov_sum_reg[16]_i_1__5_n_6 ;
  wire \ov_sum_reg[16]_i_1__5_n_7 ;
  wire [1:0]\ov_sum_reg[1]_0 ;
  wire \ov_sum_reg[20]_i_1__5_n_1 ;
  wire \ov_sum_reg[20]_i_1__5_n_2 ;
  wire \ov_sum_reg[20]_i_1__5_n_3 ;
  wire \ov_sum_reg[20]_i_1__5_n_4 ;
  wire \ov_sum_reg[20]_i_1__5_n_5 ;
  wire \ov_sum_reg[20]_i_1__5_n_6 ;
  wire \ov_sum_reg[20]_i_1__5_n_7 ;
  wire [21:0]\ov_sum_reg[22]_0 ;
  wire \ov_sum_reg[4]_i_1__5_n_0 ;
  wire \ov_sum_reg[4]_i_1__5_n_1 ;
  wire \ov_sum_reg[4]_i_1__5_n_2 ;
  wire \ov_sum_reg[4]_i_1__5_n_3 ;
  wire \ov_sum_reg[4]_i_1__5_n_4 ;
  wire \ov_sum_reg[4]_i_1__5_n_5 ;
  wire \ov_sum_reg[4]_i_1__5_n_6 ;
  wire \ov_sum_reg[4]_i_1__5_n_7 ;
  wire \ov_sum_reg[8]_i_1__5_n_0 ;
  wire \ov_sum_reg[8]_i_1__5_n_1 ;
  wire \ov_sum_reg[8]_i_1__5_n_2 ;
  wire \ov_sum_reg[8]_i_1__5_n_3 ;
  wire \ov_sum_reg[8]_i_1__5_n_4 ;
  wire \ov_sum_reg[8]_i_1__5_n_5 ;
  wire \ov_sum_reg[8]_i_1__5_n_6 ;
  wire \ov_sum_reg[8]_i_1__5_n_7 ;
  wire [23:0]ov_sum_reg_0;
  wire sum_rst;
  wire sum_rst_reg;
  wire tap_en;
  wire NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1_CARRYOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED;
  wire NLW_ov_sum1__0_OVERFLOW_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED;
  wire NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED;
  wire [29:0]NLW_ov_sum1__0_ACOUT_UNCONNECTED;
  wire [17:0]NLW_ov_sum1__0_BCOUT_UNCONNECTED;
  wire [3:0]NLW_ov_sum1__0_CARRYOUT_UNCONNECTED;
  wire [47:30]NLW_ov_sum1__0_P_UNCONNECTED;
  wire [47:0]NLW_ov_sum1__0_PCOUT_UNCONNECTED;
  wire [3:3]\NLW_ov_sum_reg[20]_i_1__5_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h17E8E817E81717E8)) 
    i___0_carry__4_i_4
       (.I0(\ov_sum_reg[22]_0 [21]),
        .I1(ov_sum_reg[2]),
        .I2(\ov_dout0_inferred__0/i___0_carry__4 [2]),
        .I3(ov_sum_reg[3]),
        .I4(ov_sum_reg_0[23]),
        .I5(\ov_dout0_inferred__0/i___0_carry__4 [3]),
        .O(S));
  LUT3 #(
    .INIT(8'hE8)) 
    i___0_carry_i_3
       (.I0(ov_sum_reg_0[0]),
        .I1(ov_sum_reg[0]),
        .I2(\ov_dout0_inferred__0/i___0_carry__4 [0]),
        .O(DI));
  LUT4 #(
    .INIT(16'h6996)) 
    i___0_carry_i_6
       (.I0(\ov_dout0_inferred__0/i___0_carry__4 [1]),
        .I1(ov_sum_reg[1]),
        .I2(\ov_sum_reg[22]_0 [0]),
        .I3(DI),
        .O(\ov_sum_reg[1]_0 [1]));
  LUT3 #(
    .INIT(8'h96)) 
    i___0_carry_i_7
       (.I0(ov_sum_reg_0[0]),
        .I1(ov_sum_reg[0]),
        .I2(\ov_dout0_inferred__0/i___0_carry__4 [0]),
        .O(\ov_sum_reg[1]_0 [0]));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({1'b0,douta[16:0]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b0,1'b0,1'b0,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1_OVERFLOW_UNCONNECTED),
        .P({ov_sum1_n_58,ov_sum1_n_59,ov_sum1_n_60,ov_sum1_n_61,ov_sum1_n_62,ov_sum1_n_63,ov_sum1_n_64,ov_sum1_n_65,ov_sum1_n_66,ov_sum1_n_67,ov_sum1_n_68,ov_sum1_n_69,ov_sum1_n_70,ov_sum1_n_71,ov_sum1_n_72,ov_sum1_n_73,ov_sum1_n_74,ov_sum1_n_75,ov_sum1_n_76,ov_sum1_n_77,ov_sum1_n_78,ov_sum1_n_79,ov_sum1_n_80,ov_sum1_n_81,ov_sum1_n_82,ov_sum1_n_83,ov_sum1_n_84,ov_sum1_n_85,ov_sum1_n_86,ov_sum1_n_87,ov_sum1_n_88,ov_sum1_n_89,ov_sum1_n_90,ov_sum1_n_91,ov_sum1_n_92,ov_sum1_n_93,ov_sum1_n_94,ov_sum1_n_95,ov_sum1_n_96,ov_sum1_n_97,ov_sum1_n_98,ov_sum1_n_99,ov_sum1_n_100,ov_sum1_n_101,ov_sum1_n_102,ov_sum1_n_103,ov_sum1_n_104,ov_sum1_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1_PATTERNDETECT_UNCONNECTED),
        .PCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCOUT({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1_UNDERFLOW_UNCONNECTED));
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-13 {cell *THIS*}}" *) 
  DSP48E1 #(
    .ACASCREG(0),
    .ADREG(1),
    .ALUMODEREG(0),
    .AREG(0),
    .AUTORESET_PATDET("NO_RESET"),
    .A_INPUT("DIRECT"),
    .BCASCREG(0),
    .BREG(0),
    .B_INPUT("DIRECT"),
    .CARRYINREG(0),
    .CARRYINSELREG(0),
    .CREG(1),
    .DREG(1),
    .INMODEREG(0),
    .MASK(48'h3FFFFFFFFFFF),
    .MREG(0),
    .OPMODEREG(0),
    .PATTERN(48'h000000000000),
    .PREG(0),
    .SEL_MASK("MASK"),
    .SEL_PATTERN("PATTERN"),
    .USE_DPORT("FALSE"),
    .USE_MULT("MULTIPLY"),
    .USE_PATTERN_DETECT("NO_PATDET"),
    .USE_SIMD("ONE48")) 
    ov_sum1__0
       (.A({ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0[23],ov_sum1_0}),
        .ACIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .ACOUT(NLW_ov_sum1__0_ACOUT_UNCONNECTED[29:0]),
        .ALUMODE({1'b0,1'b0,1'b0,1'b0}),
        .B({douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23],douta[23:17]}),
        .BCIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .BCOUT(NLW_ov_sum1__0_BCOUT_UNCONNECTED[17:0]),
        .C({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CARRYCASCIN(1'b0),
        .CARRYCASCOUT(NLW_ov_sum1__0_CARRYCASCOUT_UNCONNECTED),
        .CARRYIN(1'b0),
        .CARRYINSEL({1'b0,1'b0,1'b0}),
        .CARRYOUT(NLW_ov_sum1__0_CARRYOUT_UNCONNECTED[3:0]),
        .CEA1(1'b0),
        .CEA2(1'b0),
        .CEAD(1'b0),
        .CEALUMODE(1'b0),
        .CEB1(1'b0),
        .CEB2(1'b0),
        .CEC(1'b0),
        .CECARRYIN(1'b0),
        .CECTRL(1'b0),
        .CED(1'b0),
        .CEINMODE(1'b0),
        .CEM(1'b0),
        .CEP(1'b0),
        .CLK(1'b0),
        .D({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .INMODE({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .MULTSIGNIN(1'b0),
        .MULTSIGNOUT(NLW_ov_sum1__0_MULTSIGNOUT_UNCONNECTED),
        .OPMODE({1'b1,1'b0,1'b1,1'b0,1'b1,1'b0,1'b1}),
        .OVERFLOW(NLW_ov_sum1__0_OVERFLOW_UNCONNECTED),
        .P({NLW_ov_sum1__0_P_UNCONNECTED[47:30],ov_sum1__0_n_76,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79,ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83,ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87,ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91,ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95,ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99,ov_sum1__0_n_100,ov_sum1__0_n_101,ov_sum1__0_n_102,ov_sum1__0_n_103,ov_sum1__0_n_104,ov_sum1__0_n_105}),
        .PATTERNBDETECT(NLW_ov_sum1__0_PATTERNBDETECT_UNCONNECTED),
        .PATTERNDETECT(NLW_ov_sum1__0_PATTERNDETECT_UNCONNECTED),
        .PCIN({ov_sum1_n_106,ov_sum1_n_107,ov_sum1_n_108,ov_sum1_n_109,ov_sum1_n_110,ov_sum1_n_111,ov_sum1_n_112,ov_sum1_n_113,ov_sum1_n_114,ov_sum1_n_115,ov_sum1_n_116,ov_sum1_n_117,ov_sum1_n_118,ov_sum1_n_119,ov_sum1_n_120,ov_sum1_n_121,ov_sum1_n_122,ov_sum1_n_123,ov_sum1_n_124,ov_sum1_n_125,ov_sum1_n_126,ov_sum1_n_127,ov_sum1_n_128,ov_sum1_n_129,ov_sum1_n_130,ov_sum1_n_131,ov_sum1_n_132,ov_sum1_n_133,ov_sum1_n_134,ov_sum1_n_135,ov_sum1_n_136,ov_sum1_n_137,ov_sum1_n_138,ov_sum1_n_139,ov_sum1_n_140,ov_sum1_n_141,ov_sum1_n_142,ov_sum1_n_143,ov_sum1_n_144,ov_sum1_n_145,ov_sum1_n_146,ov_sum1_n_147,ov_sum1_n_148,ov_sum1_n_149,ov_sum1_n_150,ov_sum1_n_151,ov_sum1_n_152,ov_sum1_n_153}),
        .PCOUT(NLW_ov_sum1__0_PCOUT_UNCONNECTED[47:0]),
        .RSTA(1'b0),
        .RSTALLCARRYIN(1'b0),
        .RSTALUMODE(1'b0),
        .RSTB(1'b0),
        .RSTC(1'b0),
        .RSTCTRL(1'b0),
        .RSTD(1'b0),
        .RSTINMODE(1'b0),
        .RSTM(1'b0),
        .RSTP(1'b0),
        .UNDERFLOW(NLW_ov_sum1__0_UNDERFLOW_UNCONNECTED));
  LUT2 #(
    .INIT(4'hE)) 
    \ov_sum[0]_i_1 
       (.I0(i_rst_IBUF),
        .I1(sum_rst),
        .O(sum_rst_reg));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_2__4 
       (.I0(ov_sum1__0_n_96),
        .I1(\ov_sum_reg[22]_0 [2]),
        .O(\ov_sum[0]_i_2__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_3__5 
       (.I0(ov_sum1__0_n_97),
        .I1(\ov_sum_reg[22]_0 [1]),
        .O(\ov_sum[0]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_4__5 
       (.I0(ov_sum1__0_n_98),
        .I1(\ov_sum_reg[22]_0 [0]),
        .O(\ov_sum[0]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[0]_i_5__5 
       (.I0(ov_sum1__0_n_99),
        .I1(ov_sum_reg_0[0]),
        .O(\ov_sum[0]_i_5__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_2__5 
       (.I0(ov_sum1__0_n_84),
        .I1(\ov_sum_reg[22]_0 [14]),
        .O(\ov_sum[12]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_3__5 
       (.I0(ov_sum1__0_n_85),
        .I1(\ov_sum_reg[22]_0 [13]),
        .O(\ov_sum[12]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_4__5 
       (.I0(ov_sum1__0_n_86),
        .I1(\ov_sum_reg[22]_0 [12]),
        .O(\ov_sum[12]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[12]_i_5__5 
       (.I0(ov_sum1__0_n_87),
        .I1(\ov_sum_reg[22]_0 [11]),
        .O(\ov_sum[12]_i_5__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_2__5 
       (.I0(ov_sum1__0_n_80),
        .I1(\ov_sum_reg[22]_0 [18]),
        .O(\ov_sum[16]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_3__5 
       (.I0(ov_sum1__0_n_81),
        .I1(\ov_sum_reg[22]_0 [17]),
        .O(\ov_sum[16]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_4__5 
       (.I0(ov_sum1__0_n_82),
        .I1(\ov_sum_reg[22]_0 [16]),
        .O(\ov_sum[16]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[16]_i_5__5 
       (.I0(ov_sum1__0_n_83),
        .I1(\ov_sum_reg[22]_0 [15]),
        .O(\ov_sum[16]_i_5__5_n_0 ));
  (* \PinAttr:I0:HOLD_DETOUR  = "158" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_2__5 
       (.I0(ov_sum_reg_0[23]),
        .I1(ov_sum1__0_n_76),
        .O(\ov_sum[20]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_3__5 
       (.I0(ov_sum1__0_n_77),
        .I1(\ov_sum_reg[22]_0 [21]),
        .O(\ov_sum[20]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_4__5 
       (.I0(ov_sum1__0_n_78),
        .I1(\ov_sum_reg[22]_0 [20]),
        .O(\ov_sum[20]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[20]_i_5__5 
       (.I0(ov_sum1__0_n_79),
        .I1(\ov_sum_reg[22]_0 [19]),
        .O(\ov_sum[20]_i_5__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_2__5 
       (.I0(ov_sum1__0_n_92),
        .I1(\ov_sum_reg[22]_0 [6]),
        .O(\ov_sum[4]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_3__5 
       (.I0(ov_sum1__0_n_93),
        .I1(\ov_sum_reg[22]_0 [5]),
        .O(\ov_sum[4]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_4__5 
       (.I0(ov_sum1__0_n_94),
        .I1(\ov_sum_reg[22]_0 [4]),
        .O(\ov_sum[4]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[4]_i_5__5 
       (.I0(ov_sum1__0_n_95),
        .I1(\ov_sum_reg[22]_0 [3]),
        .O(\ov_sum[4]_i_5__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_2__5 
       (.I0(ov_sum1__0_n_88),
        .I1(\ov_sum_reg[22]_0 [10]),
        .O(\ov_sum[8]_i_2__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_3__5 
       (.I0(ov_sum1__0_n_89),
        .I1(\ov_sum_reg[22]_0 [9]),
        .O(\ov_sum[8]_i_3__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_4__5 
       (.I0(ov_sum1__0_n_90),
        .I1(\ov_sum_reg[22]_0 [8]),
        .O(\ov_sum[8]_i_4__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \ov_sum[8]_i_5__5 
       (.I0(ov_sum1__0_n_91),
        .I1(\ov_sum_reg[22]_0 [7]),
        .O(\ov_sum[8]_i_5__5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[0] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__4_n_7 ),
        .Q(ov_sum_reg_0[0]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[0]_i_1__4 
       (.CI(1'b0),
        .CO({\ov_sum_reg[0]_i_1__4_n_0 ,\ov_sum_reg[0]_i_1__4_n_1 ,\ov_sum_reg[0]_i_1__4_n_2 ,\ov_sum_reg[0]_i_1__4_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_96,ov_sum1__0_n_97,ov_sum1__0_n_98,ov_sum1__0_n_99}),
        .O({\ov_sum_reg[0]_i_1__4_n_4 ,\ov_sum_reg[0]_i_1__4_n_5 ,\ov_sum_reg[0]_i_1__4_n_6 ,\ov_sum_reg[0]_i_1__4_n_7 }),
        .S({\ov_sum[0]_i_2__4_n_0 ,\ov_sum[0]_i_3__5_n_0 ,\ov_sum[0]_i_4__5_n_0 ,\ov_sum[0]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[10] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__5_n_5 ),
        .Q(\ov_sum_reg[22]_0 [9]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[11] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__5_n_4 ),
        .Q(\ov_sum_reg[22]_0 [10]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[12] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[22]_0 [11]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[12]_i_1__5 
       (.CI(\ov_sum_reg[8]_i_1__5_n_0 ),
        .CO({\ov_sum_reg[12]_i_1__5_n_0 ,\ov_sum_reg[12]_i_1__5_n_1 ,\ov_sum_reg[12]_i_1__5_n_2 ,\ov_sum_reg[12]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_84,ov_sum1__0_n_85,ov_sum1__0_n_86,ov_sum1__0_n_87}),
        .O({\ov_sum_reg[12]_i_1__5_n_4 ,\ov_sum_reg[12]_i_1__5_n_5 ,\ov_sum_reg[12]_i_1__5_n_6 ,\ov_sum_reg[12]_i_1__5_n_7 }),
        .S({\ov_sum[12]_i_2__5_n_0 ,\ov_sum[12]_i_3__5_n_0 ,\ov_sum[12]_i_4__5_n_0 ,\ov_sum[12]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[13] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[22]_0 [12]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[14] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__5_n_5 ),
        .Q(\ov_sum_reg[22]_0 [13]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[15] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[12]_i_1__5_n_4 ),
        .Q(\ov_sum_reg[22]_0 [14]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[16] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[22]_0 [15]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[16]_i_1__5 
       (.CI(\ov_sum_reg[12]_i_1__5_n_0 ),
        .CO({\ov_sum_reg[16]_i_1__5_n_0 ,\ov_sum_reg[16]_i_1__5_n_1 ,\ov_sum_reg[16]_i_1__5_n_2 ,\ov_sum_reg[16]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_80,ov_sum1__0_n_81,ov_sum1__0_n_82,ov_sum1__0_n_83}),
        .O({\ov_sum_reg[16]_i_1__5_n_4 ,\ov_sum_reg[16]_i_1__5_n_5 ,\ov_sum_reg[16]_i_1__5_n_6 ,\ov_sum_reg[16]_i_1__5_n_7 }),
        .S({\ov_sum[16]_i_2__5_n_0 ,\ov_sum[16]_i_3__5_n_0 ,\ov_sum[16]_i_4__5_n_0 ,\ov_sum[16]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[17] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[22]_0 [16]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[18] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__5_n_5 ),
        .Q(\ov_sum_reg[22]_0 [17]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[19] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[16]_i_1__5_n_4 ),
        .Q(\ov_sum_reg[22]_0 [18]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[1] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__4_n_6 ),
        .Q(\ov_sum_reg[22]_0 [0]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[20] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[22]_0 [19]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[20]_i_1__5 
       (.CI(\ov_sum_reg[16]_i_1__5_n_0 ),
        .CO({\NLW_ov_sum_reg[20]_i_1__5_CO_UNCONNECTED [3],\ov_sum_reg[20]_i_1__5_n_1 ,\ov_sum_reg[20]_i_1__5_n_2 ,\ov_sum_reg[20]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,ov_sum1__0_n_77,ov_sum1__0_n_78,ov_sum1__0_n_79}),
        .O({\ov_sum_reg[20]_i_1__5_n_4 ,\ov_sum_reg[20]_i_1__5_n_5 ,\ov_sum_reg[20]_i_1__5_n_6 ,\ov_sum_reg[20]_i_1__5_n_7 }),
        .S({\ov_sum[20]_i_2__5_n_0 ,\ov_sum[20]_i_3__5_n_0 ,\ov_sum[20]_i_4__5_n_0 ,\ov_sum[20]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[21] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[22]_0 [20]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[22] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__5_n_5 ),
        .Q(\ov_sum_reg[22]_0 [21]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[23] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[20]_i_1__5_n_4 ),
        .Q(ov_sum_reg_0[23]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[2] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__4_n_5 ),
        .Q(\ov_sum_reg[22]_0 [1]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[3] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[0]_i_1__4_n_4 ),
        .Q(\ov_sum_reg[22]_0 [2]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[4] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[22]_0 [3]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[4]_i_1__5 
       (.CI(\ov_sum_reg[0]_i_1__4_n_0 ),
        .CO({\ov_sum_reg[4]_i_1__5_n_0 ,\ov_sum_reg[4]_i_1__5_n_1 ,\ov_sum_reg[4]_i_1__5_n_2 ,\ov_sum_reg[4]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_92,ov_sum1__0_n_93,ov_sum1__0_n_94,ov_sum1__0_n_95}),
        .O({\ov_sum_reg[4]_i_1__5_n_4 ,\ov_sum_reg[4]_i_1__5_n_5 ,\ov_sum_reg[4]_i_1__5_n_6 ,\ov_sum_reg[4]_i_1__5_n_7 }),
        .S({\ov_sum[4]_i_2__5_n_0 ,\ov_sum[4]_i_3__5_n_0 ,\ov_sum[4]_i_4__5_n_0 ,\ov_sum[4]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[5] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[22]_0 [4]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[6] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__5_n_5 ),
        .Q(\ov_sum_reg[22]_0 [5]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[7] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[4]_i_1__5_n_4 ),
        .Q(\ov_sum_reg[22]_0 [6]),
        .R(sum_rst_reg));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[8] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__5_n_7 ),
        .Q(\ov_sum_reg[22]_0 [7]),
        .R(sum_rst_reg));
  (* ADDER_THRESHOLD = "11" *) 
  CARRY4 \ov_sum_reg[8]_i_1__5 
       (.CI(\ov_sum_reg[4]_i_1__5_n_0 ),
        .CO({\ov_sum_reg[8]_i_1__5_n_0 ,\ov_sum_reg[8]_i_1__5_n_1 ,\ov_sum_reg[8]_i_1__5_n_2 ,\ov_sum_reg[8]_i_1__5_n_3 }),
        .CYINIT(1'b0),
        .DI({ov_sum1__0_n_88,ov_sum1__0_n_89,ov_sum1__0_n_90,ov_sum1__0_n_91}),
        .O({\ov_sum_reg[8]_i_1__5_n_4 ,\ov_sum_reg[8]_i_1__5_n_5 ,\ov_sum_reg[8]_i_1__5_n_6 ,\ov_sum_reg[8]_i_1__5_n_7 }),
        .S({\ov_sum[8]_i_2__5_n_0 ,\ov_sum[8]_i_3__5_n_0 ,\ov_sum[8]_i_4__5_n_0 ,\ov_sum[8]_i_5__5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \ov_sum_reg[9] 
       (.C(CLK),
        .CE(tap_en),
        .D(\ov_sum_reg[8]_i_1__5_n_6 ),
        .Q(\ov_sum_reg[22]_0 [8]),
        .R(sum_rst_reg));
endmodule

(* DATA_WIDTH = "24" *) (* ECO_CHECKSUM = "6b680218" *) (* FIR_DEPTH = "256" *) 
(* NUM_PIPELINES = "8" *) 
(* NotValidForBitStream *)
(* \DesignAttr:ENABLE_NOC_NETLIST_VIEW  *) 
(* \DesignAttr:ENABLE_AIE_NETLIST_VIEW  *) 
module top_level
   (i_clk,
    i_rst,
    i_en,
    i_din,
    i_din_valid,
    i_ready,
    o_ready,
    o_dout,
    o_dout_valid);
  input i_clk;
  input i_rst;
  input i_en;
  input i_din;
  input i_din_valid;
  input i_ready;
  output o_ready;
  output o_dout;
  output o_dout_valid;

  wire des_out_valid;
  wire [23:0]fir_din;
  wire fir_filter_inst_n_10;
  wire fir_filter_inst_n_11;
  wire fir_filter_inst_n_12;
  wire fir_filter_inst_n_13;
  wire fir_filter_inst_n_14;
  wire fir_filter_inst_n_15;
  wire fir_filter_inst_n_16;
  wire fir_filter_inst_n_17;
  wire fir_filter_inst_n_18;
  wire fir_filter_inst_n_19;
  wire fir_filter_inst_n_2;
  wire fir_filter_inst_n_20;
  wire fir_filter_inst_n_21;
  wire fir_filter_inst_n_22;
  wire fir_filter_inst_n_23;
  wire fir_filter_inst_n_24;
  wire fir_filter_inst_n_25;
  wire fir_filter_inst_n_3;
  wire fir_filter_inst_n_4;
  wire fir_filter_inst_n_5;
  wire fir_filter_inst_n_6;
  wire fir_filter_inst_n_7;
  wire fir_filter_inst_n_8;
  wire fir_filter_inst_n_9;
  wire fir_out_valid;
  wire fir_ready;
  wire i_clk;
  wire i_clk_IBUF;
  wire i_din;
  wire i_din_IBUF;
  wire i_din_valid;
  wire i_din_valid_IBUF;
  wire i_en;
  wire i_en_IBUF;
  wire i_ready;
  wire i_ready_IBUF;
  wire i_rst;
  wire i_rst_IBUF;
  wire o_dout;
  wire o_dout_OBUF;
  wire o_dout_valid;
  wire o_dout_valid_OBUF;
  wire o_ready;
  wire o_ready_OBUF;
  wire ser_ready;

initial begin
 $sdf_annotate("_time_impl.sdf",,,,"tool_control");
end
  deserializer_fsm deserializer_inst
       (.CLK(i_clk_IBUF),
        .Q(fir_din),
        .des_out_valid(des_out_valid),
        .i_din_IBUF(i_din_IBUF),
        .i_din_valid_IBUF(i_din_valid_IBUF),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .o_ready_OBUF(o_ready_OBUF),
        .wea(fir_ready));
  fir_filter_direct_form_partially_pipelined fir_filter_inst
       (.CLK(i_clk_IBUF),
        .Q(fir_din),
        .des_out_valid(des_out_valid),
        .fir_out_valid(fir_out_valid),
        .i_en_IBUF(i_en_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .\ov_dout_reg[23]_0 ({fir_filter_inst_n_2,fir_filter_inst_n_3,fir_filter_inst_n_4,fir_filter_inst_n_5,fir_filter_inst_n_6,fir_filter_inst_n_7,fir_filter_inst_n_8,fir_filter_inst_n_9,fir_filter_inst_n_10,fir_filter_inst_n_11,fir_filter_inst_n_12,fir_filter_inst_n_13,fir_filter_inst_n_14,fir_filter_inst_n_15,fir_filter_inst_n_16,fir_filter_inst_n_17,fir_filter_inst_n_18,fir_filter_inst_n_19,fir_filter_inst_n_20,fir_filter_inst_n_21,fir_filter_inst_n_22,fir_filter_inst_n_23,fir_filter_inst_n_24,fir_filter_inst_n_25}),
        .ser_ready(ser_ready),
        .wea(fir_ready));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_clk_IBUF_inst
       (.I(i_clk),
        .O(i_clk_IBUF));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_din_IBUF_inst
       (.I(i_din),
        .O(i_din_IBUF));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_din_valid_IBUF_inst
       (.I(i_din_valid),
        .O(i_din_valid_IBUF));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_en_IBUF_inst
       (.I(i_en),
        .O(i_en_IBUF));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_ready_IBUF_inst
       (.I(i_ready),
        .O(i_ready_IBUF));
  (* io_buffer_type = "ibuf" *) 
  IBUF i_rst_IBUF_inst
       (.I(i_rst),
        .O(i_rst_IBUF));
  (* io_buffer_type = "obuf" *) 
  OBUF o_dout_OBUF_inst
       (.I(o_dout_OBUF),
        .O(o_dout));
  (* io_buffer_type = "obuf" *) 
  OBUF o_dout_valid_OBUF_inst
       (.I(o_dout_valid_OBUF),
        .O(o_dout_valid));
  (* io_buffer_type = "obuf" *) 
  OBUF o_ready_OBUF_inst
       (.I(o_ready_OBUF),
        .O(o_ready));
  serializer_fsm serializer_inst
       (.CLK(i_clk_IBUF),
        .Q(o_dout_OBUF),
        .fir_out_valid(fir_out_valid),
        .i_en_IBUF(i_en_IBUF),
        .i_ready_IBUF(i_ready_IBUF),
        .i_rst_IBUF(i_rst_IBUF),
        .o_dout_valid_OBUF(o_dout_valid_OBUF),
        .ser_ready(ser_ready),
        .\shift_reg_reg[23]_0 ({fir_filter_inst_n_2,fir_filter_inst_n_3,fir_filter_inst_n_4,fir_filter_inst_n_5,fir_filter_inst_n_6,fir_filter_inst_n_7,fir_filter_inst_n_8,fir_filter_inst_n_9,fir_filter_inst_n_10,fir_filter_inst_n_11,fir_filter_inst_n_12,fir_filter_inst_n_13,fir_filter_inst_n_14,fir_filter_inst_n_15,fir_filter_inst_n_16,fir_filter_inst_n_17,fir_filter_inst_n_18,fir_filter_inst_n_19,fir_filter_inst_n_20,fir_filter_inst_n_21,fir_filter_inst_n_22,fir_filter_inst_n_23,fir_filter_inst_n_24,fir_filter_inst_n_25}));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* P_ECC_MODE = "0" *) 
(* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) (* P_MAX_DEPTH_DATA = "32" *) 
(* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) (* P_MIN_WIDTH_DATA = "24" *) 
(* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) (* P_MIN_WIDTH_DATA_ECC = "24" *) 
(* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) (* P_NUM_COLS_WRITE_A = "1" *) 
(* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) (* P_NUM_ROWS_READ_B = "1" *) 
(* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) (* P_SDP_WRITE_MODE = "yes" *) 
(* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) (* P_WIDTH_ADDR_READ_B = "5" *) 
(* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) (* P_WIDTH_COL_WRITE_A = "24" *) 
(* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) (* READ_DATA_WIDTH_A = "24" *) 
(* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) (* READ_LATENCY_B = "1" *) 
(* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) (* RST_MODE_A = "SYNC" *) 
(* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) (* USE_EMBEDDED_CONSTRAINT = "0" *) 
(* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) (* VERSION = "0" *) 
(* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) (* WRITE_DATA_WIDTH_B = "24" *) 
(* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) (* WRITE_PROTECT = "1" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* rsta_loop_iter = "24" *) 
(* rstb_loop_iter = "24" *) 
module xpm_memory_base
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[0].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h00000000000000000000000000000000000000000000000003FFFFF000003FFF),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h06BF0849090B0908085207040543033A0112FEF6FD0CFB73FA45F993F964F9B8),
    .INIT_01(256'h0EB708E502E7FD3CF851F479F1E8F0B4F0D4F226F471F76FFAD3FE50019C047C),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h000000000000000000000000000000000000003F003F003F003F003F003F003F),
    .INIT_21(256'h000000000000003F003F003F003F003F003F003F003F003F003F003F00000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized0
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[1].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h000000000000000000000000000000000000000000000000F000003FFFFF0000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'hD93BD598D5A1D90BDF48E79DF131FB2604A40CF3138117EE1A0F19EB17B913D5),
    .INIT_01(256'hDC47F4350B5D1FF530843C0241E142133CFD336D267D177707B9F895EB35E08B),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h003F003F003F003F003F003F003F003F00000000000000000000000000000000),
    .INIT_21(256'h003F003F00000000000000000000000000000000000000000000003F003F003F),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[2].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000003FFFFF000003FFFF),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h925793348853735E56AE3512118CEF10D04BB76FA60E9D089C81A3EEB228C594),
    .INIT_01(256'h274FDA3A96005F43394825CA24F5358254E47F98B175E60C190946816B3E84F2),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000003F003F003F003F003F003F003F003F003F),
    .INIT_21(256'h0000003F003F003F003F003F003F003F003F003F003F003F0000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'b001011110110100001101111011011010110010100101111011000100110001101101000011001010110111001100111001011110111011101101111011100100110101101110011011100000110000101100011011001010010111101100100011001010111011000101111011100000110110001100001011000110110010100101101011000010110111001100100001011010111001001101111011101010111010001100101001011110110100001100100011011000010111101110110011001010111001001101001011011000110111101100111001011110110011001101001011100100101111101100110011010010110110001110100011001010111001000101111011100110111001001100011001011110111011101100101011010010110011101101000011101000111001101011111000000000000000000000000001100000000000000000000000000000011001100101110011011010110010101101101" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[3].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h000000000000000000000000000000000000000000000000F934D3A55AF05550),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h9F3CDBE93BBCB3CA38ACBF473D76AAA500433A0A561A54ED391A0701C44E777F),
    .INIT_01(256'h9A474942AB40C813AAE06171FB6D89671BEEC29E8B488139ACB01289B41F8F66),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h003F003F003F003F003F003F0000000000000000000000000000000000000000),
    .INIT_21(256'h00020002000200020002000100010001000000000000003F003F003F003F003F),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized3
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[4].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h00000000000000000000000000000000000000000000000005550FA55AC71C6F),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h8F66B41F1289ACB081398B48C29E1BEE8967FB6D6171AAE0C813AB4049429A47),
    .INIT_01(256'h777FC44E0701391A54ED561A3A0A0043AAA53D76BF4738ACB3CA3BBCDBE99F3C),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h003F003F003F003F003F00000000000000010001000100020002000200020002),
    .INIT_21(256'h0000000000000000000000000000000000000000003F003F003F003F003F003F),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[5].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h000000000000000000000000000000000000000000000000FFFFC00000FFFFFC),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h84F26B3E46811909E60CB1757F9854E4358224F525CA39485F439600DA3A274F),
    .INIT_01(256'hC594B228A3EE9C819D08A60EB76FD04BEF10118C351256AE735E885393349257),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000003F003F003F003F003F003F003F003F003F003F003F0000),
    .INIT_21(256'h003F003F003F003F003F003F003F003F003F0000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'b001011110110100001101111011011010110010100101111011000100110001101101000011001010110111001100111001011110111011101101111011100100110101101110011011100000110000101100011011001010010111101100100011001010111011000101111011100000110110001100001011000110110010100101101011000010110111001100100001011010111001001101111011101010111010001100101001011110110100001100100011011000010111101110110011001010111001001101001011011000110111101100111001011110110011001101001011100100101111101100110011010010110110001110100011001010111001000101111011100110111001001100011001011110111011101100101011010010110011101101000011101000111001101011111000000000000000000000000001100000000000000000000000000000011011000101110011011010110010101101101" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized5
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[6].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000FFFFFC00000F),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'hE08BEB35F89507B91777267D336D3CFD421341E13C0230841FF50B5DF435DC47),
    .INIT_01(256'h13D517B919EB1A0F17EE13810CF304A4FB26F131E79DDF48D90BD5A1D598D93B),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h003F003F003F00000000000000000000000000000000000000000000003F003F),
    .INIT_21(256'h00000000000000000000000000000000003F003F003F003F003F003F003F003F),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "720'bfalse" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "3" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "no" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized6
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]douta;
  wire ena;
  wire \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ;
  wire rsta;
  wire sleep;
  wire [15:6]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk2[7].xpm_memory_sprom_inst/xpm_memory_base_inst/gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg" *) 
  (* RTL_RAM_TYPE = "RAM_TDP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h000000000000000000000000000000000000000000000000FFFC00000FFFFFC0),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h047C019CFE50FAD3F76FF471F226F0D4F0B4F1E8F479F851FD3C02E708E50EB7),
    .INIT_01(256'hF9B8F964F993FA45FB73FD0CFEF60112033A0543070408520908090B084906BF),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h00000000003F003F003F003F003F003F003F003F003F003F003F000000000000),
    .INIT_21(256'h003F003F003F003F003F003F003F000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("WRITE_FIRST"),
    .WRITE_MODE_B("WRITE_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .DIPADIP({1'b1,1'b1}),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .ENBWREN(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0}));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_rd_a.gen_rd_a_synth_template.gen_rf_narrow_reg.douta_reg_reg_i_1_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[7].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__1
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[0].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__2
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[1].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__3
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[2].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__4
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[3].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__5
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[4].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__6
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[5].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

(* ADDR_WIDTH_A = "5" *) (* ADDR_WIDTH_B = "5" *) (* AUTO_SLEEP_TIME = "0" *) 
(* BYTE_WRITE_WIDTH_A = "24" *) (* BYTE_WRITE_WIDTH_B = "24" *) (* CASCADE_HEIGHT = "0" *) 
(* CLOCKING_MODE = "0" *) (* ECC_BIT_RANGE = "7:0" *) (* ECC_MODE = "0" *) 
(* ECC_TYPE = "none" *) (* IGNORE_INIT_SYNTH = "0" *) (* MAX_NUM_CHAR = "0" *) 
(* MEMORY_INIT_FILE = "none" *) (* MEMORY_INIT_PARAM = "0" *) (* MEMORY_OPTIMIZATION = "false" *) 
(* MEMORY_PRIMITIVE = "2" *) (* MEMORY_SIZE = "768" *) (* MEMORY_TYPE = "0" *) 
(* MESSAGE_CONTROL = "0" *) (* NUM_CHAR_LOC = "0" *) (* ORIG_REF_NAME = "xpm_memory_base" *) 
(* P_ECC_MODE = "0" *) (* P_ENABLE_BYTE_WRITE_A = "0" *) (* P_ENABLE_BYTE_WRITE_B = "0" *) 
(* P_MAX_DEPTH_DATA = "32" *) (* P_MEMORY_OPT = "yes" *) (* P_MEMORY_PRIMITIVE = "0" *) 
(* P_MIN_WIDTH_DATA = "24" *) (* P_MIN_WIDTH_DATA_A = "24" *) (* P_MIN_WIDTH_DATA_B = "24" *) 
(* P_MIN_WIDTH_DATA_ECC = "24" *) (* P_MIN_WIDTH_DATA_LDW = "4" *) (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
(* P_NUM_COLS_WRITE_A = "1" *) (* P_NUM_COLS_WRITE_B = "1" *) (* P_NUM_ROWS_READ_A = "1" *) 
(* P_NUM_ROWS_READ_B = "1" *) (* P_NUM_ROWS_WRITE_A = "1" *) (* P_NUM_ROWS_WRITE_B = "1" *) 
(* P_SDP_WRITE_MODE = "yes" *) (* P_WIDTH_ADDR_LSB_READ_A = "0" *) (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
(* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) (* P_WIDTH_ADDR_READ_A = "5" *) 
(* P_WIDTH_ADDR_READ_B = "5" *) (* P_WIDTH_ADDR_WRITE_A = "5" *) (* P_WIDTH_ADDR_WRITE_B = "5" *) 
(* P_WIDTH_COL_WRITE_A = "24" *) (* P_WIDTH_COL_WRITE_B = "24" *) (* RAM_DECOMP = "auto" *) 
(* READ_DATA_WIDTH_A = "24" *) (* READ_DATA_WIDTH_B = "24" *) (* READ_LATENCY_A = "1" *) 
(* READ_LATENCY_B = "1" *) (* READ_RESET_VALUE_A = "0" *) (* READ_RESET_VALUE_B = "0" *) 
(* RST_MODE_A = "SYNC" *) (* RST_MODE_B = "SYNC" *) (* SIM_ASSERT_CHK = "0" *) 
(* USE_EMBEDDED_CONSTRAINT = "0" *) (* USE_MEM_INIT = "1" *) (* USE_MEM_INIT_MMI = "0" *) 
(* VERSION = "0" *) (* WAKEUP_TIME = "0" *) (* WRITE_DATA_WIDTH_A = "24" *) 
(* WRITE_DATA_WIDTH_B = "24" *) (* WRITE_MODE_A = "1" *) (* WRITE_MODE_B = "1" *) 
(* WRITE_PROTECT = "1" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* rsta_loop_iter = "24" *) (* rstb_loop_iter = "24" *) 
module xpm_memory_base__parameterized7__7
   (sleep,
    clka,
    rsta,
    ena,
    regcea,
    wea,
    addra,
    dina,
    injectsbiterra,
    injectdbiterra,
    douta,
    sbiterra,
    dbiterra,
    clkb,
    rstb,
    enb,
    regceb,
    web,
    addrb,
    dinb,
    injectsbiterrb,
    injectdbiterrb,
    doutb,
    sbiterrb,
    dbiterrb);
  input sleep;
  input clka;
  input rsta;
  input ena;
  input regcea;
  input [0:0]wea;
  input [4:0]addra;
  input [23:0]dina;
  input injectsbiterra;
  input injectdbiterra;
  output [23:0]douta;
  output sbiterra;
  output dbiterra;
  input clkb;
  input rstb;
  input enb;
  input regceb;
  input [0:0]web;
  input [4:0]addrb;
  input [23:0]dinb;
  input injectsbiterrb;
  input injectdbiterrb;
  output [23:0]doutb;
  output sbiterrb;
  output dbiterrb;

  wire \<const0> ;
  wire [4:0]addra;
  wire clka;
  wire [23:0]dina;
  wire [23:0]douta;
  wire ena;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ;
  wire \gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ;
  wire rsta;
  wire sleep;
  wire [0:0]wea;
  wire [15:6]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED ;
  wire [1:0]\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED ;

  assign dbiterra = \<const0> ;
  assign dbiterrb = \<const0> ;
  assign doutb[23] = \<const0> ;
  assign doutb[22] = \<const0> ;
  assign doutb[21] = \<const0> ;
  assign doutb[20] = \<const0> ;
  assign doutb[19] = \<const0> ;
  assign doutb[18] = \<const0> ;
  assign doutb[17] = \<const0> ;
  assign doutb[16] = \<const0> ;
  assign doutb[15] = \<const0> ;
  assign doutb[14] = \<const0> ;
  assign doutb[13] = \<const0> ;
  assign doutb[12] = \<const0> ;
  assign doutb[11] = \<const0> ;
  assign doutb[10] = \<const0> ;
  assign doutb[9] = \<const0> ;
  assign doutb[8] = \<const0> ;
  assign doutb[7] = \<const0> ;
  assign doutb[6] = \<const0> ;
  assign doutb[5] = \<const0> ;
  assign doutb[4] = \<const0> ;
  assign doutb[3] = \<const0> ;
  assign doutb[2] = \<const0> ;
  assign doutb[1] = \<const0> ;
  assign doutb[0] = \<const0> ;
  assign sbiterra = \<const0> ;
  assign sbiterrb = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* \MEM.PORTA.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTA.ADDRESS_END  = "31" *) 
  (* \MEM.PORTA.DATA_BIT_LAYOUT  = "p2_d16" *) 
  (* \MEM.PORTA.DATA_LSB  = "0" *) 
  (* \MEM.PORTA.DATA_MSB  = "17" *) 
  (* \MEM.PORTB.ADDRESS_BEGIN  = "0" *) 
  (* \MEM.PORTB.ADDRESS_END  = "31" *) 
  (* \MEM.PORTB.DATA_BIT_LAYOUT  = "p0_d6" *) 
  (* \MEM.PORTB.DATA_LSB  = "18" *) 
  (* \MEM.PORTB.DATA_MSB  = "23" *) 
  (* METHODOLOGY_DRC_VIOS = "{SYNTH-4 {cell *THIS*} {string 5}} {SYNTH-6 {cell *THIS*}}" *) 
  (* RTL_RAM_BITS = "768" *) 
  (* RTL_RAM_NAME = "fir_filter_inst/genblk3[6].xpm_memory_spram_inst/xpm_memory_base_inst/gen_wr_a.gen_word_narrow.mem_reg" *) 
  (* RTL_RAM_TYPE = "RAM_SP" *) 
  (* ram_addr_begin = "0" *) 
  (* ram_addr_end = "31" *) 
  (* ram_ext_slice_begin = "18" *) 
  (* ram_ext_slice_end = "23" *) 
  (* ram_offset = "0" *) 
  (* ram_slice_begin = "0" *) 
  (* ram_slice_end = "17" *) 
  RAMB18E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(18'h00000),
    .INIT_B(18'h00000),
    .INIT_FILE("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(18),
    .READ_WIDTH_B(18),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("ALL"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(18'h00000),
    .SRVAL_B(18'h00000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(18),
    .WRITE_WIDTH_B(18)) 
    \gen_wr_a.gen_word_narrow.mem_reg 
       (.ADDRARDADDR({1'b0,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .ADDRBWRADDR({1'b1,1'b0,1'b0,1'b0,1'b0,addra,1'b0,1'b0,1'b0,1'b0}),
        .CLKARDCLK(clka),
        .CLKBWRCLK(clka),
        .DIADI(dina[15:0]),
        .DIBDI({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,dina[23:18]}),
        .DIPADIP(dina[17:16]),
        .DIPBDIP({1'b1,1'b1}),
        .DOADO(douta[15:0]),
        .DOBDO({\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOBDO_UNCONNECTED [15:6],douta[23:18]}),
        .DOPADOP(douta[17:16]),
        .DOPBDOP(\NLW_gen_wr_a.gen_word_narrow.mem_reg_DOPBDOP_UNCONNECTED [1:0]),
        .ENARDEN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .ENBWREN(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ),
        .REGCEAREGCE(1'b0),
        .REGCEB(1'b0),
        .RSTRAMARSTRAM(rsta),
        .RSTRAMB(rsta),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .WEA({\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }),
        .WEBWE({1'b0,1'b0,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ,\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 }));
  LUT2 #(
    .INIT(4'hE)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_1 
       (.I0(rsta),
        .I1(ena),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \gen_wr_a.gen_word_narrow.mem_reg_i_2 
       (.I0(ena),
        .I1(wea),
        .O(\gen_wr_a.gen_word_narrow.mem_reg_i_2_n_0 ));
endmodule

module xpm_memory_spram
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__1 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_10
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__5 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_11
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__6 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_12
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__7 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_13
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_7
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__2 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_8
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__3 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_spram" *) 
module xpm_memory_spram_9
   (douta,
    CLK,
    i_rst_IBUF,
    i_en_IBUF,
    wea,
    Q,
    \gen_wr_a.gen_word_narrow.mem_reg );
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input i_en_IBUF;
  input [0:0]wea;
  input [4:0]Q;
  input [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire [23:0]\gen_wr_a.gen_word_narrow.mem_reg ;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire [0:0]wea;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "none" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "0" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "yes" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized7__4 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina(\gen_wr_a.gen_word_narrow.mem_reg ),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(i_en_IBUF),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(wea),
        .web(1'b0));
endmodule

module xpm_memory_sprom
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized0
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized0 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized1
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized1 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized2
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized2 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized3
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized3 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized4
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b001011110110100001101111011011010110010100101111011000100110001101101000011001010110111001100111001011110111011101101111011100100110101101110011011100000110000101100011011001010010111101100100011001010111011000101111011100000110110001100001011000110110010100101101011000010110111001100100001011010111001001101111011101010111010001100101001011110110100001100100011011000010111101110110011001010111001001101001011011000110111101100111001011110110011001101001011100100101111101100110011010010110110001110100011001010111001000101111011100110111001001100011001011110111011101100101011010010110011101101000011101000111001101011111000000000000000000000000001100000000000000000000000000000011010100101110011011010110010101101101" *) 
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized4 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized5
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized5 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule

(* ORIG_REF_NAME = "xpm_memory_sprom" *) 
module xpm_memory_sprom__parameterized6
   (douta,
    CLK,
    i_rst_IBUF,
    ena,
    i_en_IBUF,
    Q);
  output [23:0]douta;
  input CLK;
  input i_rst_IBUF;
  input ena;
  input i_en_IBUF;
  input [4:0]Q;

  wire CLK;
  wire [4:0]Q;
  wire [23:0]douta;
  wire ena;
  wire i_en_IBUF;
  wire i_rst_IBUF;
  wire NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED;
  wire NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED;
  wire [23:0]NLW_xpm_memory_base_inst_doutb_UNCONNECTED;

  (* ADDR_WIDTH_A = "5" *) 
  (* ADDR_WIDTH_B = "5" *) 
  (* AUTO_SLEEP_TIME = "0" *) 
  (* BYTE_WRITE_WIDTH_A = "24" *) 
  (* BYTE_WRITE_WIDTH_B = "24" *) 
  (* CASCADE_HEIGHT = "0" *) 
  (* CLOCKING_MODE = "0" *) 
  (* ECC_BIT_RANGE = "7:0" *) 
  (* ECC_MODE = "0" *) 
  (* ECC_TYPE = "none" *) 
  (* IGNORE_INIT_SYNTH = "0" *) 
  (* KEEP_HIERARCHY = "true" *) 
  (* MAX_NUM_CHAR = "0" *) 
  (* \MEM.ADDRESS_SPACE  *) 
  (* \MEM.ADDRESS_SPACE_BEGIN  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_LSB  = "0" *) 
  (* \MEM.ADDRESS_SPACE_DATA_MSB  = "23" *) 
  (* \MEM.ADDRESS_SPACE_END  = "31" *) 
  (* \MEM.CORE_MEMORY_WIDTH  = "24" *) 
  (* MEMORY_INIT_FILE = "720'b
  (* MEMORY_INIT_PARAM = "0" *) 
  (* MEMORY_OPTIMIZATION = "false" *) 
  (* MEMORY_PRIMITIVE = "2" *) 
  (* MEMORY_SIZE = "768" *) 
  (* MEMORY_TYPE = "3" *) 
  (* MESSAGE_CONTROL = "0" *) 
  (* NUM_CHAR_LOC = "0" *) 
  (* P_ECC_MODE = "no_ecc" *) 
  (* P_ENABLE_BYTE_WRITE_A = "0" *) 
  (* P_ENABLE_BYTE_WRITE_B = "0" *) 
  (* P_MAX_DEPTH_DATA = "32" *) 
  (* P_MEMORY_OPT = "no" *) 
  (* P_MEMORY_PRIMITIVE = "block" *) 
  (* P_MIN_WIDTH_DATA = "24" *) 
  (* P_MIN_WIDTH_DATA_A = "24" *) 
  (* P_MIN_WIDTH_DATA_B = "24" *) 
  (* P_MIN_WIDTH_DATA_ECC = "24" *) 
  (* P_MIN_WIDTH_DATA_LDW = "4" *) 
  (* P_MIN_WIDTH_DATA_SHFT = "24" *) 
  (* P_NUM_COLS_WRITE_A = "1" *) 
  (* P_NUM_COLS_WRITE_B = "1" *) 
  (* P_NUM_ROWS_READ_A = "1" *) 
  (* P_NUM_ROWS_READ_B = "1" *) 
  (* P_NUM_ROWS_WRITE_A = "1" *) 
  (* P_NUM_ROWS_WRITE_B = "1" *) 
  (* P_SDP_WRITE_MODE = "yes" *) 
  (* P_WIDTH_ADDR_LSB_READ_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_READ_B = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_A = "0" *) 
  (* P_WIDTH_ADDR_LSB_WRITE_B = "0" *) 
  (* P_WIDTH_ADDR_READ_A = "5" *) 
  (* P_WIDTH_ADDR_READ_B = "5" *) 
  (* P_WIDTH_ADDR_WRITE_A = "5" *) 
  (* P_WIDTH_ADDR_WRITE_B = "5" *) 
  (* P_WIDTH_COL_WRITE_A = "24" *) 
  (* P_WIDTH_COL_WRITE_B = "24" *) 
  (* RAM_DECOMP = "auto" *) 
  (* READ_DATA_WIDTH_A = "24" *) 
  (* READ_DATA_WIDTH_B = "24" *) 
  (* READ_LATENCY_A = "1" *) 
  (* READ_LATENCY_B = "1" *) 
  (* READ_RESET_VALUE_A = "0" *) 
  (* READ_RESET_VALUE_B = "0" *) 
  (* RST_MODE_A = "SYNC" *) 
  (* RST_MODE_B = "SYNC" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* USE_EMBEDDED_CONSTRAINT = "0" *) 
  (* USE_MEM_INIT = "1" *) 
  (* USE_MEM_INIT_MMI = "0" *) 
  (* VERSION = "0" *) 
  (* WAKEUP_TIME = "0" *) 
  (* WRITE_DATA_WIDTH_A = "24" *) 
  (* WRITE_DATA_WIDTH_B = "24" *) 
  (* WRITE_MODE_A = "1" *) 
  (* WRITE_MODE_B = "1" *) 
  (* WRITE_PROTECT = "1" *) 
  (* XPM_MODULE = "TRUE" *) 
  (* rsta_loop_iter = "24" *) 
  (* rstb_loop_iter = "24" *) 
  xpm_memory_base__parameterized6 xpm_memory_base_inst
       (.addra(Q),
        .addrb({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .clka(CLK),
        .clkb(1'b0),
        .dbiterra(NLW_xpm_memory_base_inst_dbiterra_UNCONNECTED),
        .dbiterrb(NLW_xpm_memory_base_inst_dbiterrb_UNCONNECTED),
        .dina({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .dinb({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .douta(douta),
        .doutb(NLW_xpm_memory_base_inst_doutb_UNCONNECTED[23:0]),
        .ena(ena),
        .enb(1'b0),
        .injectdbiterra(1'b0),
        .injectdbiterrb(1'b0),
        .injectsbiterra(1'b0),
        .injectsbiterrb(1'b0),
        .regcea(i_en_IBUF),
        .regceb(1'b0),
        .rsta(i_rst_IBUF),
        .rstb(1'b0),
        .sbiterra(NLW_xpm_memory_base_inst_sbiterra_UNCONNECTED),
        .sbiterrb(NLW_xpm_memory_base_inst_sbiterrb_UNCONNECTED),
        .sleep(1'b0),
        .wea(1'b0),
        .web(1'b0));
endmodule
`define XIL_TIMING
///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2009 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 10.1
//  \   \         Description : Xilinx Functional Simulation Library Component
//  /   /                  GND Connection
// /___/   /\     Filename : GND.v
// \   \  /  \    Timestamp : Thu Mar 25 16:42:19 PST 2004
//  \___\/\___\
//
// Revision:
//    03/23/04 - Initial version.
//    05/23/07 - Changed timescale to 1 ps / 1 ps.

`timescale  1 ps / 1 ps


`celldefine

module GND(G);


`ifdef XIL_TIMING

    parameter LOC = "UNPLACED";

`endif

    output G;

    assign G = 1'b0;

endmodule

`endcelldefine


///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  2-Bit Look-Up Table
// /___/   /\     Filename : LUT2.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    03/23/04 - Initial version.
//    03/11/05 - Add LOC Parameter
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT2 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [3:0] INIT = 4'h0
)(
  output O,

  input I0,
  input I1
);

// define constants
  localparam MODULE_NAME = "LUT2";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT2_dr.v"
`else
  reg [3:0] INIT_REG = INIT;
`endif

  x_lut2_mux4 (O, INIT_REG[3], INIT_REG[2], INIT_REG[1], INIT_REG[0], I1, I0);

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	(I1 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

primitive x_lut2_mux4 (o, d3, d2, d1, d0, s1, s0);

  output o;
  input d3, d2, d1, d0;
  input s1, s0;

  table

    // d3  d2  d1  d0  s1  s0 : o;

       ?   ?   ?   1   0   0  : 1;
       ?   ?   ?   0   0   0  : 0;
       ?   ?   1   ?   0   1  : 1;
       ?   ?   0   ?   0   1  : 0;
       ?   1   ?   ?   1   0  : 1;
       ?   0   ?   ?   1   0  : 0;
       1   ?   ?   ?   1   1  : 1;
       0   ?   ?   ?   1   1  : 0;

       ?   ?   0   0   0   x  : 0;
       ?   ?   1   1   0   x  : 1;
       0   0   ?   ?   1   x  : 0;
       1   1   ?   ?   1   x  : 1;

       ?   0   ?   0   x   0  : 0;
       ?   1   ?   1   x   0  : 1;
       0   ?   0   ?   x   1  : 0;
       1   ?   1   ?   x   1  : 1;

       0   0   0   0   x   x  : 0;
       1   1   1   1   x   x  : 1;

  endtable

endprimitive

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  3-Bit Look-Up Table
// /___/   /\     Filename : LUT3.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    03/23/04 - Initial version.
//    03/11/05 - Add LOC Parameter
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT3 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [7:0] INIT = 8'h00
)(
  output O,

  input I0,
  input I1,
  input I2
);

// define constants
  localparam MODULE_NAME = "LUT3";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT3_dr.v"
`else
  reg [7:0] INIT_REG = INIT;
`endif

  x_lut3_mux8 (O, INIT_REG[7], INIT_REG[6], INIT_REG[5], INIT_REG[4], INIT_REG[3], INIT_REG[2], INIT_REG[1], INIT_REG[0], I2, I1, I0);

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	(I1 => O) = (0:0:0, 0:0:0);
	(I2 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

primitive x_lut3_mux8 (o, d7, d6, d5, d4, d3, d2, d1, d0, s2, s1, s0);

  output o;
  input d7, d6, d5, d4, d3, d2, d1, d0;
  input s2, s1, s0;

  table

    // d7  d6  d5  d4  d3  d2  d1  d0  s2  s1  s0 : o;

       ?   ?   ?   ?   ?   ?   ?   1   0   0   0  : 1;
       ?   ?   ?   ?   ?   ?   ?   0   0   0   0  : 0;
       ?   ?   ?   ?   ?   ?   1   ?   0   0   1  : 1;
       ?   ?   ?   ?   ?   ?   0   ?   0   0   1  : 0;
       ?   ?   ?   ?   ?   1   ?   ?   0   1   0  : 1;
       ?   ?   ?   ?   ?   0   ?   ?   0   1   0  : 0;
       ?   ?   ?   ?   1   ?   ?   ?   0   1   1  : 1;
       ?   ?   ?   ?   0   ?   ?   ?   0   1   1  : 0;
       ?   ?   ?   1   ?   ?   ?   ?   1   0   0  : 1;
       ?   ?   ?   0   ?   ?   ?   ?   1   0   0  : 0;
       ?   ?   1   ?   ?   ?   ?   ?   1   0   1  : 1;
       ?   ?   0   ?   ?   ?   ?   ?   1   0   1  : 0;
       ?   1   ?   ?   ?   ?   ?   ?   1   1   0  : 1;
       ?   0   ?   ?   ?   ?   ?   ?   1   1   0  : 0;
       1   ?   ?   ?   ?   ?   ?   ?   1   1   1  : 1;
       0   ?   ?   ?   ?   ?   ?   ?   1   1   1  : 0;

       ?   ?   ?   ?   ?   ?   0   0   0   0   x  : 0;
       ?   ?   ?   ?   ?   ?   1   1   0   0   x  : 1;
       ?   ?   ?   ?   0   0   ?   ?   0   1   x  : 0;
       ?   ?   ?   ?   1   1   ?   ?   0   1   x  : 1;
       ?   ?   0   0   ?   ?   ?   ?   1   0   x  : 0;
       ?   ?   1   1   ?   ?   ?   ?   1   0   x  : 1;
       0   0   ?   ?   ?   ?   ?   ?   1   1   x  : 0;
       1   1   ?   ?   ?   ?   ?   ?   1   1   x  : 1;

       ?   ?   ?   ?   ?   0   ?   0   0   x   0  : 0;
       ?   ?   ?   ?   ?   1   ?   1   0   x   0  : 1;
       ?   ?   ?   ?   0   ?   0   ?   0   x   1  : 0;
       ?   ?   ?   ?   1   ?   1   ?   0   x   1  : 1;
       ?   0   ?   0   ?   ?   ?   ?   1   x   0  : 0;
       ?   1   ?   1   ?   ?   ?   ?   1   x   0  : 1;
       0   ?   0   ?   ?   ?   ?   ?   1   x   1  : 0;
       1   ?   1   ?   ?   ?   ?   ?   1   x   1  : 1;

       ?   ?   ?   0   ?   ?   ?   0   x   0   0  : 0;
       ?   ?   ?   1   ?   ?   ?   1   x   0   0  : 1;
       ?   ?   0   ?   ?   ?   0   ?   x   0   1  : 0;
       ?   ?   1   ?   ?   ?   1   ?   x   0   1  : 1;
       ?   0   ?   ?   ?   0   ?   ?   x   1   0  : 0;
       ?   1   ?   ?   ?   1   ?   ?   x   1   0  : 1;
       0   ?   ?   ?   0   ?   ?   ?   x   1   1  : 0;
       1   ?   ?   ?   1   ?   ?   ?   x   1   1  : 1;

       ?   ?   ?   ?   0   0   0   0   0   x   x  : 0;
       ?   ?   ?   ?   1   1   1   1   0   x   x  : 1;
       0   0   0   0   ?   ?   ?   ?   1   x   x  : 0;
       1   1   1   1   ?   ?   ?   ?   1   x   x  : 1;

       ?   ?   0   0   ?   ?   0   0   x   0   x  : 0;
       ?   ?   1   1   ?   ?   1   1   x   0   x  : 1;
       0   0   ?   ?   0   0   ?   ?   x   1   x  : 0;
       1   1   ?   ?   1   1   ?   ?   x   1   x  : 1;

       ?   0   ?   0   ?   0   ?   0   x   x   0  : 0;
       ?   1   ?   1   ?   1   ?   1   x   x   0  : 1;
       0   ?   0   ?   0   ?   0   ?   x   x   1  : 0;
       1   ?   1   ?   1   ?   1   ?   x   x   1  : 1;

       0   0   0   0   0   0   0   0   x   x   x  : 0;
       1   1   1   1   1   1   1   1   x   x   x  : 1;

  endtable

endprimitive

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  4-Bit Look-Up Table
// /___/   /\     Filename : LUT4.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    03/23/04 - Initial version.
//    02/04/05 - Replace primitive with function; Remove buf.
//    03/11/05 - Add LOC Parameter
//    06/04/07 - Add wire declaration to internal signal.
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT4 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [15:0] INIT = 16'h0000
)(
  output O,

  input I0,
  input I1,
  input I2,
  input I3
);

// define constants
  localparam MODULE_NAME = "LUT4";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT4_dr.v"
`else
  reg [15:0] INIT_REG = INIT;
`endif

// begin behavioral model

  reg O_out;

  assign O = O_out;

  function lut_mux4_f;
  input [3:0] d;
  input [1:0] s;
  begin
    if (((s[1]^s[0]) === 1'b1) || ((s[1]^s[0]) === 1'b0))
      lut_mux4_f = d[s];
    else if ( ~(|d) || &d)
      lut_mux4_f = d[0];
    else if (((s[0] === 1'b1) || (s[0] === 1'b0)) && (d[{1'b0,s[0]}] === d[{1'b1,s[0]}]))
      lut_mux4_f = d[{1'b0,s[0]}];
    else if (((s[1] === 1'b1) || (s[1] === 1'b0)) && (d[{s[1],1'b0}] === d[{s[1],1'b1}]))
      lut_mux4_f = d[{s[1],1'b0}];
    else
      lut_mux4_f = 1'bx;
  end
  endfunction

 always @(I0 or I1 or I2 or I3)  begin
   if ( (I0 ^ I1  ^ I2 ^ I3) === 1'b0 || (I0 ^ I1  ^ I2 ^ I3) === 1'b1)
    O_out = INIT_REG[{I3, I2, I1, I0}];
   else if ( ~(|INIT_REG) || &INIT_REG )
    O_out = INIT_REG[0];
   else
    O_out = lut_mux4_f ({lut_mux4_f (INIT_REG[15:12], {I1, I0}),
                     lut_mux4_f ( INIT_REG[11:8], {I1, I0}),
                     lut_mux4_f (  INIT_REG[7:4], {I1, I0}),
                     lut_mux4_f (  INIT_REG[3:0], {I1, I0})}, {I3, I2});
  end

// end behavioral model

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	(I1 => O) = (0:0:0, 0:0:0);
	(I2 => O) = (0:0:0, 0:0:0);
	(I3 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  5-Bit Look-Up Table
// /___/   /\     Filename : LUT5.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    03/23/04 - Initial version.
//    02/04/05 - Replace primitive with function; Remove buf.
//    01/07/06 - 222733 - Add LOC Parameter
//    06/04/07 - Add wire declaration to internal signal.
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT5 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [31:0] INIT = 32'h00000000
)(
  output O,

  input I0,
  input I1,
  input I2,
  input I3,
  input I4
);

// define constants
  localparam MODULE_NAME = "LUT5";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT5_dr.v"
`else
  reg [31:0] INIT_REG = INIT;
`endif

// begin behavioral model

  reg O_out;

  assign O = O_out;

  function lut_mux4_f;
  input [3:0] d;
  input [1:0] s;
  begin
    if (((s[1]^s[0]) === 1'b1) || ((s[1]^s[0]) === 1'b0))
      lut_mux4_f = d[s];
    else if ( ~(|d) || &d)
      lut_mux4_f = d[0];
    else if (((s[0] === 1'b1) || (s[0] === 1'b0)) && (d[{1'b0,s[0]}] === d[{1'b1,s[0]}]))
      lut_mux4_f = d[{1'b0,s[0]}];
    else if (((s[1] === 1'b1) || (s[1] === 1'b0)) && (d[{s[1],1'b0}] === d[{s[1],1'b1}]))
      lut_mux4_f = d[{s[1],1'b0}];
    else
      lut_mux4_f = 1'bx;
  end
  endfunction

  function lut_mux8_f;
  input [7:0] d;
  input [2:0] s;
  begin
    if (((s[2]^s[1]^s[0]) === 1'b1) || ((s[2]^s[1]^s[0]) === 1'b0))
      lut_mux8_f = d[s];
    else if ( ~(|d) || &d)
      lut_mux8_f = d[0];
    else if ((((s[1]^s[0]) === 1'b1) || ((s[1]^s[0]) === 1'b0)) &&
             (d[{1'b0,s[1:0]}] === d[{1'b1,s[1:0]}]))
      lut_mux8_f = d[{1'b0,s[1:0]}];
    else if ((((s[2]^s[0]) === 1'b1) || ((s[2]^s[0]) === 1'b0)) &&
             (d[{s[2],1'b0,s[0]}] === d[{s[2],1'b1,s[0]}]))
      lut_mux8_f = d[{s[2],1'b0,s[0]}];
    else if ((((s[2]^s[1]) === 1'b1) || ((s[2]^s[1]) === 1'b0)) &&
             (d[{s[2],s[1],1'b0}] === d[{s[2],s[1],1'b1}]))
      lut_mux8_f = d[{s[2:1],1'b0}];
    else if (((s[0] === 1'b1) || (s[0] === 1'b0)) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b0,1'b1,s[0]}]) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b1,1'b0,s[0]}]) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b1,1'b1,s[0]}]))
      lut_mux8_f = d[{1'b0,1'b0,s[0]}];
    else if (((s[1] === 1'b1) || (s[1] === 1'b0)) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b0,s[1],1'b1}]) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b1,s[1],1'b0}]) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b1,s[1],1'b1}]))
      lut_mux8_f = d[{1'b0,s[1],1'b0}];
    else if (((s[2] === 1'b1) || (s[2] === 1'b0)) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b0,1'b1}]) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b1,1'b0}]) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b1,1'b1}]))
      lut_mux8_f = d[{s[2],1'b0,1'b0}];
    else
      lut_mux8_f = 1'bx;
  end
  endfunction

 always @(I0 or I1 or I2 or I3 or I4)  begin
   if ( (I0 ^ I1  ^ I2 ^ I3 ^ I4) === 1'b0 || (I0 ^ I1  ^ I2 ^ I3 ^ I4) === 1'b1)
     O_out = INIT_REG[{I4, I3, I2, I1, I0}];
   else if ( ~(|INIT_REG) || &INIT_REG )
     O_out = INIT_REG[0];
   else
     O_out = lut_mux4_f ({lut_mux8_f (INIT_REG[31:24], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[23:16], {I2, I1, I0}),
                      lut_mux8_f ( INIT_REG[15:8], {I2, I1, I0}),
                      lut_mux8_f (  INIT_REG[7:0], {I2, I1, I0})}, {I4, I3});
  end

// end behavioral model

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	(I1 => O) = (0:0:0, 0:0:0);
	(I2 => O) = (0:0:0, 0:0:0);
	(I3 => O) = (0:0:0, 0:0:0);
	(I4 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  6-Bit Look-Up Table
// /___/   /\     Filename : LUT6.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    03/23/04 - Initial version.
//    02/04/05 - Replace primitive with function; Remove buf.
//    01/07/06 - 222733 - Add LOC Parameter
//    06/04/07 - Add wire declaration to internal signal.
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT6 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [63:0] INIT = 64'h0000000000000000
)(
  output O,

  input I0,
  input I1,
  input I2,
  input I3,
  input I4,
  input I5
);

// define constants
  localparam MODULE_NAME = "LUT6";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT6_dr.v"
`else
  reg [63:0] INIT_REG = INIT;
`endif

// begin behavioral model

  reg O_out;

  assign O = O_out;

  function lut_mux8_f;
  input [7:0] d;
  input [2:0] s;
  begin
    if (((s[2]^s[1]^s[0]) === 1'b1) || ((s[2]^s[1]^s[0]) === 1'b0))
      lut_mux8_f = d[s];
    else if ( ~(|d) || &d)
      lut_mux8_f = d[0];
    else if ((((s[1]^s[0]) === 1'b1) || ((s[1]^s[0]) === 1'b0)) &&
             (d[{1'b0,s[1:0]}] === d[{1'b1,s[1:0]}]))
      lut_mux8_f = d[{1'b0,s[1:0]}];
    else if ((((s[2]^s[0]) === 1'b1) || ((s[2]^s[0]) === 1'b0)) &&
             (d[{s[2],1'b0,s[0]}] === d[{s[2],1'b1,s[0]}]))
      lut_mux8_f = d[{s[2],1'b0,s[0]}];
    else if ((((s[2]^s[1]) === 1'b1) || ((s[2]^s[1]) === 1'b0)) &&
             (d[{s[2],s[1],1'b0}] === d[{s[2],s[1],1'b1}]))
      lut_mux8_f = d[{s[2:1],1'b0}];
    else if (((s[0] === 1'b1) || (s[0] === 1'b0)) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b0,1'b1,s[0]}]) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b1,1'b0,s[0]}]) &&
             (d[{1'b0,1'b0,s[0]}] === d[{1'b1,1'b1,s[0]}]))
      lut_mux8_f = d[{1'b0,1'b0,s[0]}];
    else if (((s[1] === 1'b1) || (s[1] === 1'b0)) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b0,s[1],1'b1}]) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b1,s[1],1'b0}]) &&
             (d[{1'b0,s[1],1'b0}] === d[{1'b1,s[1],1'b1}]))
      lut_mux8_f = d[{1'b0,s[1],1'b0}];
    else if (((s[2] === 1'b1) || (s[2] === 1'b0)) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b0,1'b1}]) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b1,1'b0}]) &&
             (d[{s[2],1'b0,1'b0}] === d[{s[2],1'b1,1'b1}]))
      lut_mux8_f = d[{s[2],1'b0,1'b0}];
    else
      lut_mux8_f = 1'bx;
  end
  endfunction

 always @(I0 or I1 or I2 or I3 or I4 or I5)  begin
   if ( (I0 ^ I1  ^ I2 ^ I3 ^ I4 ^ I5) === 1'b0 || (I0 ^ I1  ^ I2 ^ I3 ^ I4 ^ I5) === 1'b1)
     O_out = INIT_REG[{I5, I4, I3, I2, I1, I0}];
   else if ( ~(|INIT_REG) || &INIT_REG )
     O_out = INIT_REG[0];
   else
     O_out = lut_mux8_f ({lut_mux8_f (INIT_REG[63:56], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[55:48], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[47:40], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[39:32], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[31:24], {I2, I1, I0}),
                      lut_mux8_f (INIT_REG[23:16], {I2, I1, I0}),
                      lut_mux8_f ( INIT_REG[15:8], {I2, I1, I0}),
                      lut_mux8_f (  INIT_REG[7:0], {I2, I1, I0})}, {I5, I4, I3});
 end

// end behavioral model

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	(I1 => O) = (0:0:0, 0:0:0);
	(I2 => O) = (0:0:0, 0:0:0);
	(I3 => O) = (0:0:0, 0:0:0);
	(I4 => O) = (0:0:0, 0:0:0);
	(I5 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2018 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2018.1
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        Fast Carry Logic with Look Ahead
// /___/   /\      Filename    : CARRY4.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    04/11/05 - Initial version.
//    05/06/05 - Unused CYINT or CI pin need grounded instead of open (CR207752)
//    05/31/05 - Change pin order, remove connection check for CYINIT and CI.
//    12/21/05 - Add timing path.
//    04/13/06 - Add full timing path for DI to O (CR228786)
//    06/04/07 - Add wire definition.
//    12/13/11 - Added `celldefine and `endcelldefine (CR 524859).
//    04/13/12 - CR655410 - add pulldown, CI, CYINIT, sync uni/sim/unp
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module CARRY4 
`ifdef XIL_TIMING
#(
  parameter LOC = "UNPLACED"
)
`endif
(
  output [3:0] CO,
  output [3:0] O,

  input CI,
  input CYINIT,
  input [3:0] DI,
  input [3:0] S
);
  
// define constants
  localparam MODULE_NAME = "CARRY4";

`ifdef XIL_XECLIB
  reg glblGSR = 1'b0;
`else
  tri0 glblGSR = glbl.GSR;
`endif

  wire CI_in;
  wire CYINIT_in;
  wire [3:0] DI_in;
  wire [3:0] S_in;

  assign CI_in = (CI !== 1'bz) && CI; // rv 0
  assign CYINIT_in = (CYINIT !== 1'bz) && CYINIT; // rv 0
  assign DI_in = DI;
  assign S_in = S;

// begin behavioral model

  wire [3:0] CO_fb;
  assign CO_fb = {CO[2:0], CI_in || CYINIT_in};
  assign O = S_in ^ CO_fb;
  assign CO = (S_in & CO_fb) | (~S_in & DI_in);

// end behavioral model

`ifndef XIL_XECLIB
`ifdef XIL_TIMING
  specify
    (CI => CO[0]) = (0:0:0, 0:0:0);
    (CI => CO[1]) = (0:0:0, 0:0:0);
    (CI => CO[2]) = (0:0:0, 0:0:0);
    (CI => CO[3]) = (0:0:0, 0:0:0);
    (CI => O[0]) = (0:0:0, 0:0:0);
    (CI => O[1]) = (0:0:0, 0:0:0);
    (CI => O[2]) = (0:0:0, 0:0:0);
    (CI => O[3]) = (0:0:0, 0:0:0);
    (CYINIT => CO[0]) = (0:0:0, 0:0:0);
    (CYINIT => CO[1]) = (0:0:0, 0:0:0);
    (CYINIT => CO[2]) = (0:0:0, 0:0:0);
    (CYINIT => CO[3]) = (0:0:0, 0:0:0);
    (CYINIT => O[0]) = (0:0:0, 0:0:0);
    (CYINIT => O[1]) = (0:0:0, 0:0:0);
    (CYINIT => O[2]) = (0:0:0, 0:0:0);
    (CYINIT => O[3]) = (0:0:0, 0:0:0);
    (DI[0] => CO[0]) = (0:0:0, 0:0:0);
    (DI[0] => CO[1]) = (0:0:0, 0:0:0);
    (DI[0] => CO[2]) = (0:0:0, 0:0:0);
    (DI[0] => CO[3]) = (0:0:0, 0:0:0);
    (DI[0] => O[0]) = (0:0:0, 0:0:0);
    (DI[0] => O[1]) = (0:0:0, 0:0:0);
    (DI[0] => O[2]) = (0:0:0, 0:0:0);
    (DI[0] => O[3]) = (0:0:0, 0:0:0);
    (DI[1] => CO[0]) = (0:0:0, 0:0:0);
    (DI[1] => CO[1]) = (0:0:0, 0:0:0);
    (DI[1] => CO[2]) = (0:0:0, 0:0:0);
    (DI[1] => CO[3]) = (0:0:0, 0:0:0);
    (DI[1] => O[0]) = (0:0:0, 0:0:0);
    (DI[1] => O[1]) = (0:0:0, 0:0:0);
    (DI[1] => O[2]) = (0:0:0, 0:0:0);
    (DI[1] => O[3]) = (0:0:0, 0:0:0);
    (DI[2] => CO[0]) = (0:0:0, 0:0:0);
    (DI[2] => CO[1]) = (0:0:0, 0:0:0);
    (DI[2] => CO[2]) = (0:0:0, 0:0:0);
    (DI[2] => CO[3]) = (0:0:0, 0:0:0);
    (DI[2] => O[0]) = (0:0:0, 0:0:0);
    (DI[2] => O[1]) = (0:0:0, 0:0:0);
    (DI[2] => O[2]) = (0:0:0, 0:0:0);
    (DI[2] => O[3]) = (0:0:0, 0:0:0);
    (DI[3] => CO[0]) = (0:0:0, 0:0:0);
    (DI[3] => CO[1]) = (0:0:0, 0:0:0);
    (DI[3] => CO[2]) = (0:0:0, 0:0:0);
    (DI[3] => CO[3]) = (0:0:0, 0:0:0);
    (DI[3] => O[0]) = (0:0:0, 0:0:0);
    (DI[3] => O[1]) = (0:0:0, 0:0:0);
    (DI[3] => O[2]) = (0:0:0, 0:0:0);
    (DI[3] => O[3]) = (0:0:0, 0:0:0);
    (S[0] => CO[0]) = (0:0:0, 0:0:0);
    (S[0] => CO[1]) = (0:0:0, 0:0:0);
    (S[0] => CO[2]) = (0:0:0, 0:0:0);
    (S[0] => CO[3]) = (0:0:0, 0:0:0);
    (S[0] => O[0]) = (0:0:0, 0:0:0);
    (S[0] => O[1]) = (0:0:0, 0:0:0);
    (S[0] => O[2]) = (0:0:0, 0:0:0);
    (S[0] => O[3]) = (0:0:0, 0:0:0);
    (S[1] => CO[0]) = (0:0:0, 0:0:0);
    (S[1] => CO[1]) = (0:0:0, 0:0:0);
    (S[1] => CO[2]) = (0:0:0, 0:0:0);
    (S[1] => CO[3]) = (0:0:0, 0:0:0);
    (S[1] => O[0]) = (0:0:0, 0:0:0);
    (S[1] => O[1]) = (0:0:0, 0:0:0);
    (S[1] => O[2]) = (0:0:0, 0:0:0);
    (S[1] => O[3]) = (0:0:0, 0:0:0);
    (S[2] => CO[0]) = (0:0:0, 0:0:0);
    (S[2] => CO[1]) = (0:0:0, 0:0:0);
    (S[2] => CO[2]) = (0:0:0, 0:0:0);
    (S[2] => CO[3]) = (0:0:0, 0:0:0);
    (S[2] => O[0]) = (0:0:0, 0:0:0);
    (S[2] => O[1]) = (0:0:0, 0:0:0);
    (S[2] => O[2]) = (0:0:0, 0:0:0);
    (S[2] => O[3]) = (0:0:0, 0:0:0);
    (S[3] => CO[0]) = (0:0:0, 0:0:0);
    (S[3] => CO[1]) = (0:0:0, 0:0:0);
    (S[3] => CO[2]) = (0:0:0, 0:0:0);
    (S[3] => CO[3]) = (0:0:0, 0:0:0);
    (S[3] => O[0]) = (0:0:0, 0:0:0);
    (S[3] => O[1]) = (0:0:0, 0:0:0);
    (S[3] => O[2]) = (0:0:0, 0:0:0);
    (S[3] => O[3]) = (0:0:0, 0:0:0);
    specparam PATHPULSE$ = 0;
  endspecify
`endif
`endif
endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor      : Xilinx
// \   \   \/     Version     : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  1-Bit Look-Up Table
// /___/   /\     Filename : LUT1.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//    05/12/11 - Initial version.
//    12/13/11 - 524859 - Added `celldefine and `endcelldefine
//    09/12/16 - ANSI ports, speed improvements
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps/1 ps

`celldefine

module LUT1 #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter [1:0] INIT = 2'h0
)(
  output O,

  input I0
);

// define constants
  localparam MODULE_NAME = "LUT1";

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "LUT1_dr.v"
`else
  reg [1:0] INIT_REG = INIT;
`endif

  x_lut1_mux2 (O, INIT_REG[1], INIT_REG[0], I0);

`ifdef XIL_TIMING
  specify
	(I0 => O) = (0:0:0, 0:0:0);
	specparam PATHPULSE$ = 0;
  endspecify
`endif

endmodule

`endcelldefine

primitive x_lut1_mux2 (o, d1, d0, s0);

  output o;
  input  d1, d0;
  input  s0;

  table

    //         d1  d0      s0 : o;

               ?   1       0  : 1;
               ?   0       0  : 0;
               1   ?       1  : 1;
               0   ?       1  : 0;

               0   0       x  : 0;
               1   1       x  : 1;

  endtable

endprimitive

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2009 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 10.1
//  \   \         Description : Xilinx Functional Simulation Library Component
//  /   /                  VCC Connection
// /___/   /\     Filename : VCC.v
// \   \  /  \    Timestamp : Thu Mar 25 16:43:41 PST 2004
//  \___\/\___\
//
// Revision:
//    03/23/04 - Initial version.
//    05/23/07 - Changed timescale to 1 ps / 1 ps.
//    12/13/11 - Added `celldefine and `endcelldefine (CR 524859).
// End Revision

`timescale  1 ps / 1 ps


`celldefine

module VCC(P);


`ifdef XIL_TIMING

    parameter LOC = "UNPLACED";

`endif


    output P;

    assign P = 1'b1;

endmodule

`endcelldefine


///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2015 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2016.1
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        18X18 Signed Multiplier Followed by Three-Input Adder plus ALU with Pipeline Registers
// /___/   /\     Filename     : DSP48E1.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
// Revision:
//    05/21/09 - Initial version.
//    12/13/11 - Added `celldefine and `endcelldefine (CR 524859).
//    07/24/13 - add optinv
//    10/22/14 - Added #1 to $finish (CR 808642).
// End Revision
///////////////////////////////////////////////////////////////////////////////

`timescale  1 ps / 1 ps

`celldefine

module DSP48E1 #(
  `ifdef XIL_TIMING
  parameter LOC = "UNPLACED",  
  `endif
  parameter integer ACASCREG = 1,
  parameter integer ADREG = 1,
  parameter integer ALUMODEREG = 1,
  parameter integer AREG = 1,
  parameter AUTORESET_PATDET = "NO_RESET",
  parameter A_INPUT = "DIRECT",
  parameter integer BCASCREG = 1,
  parameter integer BREG = 1,
  parameter B_INPUT = "DIRECT",
  parameter integer CARRYINREG = 1,
  parameter integer CARRYINSELREG = 1,
  parameter integer CREG = 1,
  parameter integer DREG = 1,
  parameter integer INMODEREG = 1,
  parameter [3:0] IS_ALUMODE_INVERTED = 4'b0000,
  parameter [0:0] IS_CARRYIN_INVERTED = 1'b0,
  parameter [0:0] IS_CLK_INVERTED = 1'b0,
  parameter [4:0] IS_INMODE_INVERTED = 5'b00000,
  parameter [6:0] IS_OPMODE_INVERTED = 7'b0000000,
  parameter [47:0] MASK = 48'h3FFFFFFFFFFF,
  parameter integer MREG = 1,
  parameter integer OPMODEREG = 1,
  parameter [47:0] PATTERN = 48'h000000000000,
  parameter integer PREG = 1,
  parameter SEL_MASK = "MASK",
  parameter SEL_PATTERN = "PATTERN",
  parameter USE_DPORT = "FALSE",
  parameter USE_MULT = "MULTIPLY",
  parameter USE_PATTERN_DETECT = "NO_PATDET",
  parameter USE_SIMD = "ONE48"
)(
  output [29:0] ACOUT,
  output [17:0] BCOUT,
  output CARRYCASCOUT,
  output [3:0] CARRYOUT,
  output MULTSIGNOUT,
  output OVERFLOW,
  output [47:0] P,
  output PATTERNBDETECT,
  output PATTERNDETECT,
  output [47:0] PCOUT,
  output UNDERFLOW,

  input [29:0] A,
  input [29:0] ACIN,
  input [3:0] ALUMODE,
  input [17:0] B,
  input [17:0] BCIN,
  input [47:0] C,
  input CARRYCASCIN,
  input CARRYIN,
  input [2:0] CARRYINSEL,
  input CEA1,
  input CEA2,
  input CEAD,
  input CEALUMODE,
  input CEB1,
  input CEB2,
  input CEC,
  input CECARRYIN,
  input CECTRL,
  input CED,
  input CEINMODE,
  input CEM,
  input CEP,
  input CLK,
  input [24:0] D,
  input [4:0] INMODE,
  input MULTSIGNIN,
  input [6:0] OPMODE,
  input [47:0] PCIN,
  input RSTA,
  input RSTALLCARRYIN,
  input RSTALUMODE,
  input RSTB,
  input RSTC,
  input RSTCTRL,
  input RSTD,
  input RSTINMODE,
  input RSTM,
  input RSTP
);
  
// define constants
   localparam MODULE_NAME = "DSP48E1";

   tri0  GSR = glbl.GSR;

//------------------- constants -------------------------
   localparam MAX_ACOUT      = 30;
   localparam MAX_BCOUT      = 18;
   localparam MAX_CARRYOUT   = 4;
   localparam MAX_P          = 48;
   localparam MAX_PCOUT      = 48;

   localparam MAX_A          = 30;
   localparam MAX_ACIN       = 30;
   localparam MAX_ALUMODE    = 4;
   localparam MAX_A_MULT     = 25;
   localparam MAX_B          = 18;
   localparam MAX_B_MULT     = 18;
   localparam MAX_BCIN       = 18;
   localparam MAX_C          = 48;
   localparam MAX_CARRYINSEL = 3;
   localparam MAX_D          = 25;
   localparam MAX_INMODE     = 5;
   localparam MAX_OPMODE     = 7;
   localparam MAX_PCIN       = 48;

   localparam MAX_ALU_FULL   = 48;
   localparam MAX_ALU_HALF   = 24;
   localparam MAX_ALU_QUART  = 12;

   localparam MSB_ACOUT      = MAX_ACOUT - 1;
   localparam MSB_BCOUT      = MAX_BCOUT - 1;
   localparam MSB_CARRYOUT   = MAX_CARRYOUT - 1;
   localparam MSB_P          = MAX_P - 1;
   localparam MSB_PCOUT      = MAX_PCOUT - 1;
 
   localparam MSB_A          = MAX_A - 1;
   localparam MSB_ACIN       = MAX_ACIN - 1;
   localparam MSB_ALUMODE    = MAX_ALUMODE - 1;
   localparam MSB_A_MULT     = MAX_A_MULT - 1;
   localparam MSB_B          = MAX_B - 1;
   localparam MSB_B_MULT     = MAX_B_MULT - 1;
   localparam MSB_BCIN       = MAX_BCIN - 1;
   localparam MSB_C          = MAX_C - 1;
   localparam MSB_CARRYINSEL = MAX_CARRYINSEL - 1;
   localparam MSB_D          = MAX_D - 1;
   localparam MSB_INMODE     = MAX_INMODE - 1;
   localparam MSB_OPMODE     = MAX_OPMODE - 1;
   localparam MSB_PCIN       = MAX_PCIN - 1;

   localparam MSB_ALU_FULL   = MAX_ALU_FULL  - 1;
   localparam MSB_ALU_HALF   = MAX_ALU_HALF  - 1;
   localparam MSB_ALU_QUART  = MAX_ALU_QUART - 1;

   localparam SHIFT_MUXZ     = 17;

  wire [3:0] IS_ALUMODE_INVERTED_BIN = IS_ALUMODE_INVERTED;
  wire [0:0] IS_CARRYIN_INVERTED_BIN = IS_CARRYIN_INVERTED;
  wire [0:0] IS_CLK_INVERTED_BIN = IS_CLK_INVERTED;
  wire [4:0] IS_INMODE_INVERTED_BIN = IS_INMODE_INVERTED;
  wire [6:0] IS_OPMODE_INVERTED_BIN = IS_OPMODE_INVERTED;

    reg [29:0] a_o_mux, qa_o_mux, qa_o_reg1, qa_o_reg2, qacout_o_mux;

// new
    reg [4:0]  qinmode_o_mux, qinmode_o_reg;
// new
    wire [24:0] a_preaddsub;

    reg [17:0] b_o_mux, qb_o_mux, qb_o_reg1, qb_o_reg2, qbcout_o_mux;
    reg [2:0] qcarryinsel_o_mux, qcarryinsel_o_reg1;

// new  
    reg [MSB_D:0] d_o_mux, qd_o_mux, qd_o_reg1;

    reg [(MSB_A_MULT+MSB_B_MULT+1):0] qmult_o_mux, qmult_o_reg; // 42:0
    reg [47:0] qc_o_mux, qc_o_reg1;
    reg [47:0] qp_o_mux, qp_o_reg1;
    reg [47:0] qx_o_mux, qy_o_mux, qz_o_mux;
    reg [6:0]  qopmode_o_mux, qopmode_o_reg1;

    reg notifier;

    reg qcarryin_o_mux0, qcarryin_o_reg0, qcarryin_o_mux7, qcarryin_o_reg7;
    reg qcarryin_o_mux, qcarryin_o_reg;

    reg [3:0]  qalumode_o_mux, qalumode_o_reg1;

    reg invalid_opmode, opmode_valid_flag, ping_opmode_drc_check = 0;

//    reg [47:0] alu_o;
    wire [47:0] alu_o;

    reg qmultsignout_o_reg, multsignout_o_mux; 
    wire multsignout_o_opmode;

    reg [MAX_ALU_FULL:0]  alu_full_tmp;
    reg [MAX_ALU_HALF:0]  alu_hlf1_tmp, alu_hlf2_tmp;
    reg [MAX_ALU_QUART:0] alu_qrt1_tmp,  alu_qrt2_tmp, alu_qrt3_tmp, alu_qrt4_tmp;
    
    wire pdet_o_mux, pdetb_o_mux;

    wire [47:0] the_pattern; 
    reg [47:0] the_mask = 0;
    wire carrycascout_o;
    wire the_auto_reset_patdet;
    reg carrycascout_o_reg = 0;
    reg carrycascout_o_mux = 0;

//    reg [3:0] carryout_o = 0;
//  CR 577648
//    reg [3:0] carryout_o_reg = 0;
//    reg [3:0] carryout_o_mux = 0;
//  CR 588861
    reg [3:0] carryout_o_reg = 0;
    reg [3:0] carryout_o_mux;
    wire [3:0] carryout_x_o;

    wire pdet_o, pdetb_o;
    reg  pdet_o_reg1, pdet_o_reg2, pdetb_o_reg1, pdetb_o_reg2;
    wire overflow_o, underflow_o;

    wire [(MSB_A_MULT+MSB_B_MULT+1):0] mult_o;
//    reg [(MSB_A_MULT+MSB_B_MULT+1):0] mult_o;  // 42:0
// new 
    wire [MSB_A_MULT:0] ad_addsub, ad_mult;
    reg  [MSB_A_MULT:0] qad_o_reg1, qad_o_mux;
    wire [MSB_B_MULT:0] b_mult;

    reg cci_drc_msg = 1'b0;
    reg cis_drc_msg = 1'b0;

    wire [MSB_A:0] a_in;
    wire [MSB_ACIN:0] acin_in;
    wire [MSB_B:0] b_in;
    wire [MSB_BCIN:0] bcin_in;
    wire [MSB_CARRYINSEL:0] carryinsel_in;
    wire [MSB_PCIN:0] pcin_in, c_in;
    wire [MSB_OPMODE:0] opmode_in;
    wire [MSB_ALUMODE:0] alumode_in;
    wire carryin_in;
    wire carrycascin_in;
    wire cep_in;
    wire cea1_in;
    wire cea2_in;
    wire cealumode_in;
    wire ceb1_in;
    wire ceb2_in;
    wire cec_in;
    wire cead_in;
    wire ced_in;
    wire cecarryin_in;
    wire cectrl_in;
    wire ceinmode_in;
    wire cem_in;
    wire clk_in;
    wire [MSB_D:0] d_in;
    wire gsr_in;
    wire [MSB_INMODE:0] inmode_in;
    wire multsignin_in;
    wire rstp_in;
    wire rsta_in;
    wire rstalumode_in;
    wire rstb_in;
    wire rstallcarryin_in;
    wire rstc_in;
    wire rstctrl_in;
    wire rstd_in;
    wire rstinmode_in;
    wire rstm_in;

    wire [MSB_A:0] a_dly;
    wire [MSB_ACIN:0] acin_dly;
    wire [MSB_B:0] b_dly;
    wire [MSB_BCIN:0] bcin_dly;
    wire [MSB_CARRYINSEL:0] carryinsel_dly;
    wire [MSB_PCIN:0] pcin_dly, c_dly;
    wire [MSB_OPMODE:0] opmode_dly;
    wire [MSB_ALUMODE:0] alumode_dly;
    wire carryin_dly;
    wire carrycascin_dly;
    wire cep_dly;
    wire cea1_dly;
    wire cea2_dly;
    wire cealumode_dly;
    wire ceb1_dly;
    wire ceb2_dly;
    wire cec_dly;
    wire cead_dly;
    wire ced_dly;
    wire cecarryin_dly;
    wire cectrl_dly;
    wire ceinmode_dly;
    wire cem_dly;
    wire clk_dly;
    wire [MSB_D:0] d_dly;
    wire [MSB_INMODE:0] inmode_dly;
    wire multsignin_dly;
    wire rstp_dly;
    wire rsta_dly;
    wire rstalumode_dly;
    wire rstb_dly;
    wire rstallcarryin_dly;
    wire rstc_dly;
    wire rstctrl_dly;
    wire rstd_dly;
    wire rstinmode_dly;
    wire rstm_dly;

`ifdef XIL_TIMING
//    wire nrsta;
//    wire nrstb;
//    wire nrstc;
//    wire nrstp;
//    wire nrstallcarryin;
//    wire nrstctrl;
    wire cea12_enable;
    wire ceb12_enable;
    wire a_en_n, a_en_p;
    wire b_en_n, b_en_p;
    wire c_en_n, c_en_p;
    wire d_en_n, d_en_p;
    wire acin_en_n, acin_en_p;
    wire bcin_en_n, bcin_en_p;
    wire carryin_en_n, carryin_en_p;
    wire carryinsel_en_n, carryinsel_en_p;
    wire opmode_en_n, opmode_en_p;
    wire inmode_en_n, inmode_en_p;
    wire pcin_en_n, pcin_en_p;
    wire clk_en_n, clk_en_p;
    wire clk_gsr_en_n, clk_gsr_en_p;
    wire clk_rsta_en_n, clk_rsta_en_p;
    wire clk_rstb_en_n, clk_rstb_en_p;
    wire clk_rstc_en_n, clk_rstc_en_p;
    wire clk_rstd_en_n, clk_rstd_en_p;
    wire clk_rstm_en_n, clk_rstm_en_p;
    wire clk_rstp_en_n, clk_rstp_en_p;
    wire clk_rstallcarryin_en_n, clk_rstallcarryin_en_p;
    wire clk_rstctrl_en_n, clk_rstctrl_en_p;
    wire clk_rstinmode_en_n, clk_rstinmode_en_p;
`endif

//----------------------------------------------------------------------
//------------------------  Output Ports  ------------------------------
//----------------------------------------------------------------------
    buf b_acout_o[MSB_ACOUT:0] (ACOUT, qacout_o_mux);
    buf b_bcout_o[MSB_BCOUT:0] (BCOUT, qbcout_o_mux);
    buf b_carrycascout (CARRYCASCOUT, carrycascout_o_mux);
    buf b_carryout[MSB_CARRYOUT:0] (CARRYOUT, carryout_x_o);
    buf b_multsignout (MULTSIGNOUT,  multsignout_o_mux);
    buf b_overflow (OVERFLOW,  overflow_o);
    buf b_p_o[MSB_P:0] (P, qp_o_mux);
    buf b_pcout_o[MSB_PCOUT:0] (PCOUT, qp_o_mux);
    buf b_patterndetect (PATTERNDETECT,  pdet_o_mux);
    buf b_patternbdetect (PATTERNBDETECT, pdetb_o_mux);
    buf b_underflow (UNDERFLOW, underflow_o);

//-----------------------------------------------------
//-----------   Inputs --------------------------------
//-----------------------------------------------------
    buf b_gsr (gsr_in, GSR);

`ifndef XIL_TIMING
      assign a_dly = A;
      assign acin_dly = ACIN;
      assign alumode_dly = ALUMODE;
      assign b_dly = B;
      assign bcin_dly = BCIN;
      assign c_dly = C;
      assign carrycascin_dly = CARRYCASCIN;
      assign carryin_dly = CARRYIN;
      assign carryinsel_dly = CARRYINSEL;
      assign cea1_dly = CEA1;
      assign cea2_dly = CEA2;
      assign cead_dly = CEAD;
      assign cealumode_dly = CEALUMODE;
      assign ceb1_dly = CEB1;
      assign ceb2_dly = CEB2;
      assign cec_dly = CEC;
      assign cecarryin_dly = CECARRYIN;
      assign cectrl_dly = CECTRL;
      assign ced_dly = CED;
      assign ceinmode_dly = CEINMODE;
      assign cem_dly = CEM;
      assign cep_dly = CEP;
      assign clk_dly = CLK;
      assign d_dly = D;
      assign inmode_dly = INMODE;
      assign multsignin_dly = MULTSIGNIN;
      assign opmode_dly = OPMODE;
      assign pcin_dly = PCIN;
      assign rsta_dly = RSTA;
      assign rstallcarryin_dly = RSTALLCARRYIN;
      assign rstalumode_dly = RSTALUMODE;
      assign rstb_dly = RSTB;
      assign rstc_dly = RSTC;
      assign rstctrl_dly = RSTCTRL;
      assign rstd_dly = RSTD;
      assign rstinmode_dly = RSTINMODE;
      assign rstm_dly = RSTM;
      assign rstp_dly = RSTP;
`endif //  `ifndef XIL_TIMING

      assign a_in             = a_dly;
      assign acin_in          = acin_dly;
      assign alumode_in       = alumode_dly ^ IS_ALUMODE_INVERTED_BIN;
      assign b_in             = b_dly;
      assign bcin_in          = bcin_dly;
      assign c_in             = c_dly;
      assign carrycascin_in   = carrycascin_dly;
      assign carryin_in       = carryin_dly ^ IS_CARRYIN_INVERTED_BIN;
      assign carryinsel_in    = carryinsel_dly;
      assign cea1_in          = cea1_dly;
      assign cea2_in          = cea2_dly;
      assign cead_in          = cead_dly;
      assign cealumode_in     = cealumode_dly;
      assign ceb1_in          = ceb1_dly;
      assign ceb2_in          = ceb2_dly;
      assign cec_in           = cec_dly;
      assign cecarryin_in     = cecarryin_dly;
      assign cectrl_in        = cectrl_dly;
      assign ced_in           = ced_dly;
      assign ceinmode_in      = ceinmode_dly;
      assign cem_in           = cem_dly;
      assign cep_in           = cep_dly;
      assign clk_in           = clk_dly ^ IS_CLK_INVERTED_BIN;
      assign d_in             = d_dly;
      assign inmode_in        = inmode_dly ^ IS_INMODE_INVERTED_BIN;
      assign multsignin_in    = multsignin_dly;
      assign opmode_in        = opmode_dly ^ IS_OPMODE_INVERTED_BIN;
      assign pcin_in          = pcin_dly;
      assign rsta_in          = rsta_dly;
      assign rstallcarryin_in = rstallcarryin_dly;
      assign rstalumode_in    = rstalumode_dly;
      assign rstb_in          = rstb_dly;
      assign rstc_in          = rstc_dly;
      assign rstctrl_in       = rstctrl_dly;
      assign rstd_in          = rstd_dly;
      assign rstinmode_in     = rstinmode_dly;
      assign rstm_in          = rstm_dly;
      assign rstp_in          = rstp_dly;

//*** GLOBAL hidden GSR pin
  always @(gsr_in) begin
    if (gsr_in) begin
      assign qcarryin_o_reg0 = 1'b0;
      assign qcarryinsel_o_reg1 = 3'b0;
      assign qopmode_o_reg1 = 7'b0;
      assign qalumode_o_reg1 = 4'b0;
      assign qa_o_reg1 = 30'b0;
      assign qa_o_reg2 = 30'b0;
      assign qb_o_reg1 = 18'b0;
      assign qb_o_reg2 = 18'b0;
      assign qc_o_reg1 = 48'b0;
      assign qp_o_reg1 = 48'b0;
      assign qmult_o_reg = 43'b0;
      assign pdet_o_reg1 = 1'b0;
      assign pdet_o_reg2 = 1'b0;
      assign pdetb_o_reg1 = 1'b0;
      assign pdetb_o_reg2 = 1'b0;
// 577648 commented out the following line
//    assign carryout_o_reg = 4'b0;
      assign carrycascout_o_reg = 1'b0;
      assign qmultsignout_o_reg = 1'b0;
      assign qd_o_reg1 = 25'b0;
      assign qad_o_reg1 = 25'b0;
      assign qinmode_o_reg = 5'b0;
//      assign mult_o = 43'b0;
    end
    else begin
      deassign qcarryin_o_reg0;
      deassign qcarryinsel_o_reg1;
      deassign qopmode_o_reg1;
      deassign qalumode_o_reg1;
      deassign qa_o_reg1;
      deassign qa_o_reg2;
      deassign qb_o_reg1;
      deassign qb_o_reg2;
      deassign qc_o_reg1;
      deassign qp_o_reg1;
      deassign qmult_o_reg;
      deassign pdet_o_reg1;
      deassign pdet_o_reg2;
      deassign pdetb_o_reg1;
      deassign pdetb_o_reg2;
// 577648 commented out the following line
//    deassign carryout_o_reg;
      deassign carrycascout_o_reg;
      deassign qmultsignout_o_reg;
      deassign qd_o_reg1;
      deassign qad_o_reg1;
      deassign qinmode_o_reg;
//      deassign mult_o;
    end
  end


    initial begin
  opmode_valid_flag <= 1;
  invalid_opmode <= 1;

        //-------- A_INPUT check

  case (A_INPUT)
             "DIRECT", "CASCADE" : ;
              default : begin
                       $display("Attribute Syntax Error : The attribute A_INPUT on DSP48E1 instance %m is set to %s.  Legal values for this attribute are DIRECT or CASCADE.", A_INPUT);
                #1 $finish;
                        end
  endcase

        //-------- ALUMODEREG check

  case (ALUMODEREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute ALUMODEREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", ALUMODEREG);
                    #1 $finish;
                end
  endcase

        //-------- AREG check

  case (AREG)
            0, 1, 2 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute AREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1 or 2.", AREG);
                    #1 $finish;
                end
  endcase

        //-------- (ACASCREG) and (ACASCREG vs AREG) check

  case (AREG)
            0 : if(AREG != ACASCREG) begin
                    $display("Attribute Syntax Error : The attribute ACASCREG  on DSP48E1 instance %m is set to %d.  ACASCREG has to be set to 0 when attribute AREG = 0.", ACASCREG);
                    #1 $finish;
                end
            1 : if(AREG != ACASCREG) begin
                    $display("Attribute Syntax Error : The attribute ACASCREG  on DSP48E1 instance %m is set to %d.  ACASCREG has to be set to 1 when attribute AREG = 1.", ACASCREG);
                    #1 $finish;
                end
            2 : if((AREG != ACASCREG) && ((AREG-1) != ACASCREG)) begin
                    $display("Attribute Syntax Error : The attribute ACASCREG  on DSP48E1 instance %m is set to %d.  ACASCREG has to be set to either 2 or 1 when attribute AREG = 2.", ACASCREG);
                    #1 $finish;
                end
            default : ;
  endcase

        //-------- B_INPUT check

  case (B_INPUT)
             "DIRECT", "CASCADE" : ;
              default : begin
                       $display("Attribute Syntax Error : The attribute B_INPUT on DSP48E1 instance %m is set to %s.  Legal values for this attribute are DIRECT or CASCADE.", B_INPUT);
                #1 $finish;
                        end
  endcase


        //-------- BREG check

  case (BREG)
            0, 1, 2 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute BREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1 or 2.", BREG);
                    #1 $finish;
                end
  endcase

        //-------- (BCASCREG) and (BCASCREG vs BREG) check

  case (BREG)
            0 : if(BREG != BCASCREG) begin
                    $display("Attribute Syntax Error : The attribute BCASCREG  on DSP48E1 instance %m is set to %d.  BCASCREG has to be set to 0 when attribute BREG = 0.", BCASCREG);
                    #1 $finish;
                end
            1 : if(BREG != BCASCREG) begin
                    $display("Attribute Syntax Error : The attribute BCASCREG  on DSP48E1 instance %m is set to %d.  BCASCREG has to be set to 1 when attribute BREG = 1.", BCASCREG);
                    #1 $finish;
                end
            2 : if((BREG != BCASCREG) && ((BREG-1) != BCASCREG)) begin
                    $display("Attribute Syntax Error : The attribute BCASCREG  on DSP48E1 instance %m is set to %d.  BCASCREG has to be set to either 2 or 1 when attribute BREG = 2.", BCASCREG);
                    #1 $finish;
                end
            default : ;
  endcase

        //-------- CARRYINREG check

  case (CARRYINREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute CARRYINREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", CARRYINREG);
                    #1 $finish;
                end
  endcase

        //-------- CARRYINSELREG check

  case (CARRYINSELREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute CARRYINSELREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", CARRYINSELREG);
                    #1 $finish;
                end
  endcase

        //-------- CREG check

  case (CREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute CREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, or 1.", CREG);
                    #1 $finish;
                end
  endcase


        //-------- OPMODEREG check

  case (OPMODEREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute OPMODEREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", OPMODEREG);
                    #1 $finish;
                end
  endcase

        //-------- USE_MULT

        case (USE_MULT)
            "NONE", "MULTIPLY", "DYNAMIC" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute USE_MULT on DSP48E1 instance %m is set to %s. Legal values for this attribute are MULTIPLY, DYNAMIC or NONE.", USE_MULT);
                          #1 $finish;
                     end
/*
            "MULT" : if (MREG != 0) begin
                               $display("Attribute Syntax Error : The attribute USE_MULT on DSP48E1 instance %m is set to %s. This requires attribute MREG to be set to 0.", USE_MULT);
                               #1 $finish;
                        end
            "MULT_S" : if (MREG != 1) begin
                               $display("Attribute Syntax Error : The attribute USE_MULT on DSP48E1 instance %m is set to %s. This requires attribute MREG to be set to 1.", USE_MULT);
                               #1 $finish;
                        end
            default : begin
                          $display("Attribute Syntax Error : The attribute USE_MULT on DSP48E1 instance %m is set to %s. Legal values for this attribute are NONE, MULT or MULT_S.", USE_MULT);
                          #1 $finish;
                     end
*/
        endcase

        //-------- USE_PATTERN_DETECT

        case (USE_PATTERN_DETECT)
            "PATDET", "NO_PATDET" : ;
            default : begin
               $display("Attribute Syntax Error : The attribute USE_PATTERN_DETECT on DSP48E1 instance %m is set to %s.  Legal values for this attribute are PATDET or NO_PATDET.",  USE_PATTERN_DETECT);
               #1 $finish;
            end
        endcase

        //-------- AUTORESET_PATDET check

        case (AUTORESET_PATDET)
            "NO_RESET", "RESET_MATCH", "RESET_NOT_MATCH" : ;
            default : begin
               $display("Attribute Syntax Error : The attribute AUTORESET_PATDET on DSP48E1 instance %m is set to %s.  Legal values for this attribute are  NO_RESET or RESET_MATCH or RESET_NOT_MATCH.",  AUTORESET_PATDET);
               #1 $finish;
            end
        endcase

        //-------- SEL_PATTERN check

        case(SEL_PATTERN)
           "PATTERN", "C" : ;
            default : begin
                         $display("Attribute Syntax Error : The attribute SEL_PATTERN on DSP48E1 instance %m is set to %s.  Legal values for this attribute are PATTERN or C.", SEL_PATTERN);
                         #1 $finish;
                      end
  endcase

        //-------- SEL_MASK check

        case(SEL_MASK)
            "MASK", "C", "ROUNDING_MODE1", "ROUNDING_MODE2" : ;
             default : begin
                         $display("Attribute Syntax Error : The attribute SEL_MASK on DSP48E1 instance %m is set to %s.  Legal values for this attribute are MASK or C or ROUNDING_MODE1 or ROUNDING_MODE2.", SEL_MASK);
                          #1 $finish;
                       end
  endcase

        //-------- MREG check

  case (MREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute MREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", MREG);
                    #1 $finish;
                end
  endcase


        //-------- PREG check

  case (PREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute PREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", PREG);
                    #1 $finish;
                end
  endcase


        #100010 ping_opmode_drc_check <= 1;

    
//*********************************************************
//*** ADDITIONAL DRC  
//*********************************************************
// CR 219407  --  (1)
// old ask vicv
/*
    if((AUTORESET_PATTERN_DETECT == "TRUE") && (USE_PATTERN_DETECT == "NO_PATDET")) begin
         $display("Attribute Syntax Error : The attribute USE_PATTERN_DETECT on DSP48E1 instance %m must be set to PATDET in order to use AUTORESET_PATTERN_DETECT equals TRUE. Failure to do so could make timing reports inaccurate. ");
     end
*/
//*********************************************************
//***  new attribute DRC
//*********************************************************

        //-------- ADREG check

  case (ADREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute ADREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", ADREG);
                    #1 $finish;
                end
  endcase

        //-------- DREG check

  case (DREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute DREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", DREG);
                    #1 $finish;
                end
  endcase

        //-------- INMODEREG check

  case (INMODEREG)
            0, 1 : ;
            default : begin
                    $display("Attribute Syntax Error : The attribute INMODEREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0, 1.", INMODEREG);
                    #1 $finish;
                end
  endcase

        //-------- USE_DPORT

        case (USE_DPORT)
            "TRUE", "FALSE" : ;
            default : begin
               $display("Attribute Syntax Error : The attribute USE_DPORT on DSP48E1 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.",  USE_DPORT);
               #1 $finish;
            end
        endcase

        if ((USE_MULT == "NONE") && (MREG !== 0)) begin
              $display("Error : [Unisim %s-10] : Attribute USE_MULT is set to \"NONE\" and MREG is set to %2d. MREG must be set to 0 when the multiplier is not used. Instance %m", MODULE_NAME, MREG);
               #1 $finish;
        end

    end


//*********************************************************
//**********  INMODE signal registering        ************
//*********************************************************
// new 
    always @(posedge clk_in) begin
       if (rstinmode_in)
          qinmode_o_reg <= 5'b0;
       else if (ceinmode_in)
          qinmode_o_reg <= inmode_in;
    end

    generate 
       case (INMODEREG)
          0: begin 
             always @(inmode_in)
                qinmode_o_mux <= inmode_in;
    end

          1: begin 
             always @(qinmode_o_reg)
                qinmode_o_mux <= qinmode_o_reg;
    end
       endcase
    endgenerate 

//*********************************************************
//*** Input register A with 2 level deep of registers
//*********************************************************

    generate 
       case (A_INPUT)
          "DIRECT"  : always @(a_in)    a_o_mux <= a_in;
          "CASCADE" : always @(acin_in) a_o_mux <= acin_in;
       endcase
    endgenerate 

    generate 
       case (AREG)
          1 : begin
              always @(posedge clk_in) begin
           if (rsta_in) begin
                    qa_o_reg1 <= 30'b0;
                    qa_o_reg2 <= 30'b0;
                 end
                 else begin
                      if (cea1_in)
                          qa_o_reg1 <= a_o_mux;
                      if (cea2_in)
                          qa_o_reg2 <= a_o_mux;
                 end
              end
          end

          2 : begin
              always @(posedge clk_in) begin
           if (rsta_in) begin
                    qa_o_reg1 <= 30'b0;
                    qa_o_reg2 <= 30'b0;
                 end
                 else begin
                      if (cea1_in)
                          qa_o_reg1 <= a_o_mux;
                      if (cea2_in)
                          qa_o_reg2 <= qa_o_reg1;
                 end
              end
          end
       endcase
    endgenerate 

    generate 
       case (AREG)
          0: always @(a_o_mux) qa_o_mux <= a_o_mux;
          1,2 : always @(qa_o_reg2) qa_o_mux <= qa_o_reg2;
       endcase
    endgenerate 

    generate 
       case (ACASCREG)
          1: always @(qa_o_mux or qa_o_reg1) begin
                 if(AREG == 2)
                    qacout_o_mux <= qa_o_reg1;
                 else
                    qacout_o_mux <= qa_o_mux;
             end
          0,2 : always @(qa_o_mux) qacout_o_mux <= qa_o_mux;
       endcase
    endgenerate 

// new  
    
   assign a_preaddsub = qinmode_o_mux[1]? 25'b0:(qinmode_o_mux[0]?qa_o_reg1[24:0]:qa_o_mux[24:0]);

//*********************************************************
//*** Input register B with 2 level deep of registers
//*********************************************************

    generate 
       case (B_INPUT)
          "DIRECT"  : always @(b_in)    b_o_mux <= b_in;
          "CASCADE" : always @(bcin_in) b_o_mux <= bcin_in;
       endcase
    endgenerate 

    generate 
       case (BREG)
          1 : begin
              always @(posedge clk_in) begin
           if (rstb_in) begin
                      qb_o_reg1 <= 18'b0;
                      qb_o_reg2 <= 18'b0;
                 end
                 else begin
                      if (ceb1_in)
                          qb_o_reg1 <= b_o_mux;
                      if (ceb2_in)
                          qb_o_reg2 <= b_o_mux;
                 end
              end
          end

          2 : begin
              always @(posedge clk_in) begin
           if (rstb_in) begin
                    qb_o_reg1 <= 18'b0;
                    qb_o_reg2 <= 18'b0;
                 end
                 else begin
                      if (ceb1_in)
                          qb_o_reg1 <= b_o_mux;
                      if (ceb2_in)
                          qb_o_reg2 <= qb_o_reg1;
                 end
              end
          end
       endcase
    endgenerate 

    generate 
       case (BREG)
          0: always @(b_o_mux) qb_o_mux <= b_o_mux;
          1,2 : always @(qb_o_reg2) qb_o_mux <= qb_o_reg2;
       endcase
    endgenerate 

    generate
       case (BCASCREG)
          1: always @(qb_o_mux or qb_o_reg1) begin
                 if(BREG == 2)
                    qbcout_o_mux <= qb_o_reg1;
                 else
                    qbcout_o_mux <= qb_o_mux;
             end
          0,2 : always @(qb_o_mux) qbcout_o_mux <= qb_o_mux;
       endcase
    endgenerate


// new
    
   assign b_mult = qinmode_o_mux[4]?qb_o_reg1:qb_o_mux;

//*********************************************************
//*** Input register C with 1 level deep of register
//*********************************************************

    always @(posedge clk_in) begin
  if (rstc_in)
            qc_o_reg1 <= 48'b0;
  else if (cec_in)
            qc_o_reg1 <= c_in;
    end


    generate
       case (CREG)
          0 : always @(c_in) qc_o_mux <= c_in;
          1 : always @(qc_o_reg1) qc_o_mux <= qc_o_reg1;
       endcase
    endgenerate


// new

//*********************************************************
//*** Input register D with 1 level deep of register
//*********************************************************
    always @(posedge clk_in) begin
  if (rstd_in)
            qd_o_reg1 <= 25'b0;
  else if (ced_in)
            qd_o_reg1 <= d_in;
    end

    generate
       case (DREG)
          0 : always @(d_in) qd_o_mux <= d_in;
          1 : always @(qd_o_reg1) qd_o_mux <= qd_o_reg1;
       endcase
    endgenerate




//*********************************************************
//*** Preaddsub AD register with 1 level deep of register
//*********************************************************
// new  
      assign ad_addsub = qinmode_o_mux[3]?(-a_preaddsub + (qinmode_o_mux[2]?qd_o_mux:25'b0)):(a_preaddsub + (qinmode_o_mux[2]?qd_o_mux:25'b0));

    always @(posedge clk_in) begin
  if (rstd_in)
            qad_o_reg1 <= 25'b0;
  else if (cead_in)
            qad_o_reg1 <= ad_addsub;
    end

    generate
       case (ADREG)
          0 : always @(ad_addsub) qad_o_mux <= ad_addsub;
          1 : always @(qad_o_reg1) qad_o_mux <= qad_o_reg1;
       endcase
    endgenerate

/*------------------------------------------------- */
/*------------------------------------------------- */

   assign ad_mult = (USE_DPORT=="TRUE")? qad_o_mux : a_preaddsub;
//*********************************************************

//*********************************************************
//***************      25x18 Multiplier     ***************
//*********************************************************
// 05/26/05 -- FP -- Added warning for invalid mult when USE_MULT=NONE
// SIMD=FOUR12 and SIMD=TWO24
// Made mult_o to be "X"

    always @(qopmode_o_mux) begin
       if(qopmode_o_mux[3:0] == 4'b0101) begin
          if((USE_MULT == "NONE") || (USE_SIMD == "TWO24") || (USE_SIMD == "FOUR12")) 
               $display("OPMODE Input Warning : The OPMODE[3:0] %b to DSP48E1 instance %m is invalid when using attributes USE_MULT = NONE, or USE_SIMD = TWO24 or FOUR12 at %.3f ns.", qopmode_o_mux[3:0], $time/1000.0);
               end
       else if(((qopmode_o_mux[1:0] == 2'b01) && (qopmode_o_mux[3:2] != 2'b01)) || ((qopmode_o_mux[1:0] != 2'b01) && (qopmode_o_mux[3:2] == 2'b01)))
          begin
          if (USE_MULT == "NONE")
          $display("OPMODE Input Warning : The OPMODE[3:0] %b to DSP48E1 instance %m is invalid at %.3f ns. ", qopmode_o_mux[3:0], $time/1000.0);
          else 
          $display("OPMODE Input ERROR : The OPMODE[3:0] %b to DSP48E1 instance %m is invalid at %.3f ns. ", qopmode_o_mux[3:0], $time/1000.0);
          end

    end

//    assign mult_o = ((USE_MULT == "NONE") || (USE_SIMD == "TWO24") || (USE_SIMD == "FOUR12"))? 43'b0 : {{18{ad_mult[24]}}, ad_mult[24:0]} * {{25{b_mult[17]}}, b_mult};

    assign mult_o = ((USE_MULT == "NONE") || (USE_SIMD != "ONE48")) ? 43'b0 :
                    (carryinsel_in == 3'b010) ? 43'bx :
                    {{18{ad_mult[24]}}, ad_mult[24:0]} * {{25{b_mult[17]}}, b_mult};

//   always @(*) begin
//     if ((USE_MULT == "NONE") || (USE_SIMD == "TWO24") || (USE_SIMD == "FOUR12"))
//       mult_o = 43'b0;
//     else if (qcarryinsel_o_mux == 3'b010) 
//       mult_o = 43'bx;
//     else
//       mult_o = {{18{ad_mult[24]}}, ad_mult[24:0]} * {{25{b_mult[17]}}, b_mult};
//   end

    always @(posedge clk_in) begin
      if (rstm_in) begin
        qmult_o_reg <= 43'b0;
      end
      else if (cem_in) begin
        qmult_o_reg <= mult_o;
      end
    end

    always @ (mult_o, qmult_o_reg, qcarryinsel_o_mux) begin
      if (qcarryinsel_o_mux == 3'b010)  begin
        qmult_o_mux = 43'bx ;
      end else if (MREG == 1) begin 
        qmult_o_mux = qmult_o_reg;
      end else
        qmult_o_mux = mult_o;
      end

//    generate
//       case (MREG)
//          0 : always @(mult_o) qmult_o_mux <= mult_o;
//          1 : always @(qmult_o_reg) qmult_o_mux <= qmult_o_reg;
//       endcase
//    endgenerate


//*** X mux
// ask jmt

    always @(qp_o_mux or qa_o_mux or qb_o_mux or qmult_o_mux or qopmode_o_mux[1:0] or qcarryinsel_o_mux) begin
//add post 2014.4 
// if (qcarryinsel_o_mux == 3'b010) && (OPMODEREG == 0) begin
//   qx_o_mux <= 48'bx;
// else
  case (qopmode_o_mux[1:0])
              2'b00 : qx_o_mux <= 48'b0;
              2'b01 : qx_o_mux <= {{5{qmult_o_mux[MSB_A_MULT + MSB_B_MULT + 1]}}, qmult_o_mux};
              2'b10 : qx_o_mux <= qp_o_mux;
// new DRC 
              2'b11 : begin
                         if((USE_MULT == "MULTIPLY") && (
                                  (AREG==0 && BREG==0 && MREG==0) ||
                                  (AREG==0 && BREG==0 && PREG==0) ||
                                  (MREG==0 && PREG==0)))
                               $display("OPMODE Input Warning : The OPMODE[1:0] %b to DSP48E1 instance %m is invalid when using attributes USE_MULT = MULTIPLY at %.3f ns. Please set USE_MULT to either NONE or DYNAMIC.", qopmode_o_mux[1:0], $time/1000.0);
                   else
                            qx_o_mux <=  {qa_o_mux[MSB_A:0], qb_o_mux[MSB_B:0]};
                end

            default : begin
                end
  endcase
    end


//*** Y mux

// 08-06-08  
// IR 478378
    wire [47:0] y_mac_cascd = (qopmode_o_mux[6:4] == 3'b100) ? {48{multsignin_in}} : {48{1'b1}};

    always @(qc_o_mux or qopmode_o_mux[3:2] or qcarryinsel_o_mux or y_mac_cascd) begin
//add post 2014.4 
// if (qcarryinsel_o_mux == 3'b010) && (OPMODEREG == 0) begin
//   qy_o_mux <= 48'bx;
// else
  case (qopmode_o_mux[3:2])
              2'b00 : qy_o_mux <= 48'b0;
              2'b01 : qy_o_mux <= 48'b0;
// 08-06-08  
              2'b10 : qy_o_mux <= y_mac_cascd;                // choose all ones or mult-sign-extend
              2'b11 : qy_o_mux <= qc_o_mux;
            default : begin
                end
  endcase
    end


//*** Z mux

    always @(qp_o_mux or qc_o_mux or pcin_in or qopmode_o_mux[6:4] or qcarryinsel_o_mux) begin
// ask jmt
//add post 2014.4 
// if (qcarryinsel_o_mux == 3'b010) && (OPMODEREG == 0) begin
//   qz_o_mux <= 48'bx;
// else
  casex (qopmode_o_mux[6:4])
             3'b000 : qz_o_mux <= 48'b0;
             3'b001 : qz_o_mux <= pcin_in;
             3'b010 : qz_o_mux <= qp_o_mux;
             3'b011 : qz_o_mux <= qc_o_mux;
             3'b100 : qz_o_mux <= qp_o_mux;
             3'b101 : qz_o_mux <= {{17{pcin_in[47]}}, pcin_in[47:17]};
// ask jmt 
             3'b11x : qz_o_mux <= {{17{qp_o_mux[47]}}, qp_o_mux[47:17]};
            default : begin
                end
  endcase
    end



//*** CarryInSel and OpMode with 1 level of register
    always @(posedge clk_in) begin
  if (rstctrl_in) begin
            qcarryinsel_o_reg1 <= 3'b0;
            qopmode_o_reg1 <= 7'b0;
  end  
  else if (cectrl_in) begin
            qcarryinsel_o_reg1 <= carryinsel_in;
            qopmode_o_reg1 <= opmode_in;
  end
    end

    generate
       case (CARRYINSELREG)
          0 : always @(carryinsel_in) qcarryinsel_o_mux <= carryinsel_in;
          1 : always @(qcarryinsel_o_reg1) qcarryinsel_o_mux <= qcarryinsel_o_reg1;
       endcase
    endgenerate


//CR 219047 (3) 

    always @(qcarryinsel_o_mux or carrycascin_in or multsignin_in or qopmode_o_mux) begin
      if(qcarryinsel_o_mux == 3'b010) begin 
        if(!((multsignin_in === 1'bx) || (cci_drc_msg == 1'b1) ||
             ((qopmode_o_mux == 7'b1001000) && !(multsignin_in === 1'bx))  ||
             ((multsignin_in == 1'b0) && (carrycascin_in == 1'b0)))) begin
          $display("DRC warning : CARRYCASCIN can only be used in the current DSP48E1 instance %m if the previous DSP48E1 is performing a two input ADD or SUBTRACT operation, or the current DSP48E1 is configured in the MAC extend opmode 7'b1001000 at %.3f ns.", $time/1000.0);
          cci_drc_msg = 1'b1;
        end  
        if(!((multsignin_in === 1'bx) || (qopmode_o_mux[3:0] != 4'b0101))) begin 
          $display("DRC warning : CARRYINSEL is set to 010 with OPMODE set to multiplication (xxx0101). This is an illegal mode and may show deviation between simulation results and hardware behavior. DSP48E1 instance %m at %.3f ns.", $time/1000.0);
        end  
        if(!((multsignin_in === 1'bx) || (cis_drc_msg == 1'b1) ||
             (OPMODEREG == 1'b1))) begin 
          $display("DRC warning : CARRYINSEL is set to 010 with OPMODEREG set to 0. This causes unknown values after reset occurs. It is suggested to use OPMODEREG = 1 when cascading large adders. DSP48E1 instance %m at %.3f ns.", $time/1000.0);
          cis_drc_msg = 1'b1;
        end  
      end  
    end 

    generate
       case (OPMODEREG)
          0 : always @(opmode_in) qopmode_o_mux <= opmode_in;
          1 : always @(qopmode_o_reg1) qopmode_o_mux <= qopmode_o_reg1;
       endcase
    endgenerate


//*** ALUMODE with 1 level of register
    always @(posedge clk_in) begin
  if (rstalumode_in)
            qalumode_o_reg1 <= 4'b0;
  else if (cealumode_in)
            qalumode_o_reg1 <= alumode_in;
    end


    generate
       case (ALUMODEREG)
          0 : always @(alumode_in) qalumode_o_mux <= alumode_in;
          1 : always @(qalumode_o_reg1) qalumode_o_mux <= qalumode_o_reg1;
       endcase
    endgenerate

//------------------------------------------------------------------
//*** DRC for OPMODE
//------------------------------------------------------------------

    task deassign_xyz_mux;
        begin
            opmode_valid_flag = 1;
            invalid_opmode = 1;  // reset invalid opmode
        end
    endtask // deassign_xyz_mux

    
    task display_invalid_opmode;
        begin
            if (invalid_opmode) begin
                opmode_valid_flag = 0;
                invalid_opmode = 0;
                $display("OPMODE Input Warning : The OPMODE %b to DSP48E1 instance %m at %.3f ns requires attribute PREG set to 1.", qopmode_o_mux, $time/1000.0);
            end
        end
    endtask // display_invalid_opmode

    always @(ping_opmode_drc_check or qalumode_o_mux or qopmode_o_mux or qcarryinsel_o_mux ) begin

      if ($time > 100000) begin  // no check at first 100ns
        case (qalumode_o_mux[3:2]) 
          2'b00 :
          //-- ARITHMETIC MODES DRC
            casex ({qopmode_o_mux, qcarryinsel_o_mux})
                10'bxxx0101010 : deassign_xyz_mux; // seperate drc above for these cases
                10'b0000000000 : deassign_xyz_mux;
                10'b0000010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0000010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0000011000 : deassign_xyz_mux;
                10'b0000011010 : deassign_xyz_mux;
// CR 573535                10'b0000011100 : deassign_xyz_mux;
                10'b0000011100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0000101000 : deassign_xyz_mux;
                10'b0001000000 : deassign_xyz_mux;
                10'b0001010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001011000 : deassign_xyz_mux;
                10'b0001011010 : deassign_xyz_mux;
// CR 573535                10'b0001011100 : deassign_xyz_mux;
                10'b0001011100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001100000 : deassign_xyz_mux;
                10'b0001100010 : deassign_xyz_mux;
// CR 573535                10'b0001100100 : deassign_xyz_mux;
                10'b0001100100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001110010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001110101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001110111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0001111000 : deassign_xyz_mux;
                10'b0001111010 : deassign_xyz_mux;
// CR 573535                10'b0001111100 : deassign_xyz_mux;
                10'b0001111100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0010000000 : deassign_xyz_mux;
                10'b0010010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0010010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0010010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0010011000 : deassign_xyz_mux;
                10'b0010011001 : deassign_xyz_mux;
                10'b0010011011 : deassign_xyz_mux;
                10'b0010101000 : deassign_xyz_mux;
                10'b0010101001 : deassign_xyz_mux;
                10'b0010101011 : deassign_xyz_mux;
                10'b0010101110 : deassign_xyz_mux;
                10'b0011000000 : deassign_xyz_mux;
                10'b0011010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011011000 : deassign_xyz_mux;
                10'b0011011001 : deassign_xyz_mux;
                10'b0011011011 : deassign_xyz_mux;
                10'b0011100000 : deassign_xyz_mux;
                10'b0011100001 : deassign_xyz_mux;
                10'b0011100011 : deassign_xyz_mux;
                10'b0011100100 : deassign_xyz_mux;
                10'b0011110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011110101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011110111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011110001 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011110011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0011111000 : deassign_xyz_mux;
                10'b0011111001 : deassign_xyz_mux;
                10'b0011111011 : deassign_xyz_mux;
                10'b0100000000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100000010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100011000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100011010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100011101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100011111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100101000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100101101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0100101111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101000000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101000010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101011000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101011101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101011111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101100000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101100010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101100101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101100111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101110101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101110111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101111000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101111101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0101111111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110000000 : deassign_xyz_mux;
                10'b0110000010 : deassign_xyz_mux;
// CR 573535                10'b0110000100 : deassign_xyz_mux;
                10'b0110000100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110011000 : deassign_xyz_mux;
                10'b0110011010 : deassign_xyz_mux;
// CR 573535                10'b0110011100 : deassign_xyz_mux;
                10'b0110011100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0110101000 : deassign_xyz_mux;
                10'b0110101110 : deassign_xyz_mux;
                10'b0111000000 : deassign_xyz_mux;
                10'b0111000010 : deassign_xyz_mux;
// CR 573535                10'b0111000100 : deassign_xyz_mux;
                10'b0111000100 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0111010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0111010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0111010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0111011000 : deassign_xyz_mux;
                10'b0111100000 : deassign_xyz_mux;
                10'b0111100010 : deassign_xyz_mux;
                10'b0111110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b0111111000 : deassign_xyz_mux;
                10'b1001000010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1010000000 : deassign_xyz_mux;
                10'b1010010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1010010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1010010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1010011000 : deassign_xyz_mux;
                10'b1010011001 : deassign_xyz_mux;
                10'b1010011011 : deassign_xyz_mux;
                10'b1010101000 : deassign_xyz_mux;
                10'b1010101001 : deassign_xyz_mux;
                10'b1010101011 : deassign_xyz_mux;
                10'b1010101110 : deassign_xyz_mux;
                10'b1011000000 : deassign_xyz_mux;
                10'b1011010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011010101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011010111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011011000 : deassign_xyz_mux;
                10'b1011011001 : deassign_xyz_mux;
                10'b1011011011 : deassign_xyz_mux;
                10'b1011100000 : deassign_xyz_mux;
                10'b1011100001 : deassign_xyz_mux;
                10'b1011100011 : deassign_xyz_mux;
                10'b1011110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011110101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011110111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011110001 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011110011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1011111000 : deassign_xyz_mux;
                10'b1011111001 : deassign_xyz_mux;
                10'b1011111011 : deassign_xyz_mux;
                10'b1100000000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100011000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100011101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100011111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100101000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100101101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1100101111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101000000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101010000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101011000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101011101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101011111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101100000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101100101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101100111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101110000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101110101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101110111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101111000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101111101 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                10'b1101111111 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                default : begin
                  if (invalid_opmode) begin
                     opmode_valid_flag = 0;
                     invalid_opmode = 0;
// CR 444150
                     if( ({qopmode_o_mux, qcarryinsel_o_mux} ==  10'b0000000010) && ((OPMODEREG==1) && (CARRYINSELREG ==0)) ) $display("DRC warning : The attribute CARRYINSELREG on DSP48E1 instance %m is set to %d. It is required to have CARRYINSELREG be set to 1 to match OPMODEREG, in order to ensure that the simulation model will match the hardware behavior in all use cases.", CARRYINSELREG);
                     $display("OPMODE Input Warning : The OPMODE %b to DSP48E1 instance %m is either invalid or the CARRYINSEL %b for that specific OPMODE is invalid at %.3f ns. This warning may be due to a mismatch in the OPMODEREG and CARRYINSELREG attribute settings. It is recommended that OPMODEREG and CARRYINSELREG always be set to the same value. ", qopmode_o_mux, qcarryinsel_o_mux, $time/1000.0);

                  end
                end

            endcase // case(OPMODE)

          2'b01, 2'b11 :
          //-- LOGIC MODES DRC
             case (qopmode_o_mux)
                7'b0000000 : deassign_xyz_mux;
                7'b0000010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0000011 : deassign_xyz_mux;
                7'b0010000 : deassign_xyz_mux;
                7'b0010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0010011 : deassign_xyz_mux;
                7'b0100000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0100010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0100011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0110000 : deassign_xyz_mux;
                7'b0110010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0110011 : deassign_xyz_mux;
                7'b1010000 : deassign_xyz_mux;
                7'b1010010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1010011 : deassign_xyz_mux;
                7'b1100000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1100010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1100011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0001000 : deassign_xyz_mux;
                7'b0001010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0001011 : deassign_xyz_mux;
                7'b0011000 : deassign_xyz_mux;
                7'b0011010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0011011 : deassign_xyz_mux;
                7'b0101000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0101010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0101011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0111000 : deassign_xyz_mux;
                7'b0111010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b0111011 : deassign_xyz_mux;
                7'b1011000 : deassign_xyz_mux;
                7'b1011010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1011011 : deassign_xyz_mux;
                7'b1101000 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1101010 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
                7'b1101011 : if (PREG != 1) display_invalid_opmode; else deassign_xyz_mux;
              default : begin
                 if (invalid_opmode) begin

                    opmode_valid_flag = 0;
                    invalid_opmode = 0;
                    $display("OPMODE Input Warning : The OPMODE %b to DSP48E1 instance %m is invalid for LOGIC MODES at %.3f ns.", qopmode_o_mux, $time/1000.0);

                 end
              end

            endcase // case(OPMODE)

        endcase // case(qalumode_o_mux)

     end // if ($time > 100000)

    end // always @ (qopmode_o_mux)


//--####################################################################
//--#####                         ALU                              #####
//--####################################################################

  wire mult_cout = ~qp_o_mux[42];
  reg  [MSB_ALU_FULL:0] co;
  reg  [MSB_ALU_FULL:0] s;
  wire [MSB_ALU_FULL:0] comux,smux;
  wire [MSB_CARRYOUT:0] carryout_o_hw;
  wire [MSB_CARRYOUT:0] carryout_o;
  wire tmp_carrycascout_in;

  always @ (qx_o_mux or qy_o_mux or qz_o_mux or qalumode_o_mux[0]) begin
    if (qalumode_o_mux[0]) begin
       co = ((qx_o_mux & qy_o_mux)|((~qz_o_mux) & qy_o_mux)|(qx_o_mux & (~qz_o_mux)));
       s  = (~qz_o_mux) ^ qx_o_mux ^ qy_o_mux;
    end
    else begin
       co = ((qx_o_mux & qy_o_mux)|(qz_o_mux & qy_o_mux)|(qx_o_mux & qz_o_mux));
       s  =  qz_o_mux ^ qx_o_mux ^ qy_o_mux;
    end
  end

  assign comux = qalumode_o_mux[2] ? 0 : co;
  assign smux = qalumode_o_mux[3] ? co : s;

  // FINAL ADDER
  wire [12:0] s0 = {comux[10:0],qcarryin_o_mux}+smux[11:0];
  wire cout0 = (comux[11] + s0[12]);
  assign carryout_o_hw[0] = (qalumode_o_mux[0] & qalumode_o_mux[1]) ? ~cout0 : cout0;
  wire C1 = (USE_SIMD == "FOUR12") ? 1'b0 : s0[12];

  wire co11_lsb = (USE_SIMD == "FOUR12") ? 1'b0 : comux[11];
  wire [12:0] s1 = {comux[22:12],co11_lsb}+smux[23:12]+C1;
  wire cout1 = (comux[23] + s1[12]);
  assign carryout_o_hw[1] = (qalumode_o_mux[0] & qalumode_o_mux[1]) ? ~cout1 : cout1;
  wire C2 = ((USE_SIMD == "TWO24") || (USE_SIMD == "FOUR12")) ? 1'b0 : s1[12];

  wire co23_lsb = ((USE_SIMD == "TWO24") || (USE_SIMD == "FOUR12")) ? 
       1'b0 : comux[23];

  wire [12:0] s2 = {comux[34:24],co23_lsb}+smux[35:24]+C2;
  wire cout2 = (comux[35] + s2[12]);
  assign carryout_o_hw[2] = (qalumode_o_mux[0] & qalumode_o_mux[1]) ? ~cout2 : cout2;
  wire C3 = (USE_SIMD == "FOUR12") ? 1'b0 : s2[12];

  wire co35_lsb = (USE_SIMD == "FOUR12") ? 1'b0 : comux[35];
  wire [13:0] s3 = {comux[47:36],co35_lsb}+smux[47:36]+C3;
  wire cout3 = s3[12];

  assign carryout_o_hw[3] = (qalumode_o_mux[0] & qalumode_o_mux[1]) ? ~cout3 : cout3;

  wire   cout4 = s3[13];
//  assign carryout_o_hw[4] = (qalumode_o_mux[0] & qalumode_o_mux[1]) ? ~cout4 : cout4;

  assign alu_o  = qalumode_o_mux[1] ? ~{s3[11:0],s2[11:0],s1[11:0],s0[11:0]} :
                                {s3[11:0],s2[11:0],s1[11:0],s0[11:0]};
  // COMPUTE CARRYCASCOUT
  assign carrycascout_o = cout3;
  
  // COMPUTE MULTSIGNOUT
  // 08-06-08  assign  multsignout_o_opmode = (qopmode_o_mux[3:0] === 4'b100) ? multsignin_in  : ~qp_o_mux[42];
  // IR 478378 
  assign  multsignout_o_opmode = (qopmode_o_mux[6:4] === 3'b100) ? multsignin_in  : qmult_o_mux[42];

  // CR 523600 -- "X" carryout for multiply and logic operations
    assign carryout_o[3] = ((qopmode_o_mux[3:0] == 4'b0101) || (qalumode_o_mux[3:2] != 2'b00))? 1'bx : carryout_o_hw[3];
    assign carryout_o[2] = ((qopmode_o_mux[3:0] == 4'b0101) || (qalumode_o_mux[3:2] != 2'b00))? 1'bx : (USE_SIMD == "FOUR12") ? carryout_o_hw[2] : 1'bx;
    assign carryout_o[1] = ((qopmode_o_mux[3:0] == 4'b0101) || (qalumode_o_mux[3:2] != 2'b00))? 1'bx : ((USE_SIMD == "TWO24") ||  (USE_SIMD == "FOUR12")) ? carryout_o_hw[1] : 1'bx;
    assign carryout_o[0] = ((qopmode_o_mux[3:0] == 4'b0101) || (qalumode_o_mux[3:2] != 2'b00))? 1'bx : (USE_SIMD == "FOUR12") ? carryout_o_hw[0] : 1'bx;

//--########################### END ALU ################################
 
    
//*** CarryIn Mux and Register

//-------  input 0
    always @(posedge clk_in) begin
  if (rstallcarryin_in)
            qcarryin_o_reg0 <= 1'b0;
  else if (cecarryin_in)
            qcarryin_o_reg0 <= carryin_in;
    end

    generate
       case (CARRYINREG)
          0 : always @(carryin_in) qcarryin_o_mux0 <= carryin_in;
          1 : always @(qcarryin_o_reg0) qcarryin_o_mux0 <= qcarryin_o_reg0;
       endcase
    endgenerate

//-------  input 7
    always @(posedge clk_in) begin
  if (rstallcarryin_in)
            qcarryin_o_reg7 <= 1'b0;
// old  else if (cemultcarryin_in)
// new
  else if (cem_in)
// IR 478377 
            qcarryin_o_reg7 <=  ad_mult[24] ~^ b_mult[17];  // xnor
    end

//    always @(qa_o_mux[24] or qb_o_mux[17] or qcarryin_o_reg7) begin
    always @(ad_mult[24] or b_mult[17] or qcarryin_o_reg7) begin
// old  case (MULTCARRYINREG)
// new 
  case (MREG)
// IR 478377 
                  0 : qcarryin_o_mux7 <= ad_mult[24] ~^ b_mult[17];
                  1 : qcarryin_o_mux7 <= qcarryin_o_reg7;
            default : begin
                    $display("Attribute Syntax Error : The attribute MREG on DSP48E1 instance %m is set to %d.  Legal values for this attribute are 0 or 1.", MREG);
                    $finish;
                end
  endcase
    end
   
    reg qcarryin_o_mux_tmp;
    always @(qcarryin_o_mux0 or pcin_in[47] or carrycascin_in or carrycascout_o_mux or qp_o_mux[47] or qcarryin_o_mux7 or qcarryinsel_o_mux) begin
  case (qcarryinsel_o_mux)
              3'b000 : qcarryin_o_mux_tmp <= qcarryin_o_mux0;
              3'b001 : qcarryin_o_mux_tmp <= ~pcin_in[47];
              3'b010 : qcarryin_o_mux_tmp <= carrycascin_in;
              3'b011 : qcarryin_o_mux_tmp <= pcin_in[47];
              3'b100 : qcarryin_o_mux_tmp <= carrycascout_o_mux;
              3'b101 : qcarryin_o_mux_tmp <= ~qp_o_mux[47];
              3'b110 : qcarryin_o_mux_tmp <= qcarryin_o_mux7;
              3'b111 : qcarryin_o_mux_tmp <= qp_o_mux[47];
            default : begin
                end
  endcase
    end
    // disable carryin when performing logic operation
    always @(qcarryin_o_mux_tmp or qalumode_o_mux[3:2]) begin
      qcarryin_o_mux <= (qalumode_o_mux[3] || qalumode_o_mux[2]) ? 1'b0 : qcarryin_o_mux_tmp;
    end
 

//--####################################################################
//--#####                     AUTORESET_PATDET                     #####
//--####################################################################
    assign the_auto_reset_patdet = ((AUTORESET_PATDET == "RESET_MATCH") &&  pdet_o_reg1) 
                                                   ||
                                   ((AUTORESET_PATDET == "RESET_NOT_MATCH") &&  (pdet_o_reg2 && !pdet_o_reg1));
//--####################################################################
//--#####      CARRYOUT, CARRYCASCOUT. MULTSIGNOUT and PCOUT      ###### 
//--####################################################################
//*** register with 1 level of register
    always @(posedge clk_in) begin
        if(rstp_in || the_auto_reset_patdet)
             begin
               carryout_o_reg     <= 4'b0;
               carrycascout_o_reg <= 1'b0;
               qmultsignout_o_reg <= 1'b0;
               qp_o_reg1 <= 48'b0;
             end
        else if (cep_in) begin
                   carryout_o_reg     <= carryout_o;
                   carrycascout_o_reg <= carrycascout_o;
                   qmultsignout_o_reg <= multsignout_o_opmode;
                   qp_o_reg1 <= alu_o;
             end
    end

    generate 
       case (PREG)
          0: begin 
             always @(carryout_o)
                carryout_o_mux <= carryout_o;
             always @(carrycascout_o)
                carrycascout_o_mux <= carrycascout_o;
             always @(multsignout_o_opmode)
                 multsignout_o_mux <= multsignout_o_opmode;
             always @(alu_o)
                 qp_o_mux <= #1 alu_o;
    end

          1: begin 
             always @(carryout_o_reg)
                carryout_o_mux <= carryout_o_reg;
             always @(carrycascout_o_reg)
                carrycascout_o_mux <= carrycascout_o_reg;
             always @(qmultsignout_o_reg)
                 multsignout_o_mux <= qmultsignout_o_reg;
             always @(qp_o_reg1)
                 qp_o_mux <= qp_o_reg1;
    end
       endcase
    endgenerate



//CR 219047 (2)
// ask jmt whether i should comment this out 
/*
    always @(qmult_o_mux[(MSB_A_MULT+MSB_B_MULT+1)] or qopmode_o_mux[3:0]) begin
        if(qopmode_o_mux[3:0] == 4'b0101)
           multsignout_o_opmode = qmult_o_mux[(MSB_A_MULT+MSB_B_MULT+1)];
        else
           multsignout_o_opmode = 1'bx;
    end 
*/



//    assign carryout_x_o[4] =  carryout_o_mux[4];
// CR 510304 output X during multiply operation

    assign carryout_x_o[3] =  carryout_o_mux[3];
    assign carryout_x_o[2] =  (USE_SIMD == "FOUR12") ? carryout_o_mux[2] : 1'bx;
    assign carryout_x_o[1] =  ((USE_SIMD == "TWO24") ||  (USE_SIMD == "FOUR12")) ? carryout_o_mux[1] : 1'bx;
    assign carryout_x_o[0] =  (USE_SIMD == "FOUR12") ? carryout_o_mux[0] : 1'bx;


//--####################################################################
//--#####                    Pattern Detector                      #####
//--####################################################################


// new
    // selet pattern
    assign the_pattern = (SEL_PATTERN == "PATTERN") ? PATTERN : qc_o_mux; 

    // selet mask
    always @(qc_o_mux) begin
      if (USE_PATTERN_DETECT == "NO_PATDET") 
        the_mask <= {48{1'b1}};
      else
        case(SEL_MASK)
              "MASK" : the_mask <= MASK;
              "C"    : the_mask <= qc_o_mux;
              "ROUNDING_MODE1" :  the_mask     <=   ~qc_o_mux << 1;
              "ROUNDING_MODE2" :  the_mask     <=   ~qc_o_mux << 2;
               default : ;
        endcase
    end

    //--  now do the pattern detection
       
//    assign pdet_o = &(~(the_pattern ^ alu_o) | the_mask);  
//    assign pdetb_o = &((the_pattern ^ alu_o) | the_mask);  
    assign pdet_o  = (~opmode_valid_flag) ? 1'bx : &(~(the_pattern ^ alu_o) | the_mask);  
    assign pdetb_o = (~opmode_valid_flag) ? 1'bx : &((the_pattern ^ alu_o) | the_mask);  

//    assign pdet_o_mux  = (~opmode_valid_flag) ? 1'bx : (PREG == 1) ? pdet_o_reg1 : pdet_o;
//    assign pdetb_o_mux = (~opmode_valid_flag) ? 1'bx : (PREG == 1) ? pdetb_o_reg1 : pdetb_o;
    assign pdet_o_mux  = (PREG == 1) ? pdet_o_reg1 : pdet_o;
    assign pdetb_o_mux = (PREG == 1) ? pdetb_o_reg1 : pdetb_o;

//*** Output register PATTERN DETECT and UNDERFLOW / OVERFLOW 

    always @(posedge clk_in) begin
        if((rstp_in) || the_auto_reset_patdet) 
          begin 
            pdet_o_reg1  <= 1'b0;
            pdet_o_reg2  <= 1'b0;
            pdetb_o_reg1 <= 1'b0;
            pdetb_o_reg2 <= 1'b0;
          end
  else if(cep_in)
               begin
                 //-- the previous values are used in Underflow/Overflow
                 pdet_o_reg2  <= pdet_o_reg1;
                 pdet_o_reg1  <= pdet_o;
                 pdetb_o_reg2 <= pdetb_o_reg1;
                 pdetb_o_reg1 <= pdetb_o;
               end
    end

 
//--####################################################################
//--#####                    Underflow / Overflow                  #####
//--####################################################################
    generate if ((USE_PATTERN_DETECT == "PATDET") || (PREG == 1))
       begin         
          assign  overflow_o  = pdet_o_reg2 & !pdet_o_reg1 & !pdetb_o_reg1;
          assign  underflow_o = pdetb_o_reg2  & !pdet_o_reg1 & !pdetb_o_reg1;
       end
    else
       begin         
           assign overflow_o  = 1'bx;
           assign underflow_o = 1'bx;
       end
    endgenerate


`ifdef XIL_TIMING
//*** Timing Checks Start here

    always @(notifier) begin
      qp_o_mux <= 48'bx;
      qb_o_mux <= 18'bx;
    end

//    not (nrsta, rsta_in);
//    not (nrstb, rstb_in);
//    not (nrstc, rstc_in);
//    not (nrstp, rstp_in);
//    not (nrstallcarryin, rstallcarryin_in);
//    not (nrstctrl, rstctrl_in);

//    not (nrstinmode, rstinmode_in);
//    not (nrstd, rstd_in);

    assign cea12_enable = (((AREG == 1) && cea1_in) || ((AREG == 2) && (cea1_in || cea2_in)));
    assign ceb12_enable = (((BREG == 1) && ceb1_in) || ((BREG == 2) && (ceb1_in || ceb2_in)));

    assign a_en_n = (A_INPUT == "DIRECT") && cea12_enable && ~rsta_in && IS_CLK_INVERTED_BIN;
    assign a_en_p = (A_INPUT == "DIRECT") && cea12_enable && ~rsta_in && ~IS_CLK_INVERTED_BIN;
    assign b_en_n = (B_INPUT == "DIRECT") && ceb12_enable && ~rstb_in && IS_CLK_INVERTED_BIN;
    assign b_en_p = (B_INPUT == "DIRECT") && ceb12_enable && ~rstb_in && ~IS_CLK_INVERTED_BIN;

    assign acin_en_n = (A_INPUT == "CASCADE") && cea12_enable && ~rsta_in && IS_CLK_INVERTED_BIN;
    assign acin_en_p = (A_INPUT == "CASCADE") && cea12_enable && ~rsta_in && ~IS_CLK_INVERTED_BIN;
    assign bcin_en_n = (B_INPUT == "CASCADE") && ceb12_enable && ~rstb_in && IS_CLK_INVERTED_BIN;
    assign bcin_en_p = (B_INPUT == "CASCADE") && ceb12_enable && ~rstb_in && ~IS_CLK_INVERTED_BIN;

    assign carryin_en_n = cea12_enable && ceb12_enable && cecarryin_in && ~rsta_in && ~rstb_in && ~rstallcarryin_in && IS_CLK_INVERTED_BIN;
    assign carryin_en_p = cea12_enable && ceb12_enable && cecarryin_in && ~rsta_in && ~rstb_in && ~rstallcarryin_in && ~IS_CLK_INVERTED_BIN;
    assign carryinsel_en_n = cea12_enable && ceb12_enable && ~rsta_in && ~rstb_in && ~rstctrl_in && IS_CLK_INVERTED_BIN;
    assign carryinsel_en_p = cea12_enable && ceb12_enable && ~rsta_in && ~rstb_in && ~rstctrl_in && ~IS_CLK_INVERTED_BIN;
    assign opmode_en_n = cectrl_in && ~rstctrl_in && IS_CLK_INVERTED_BIN;
    assign opmode_en_p = cectrl_in && ~rstctrl_in && ~IS_CLK_INVERTED_BIN;
    assign pcin_en_n = cep_in && ~rstp_in && IS_CLK_INVERTED_BIN;
    assign pcin_en_p = cep_in && ~rstp_in && ~IS_CLK_INVERTED_BIN;

    assign c_en_n = cec_in && ~rstc_in && IS_CLK_INVERTED_BIN;
    assign c_en_p = cec_in && ~rstc_in && ~IS_CLK_INVERTED_BIN;

    assign inmode_en_n = ceinmode_in && ~rstinmode_in && IS_CLK_INVERTED_BIN;
    assign inmode_en_p = ceinmode_in && ~rstinmode_in && ~IS_CLK_INVERTED_BIN;
    assign d_en_n = ced_in && ~rstd_in && IS_CLK_INVERTED_BIN;
    assign d_en_p = ced_in && ~rstd_in && ~IS_CLK_INVERTED_BIN;

    assign clk_gsr_en_n = ~gsr_in && IS_CLK_INVERTED_BIN;
    assign clk_gsr_en_p = ~gsr_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rsta_en_n = ~rsta_in && IS_CLK_INVERTED_BIN;
    assign clk_rsta_en_p = ~rsta_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstb_en_n = ~rstb_in && IS_CLK_INVERTED_BIN;
    assign clk_rstb_en_p = ~rstb_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstc_en_n = ~rstc_in && IS_CLK_INVERTED_BIN;
    assign clk_rstc_en_p = ~rstc_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstd_en_n = ~rstd_in && IS_CLK_INVERTED_BIN;
    assign clk_rstd_en_p = ~rstd_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstm_en_n = ~rstm_in && IS_CLK_INVERTED_BIN;
    assign clk_rstm_en_p = ~rstm_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstp_en_n = ~rstp_in && IS_CLK_INVERTED_BIN;
    assign clk_rstp_en_p = ~rstp_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstallcarryin_en_n = ~rstallcarryin_in && IS_CLK_INVERTED_BIN;
    assign clk_rstallcarryin_en_p = ~rstallcarryin_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstctrl_en_n = ~rstctrl_in && IS_CLK_INVERTED_BIN;
    assign clk_rstctrl_en_p = ~rstctrl_in && ~IS_CLK_INVERTED_BIN;
    assign clk_rstinmode_en_n = ~rstinmode_in && IS_CLK_INVERTED_BIN;
    assign clk_rstinmode_en_p = ~rstinmode_in && ~IS_CLK_INVERTED_BIN;
    assign clk_en_n = IS_CLK_INVERTED_BIN;
    assign clk_en_p = ~IS_CLK_INVERTED_BIN;
`endif

  specify
    (A *> ACOUT) = (0:0:0, 0:0:0);
    (A *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (A *> CARRYOUT) = (0:0:0, 0:0:0);
    (A *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (A *> OVERFLOW) = (0:0:0, 0:0:0);
    (A *> P) = (0:0:0, 0:0:0);
    (A *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (A *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (A *> PCOUT) = (0:0:0, 0:0:0);
    (A *> UNDERFLOW) = (0:0:0, 0:0:0);
    (ACIN *> ACOUT) = (0:0:0, 0:0:0);
    (ACIN *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (ACIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (ACIN *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (ACIN *> OVERFLOW) = (0:0:0, 0:0:0);
    (ACIN *> P) = (0:0:0, 0:0:0);
    (ACIN *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (ACIN *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (ACIN *> PCOUT) = (0:0:0, 0:0:0);
    (ACIN *> UNDERFLOW) = (0:0:0, 0:0:0);
    (ALUMODE *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (ALUMODE *> CARRYOUT) = (0:0:0, 0:0:0);
    (ALUMODE *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (ALUMODE *> OVERFLOW) = (0:0:0, 0:0:0);
    (ALUMODE *> P) = (0:0:0, 0:0:0);
    (ALUMODE *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (ALUMODE *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (ALUMODE *> PCOUT) = (0:0:0, 0:0:0);
    (ALUMODE *> UNDERFLOW) = (0:0:0, 0:0:0);
    (B *> BCOUT) = (0:0:0, 0:0:0);
    (B *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (B *> CARRYOUT) = (0:0:0, 0:0:0);
    (B *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (B *> OVERFLOW) = (0:0:0, 0:0:0);
    (B *> P) = (0:0:0, 0:0:0);
    (B *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (B *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (B *> PCOUT) = (0:0:0, 0:0:0);
    (B *> UNDERFLOW) = (0:0:0, 0:0:0);
    (BCIN *> BCOUT) = (0:0:0, 0:0:0);
    (BCIN *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (BCIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (BCIN *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (BCIN *> OVERFLOW) = (0:0:0, 0:0:0);
    (BCIN *> P) = (0:0:0, 0:0:0);
    (BCIN *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (BCIN *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (BCIN *> PCOUT) = (0:0:0, 0:0:0);
    (BCIN *> UNDERFLOW) = (0:0:0, 0:0:0);
    (C *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (C *> CARRYOUT) = (0:0:0, 0:0:0);
    (C *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (C *> OVERFLOW) = (0:0:0, 0:0:0);
    (C *> P) = (0:0:0, 0:0:0);
    (C *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (C *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (C *> PCOUT) = (0:0:0, 0:0:0);
    (C *> UNDERFLOW) = (0:0:0, 0:0:0);
    (CARRYCASCIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (CARRYCASCIN *> P) = (0:0:0, 0:0:0);
    (CARRYCASCIN *> PCOUT) = (0:0:0, 0:0:0);
    (CARRYCASCIN => CARRYCASCOUT) = (0:0:0, 0:0:0);
    (CARRYCASCIN => MULTSIGNOUT) = (0:0:0, 0:0:0);
    (CARRYCASCIN => OVERFLOW) = (0:0:0, 0:0:0);
    (CARRYCASCIN => PATTERNBDETECT) = (0:0:0, 0:0:0);
    (CARRYCASCIN => PATTERNDETECT) = (0:0:0, 0:0:0);
    (CARRYCASCIN => UNDERFLOW) = (0:0:0, 0:0:0);
    (CARRYIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (CARRYIN *> P) = (0:0:0, 0:0:0);
    (CARRYIN *> PCOUT) = (0:0:0, 0:0:0);
    (CARRYIN => CARRYCASCOUT) = (0:0:0, 0:0:0);
    (CARRYIN => MULTSIGNOUT) = (0:0:0, 0:0:0);
    (CARRYIN => OVERFLOW) = (0:0:0, 0:0:0);
    (CARRYIN => PATTERNBDETECT) = (0:0:0, 0:0:0);
    (CARRYIN => PATTERNDETECT) = (0:0:0, 0:0:0);
    (CARRYIN => UNDERFLOW) = (0:0:0, 0:0:0);
    (CARRYINSEL *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> CARRYOUT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> OVERFLOW) = (0:0:0, 0:0:0);
    (CARRYINSEL *> P) = (0:0:0, 0:0:0);
    (CARRYINSEL *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> PCOUT) = (0:0:0, 0:0:0);
    (CARRYINSEL *> UNDERFLOW) = (0:0:0, 0:0:0);
    (CLK *> ACOUT) = (100:100:100, 100:100:100);
    (CLK *> BCOUT) = (100:100:100, 100:100:100);
    (CLK *> CARRYOUT) = (100:100:100, 100:100:100);
    (CLK *> P) = (100:100:100, 100:100:100);
    (CLK *> PCOUT) = (100:100:100, 100:100:100);
    (CLK => CARRYCASCOUT) = (100:100:100, 100:100:100);
    (CLK => MULTSIGNOUT) = (100:100:100, 100:100:100);
    (CLK => OVERFLOW) = (100:100:100, 100:100:100);
    (CLK => PATTERNBDETECT) = (100:100:100, 100:100:100);
    (CLK => PATTERNDETECT) = (100:100:100, 100:100:100);
    (CLK => UNDERFLOW) = (100:100:100, 100:100:100);
    (D *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (D *> CARRYOUT) = (0:0:0, 0:0:0);
    (D *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (D *> OVERFLOW) = (0:0:0, 0:0:0);
    (D *> P) = (0:0:0, 0:0:0);
    (D *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (D *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (D *> PCOUT) = (0:0:0, 0:0:0);
    (D *> UNDERFLOW) = (0:0:0, 0:0:0);
    (INMODE *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (INMODE *> CARRYOUT) = (0:0:0, 0:0:0);
    (INMODE *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (INMODE *> OVERFLOW) = (0:0:0, 0:0:0);
    (INMODE *> P) = (0:0:0, 0:0:0);
    (INMODE *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (INMODE *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (INMODE *> PCOUT) = (0:0:0, 0:0:0);
    (INMODE *> UNDERFLOW) = (0:0:0, 0:0:0);
    (MULTSIGNIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (MULTSIGNIN *> P) = (0:0:0, 0:0:0);
    (MULTSIGNIN *> PCOUT) = (0:0:0, 0:0:0);
    (MULTSIGNIN => CARRYCASCOUT) = (0:0:0, 0:0:0);
    (MULTSIGNIN => MULTSIGNOUT) = (0:0:0, 0:0:0);
    (MULTSIGNIN => OVERFLOW) = (0:0:0, 0:0:0);
    (MULTSIGNIN => PATTERNBDETECT) = (0:0:0, 0:0:0);
    (MULTSIGNIN => PATTERNDETECT) = (0:0:0, 0:0:0);
    (MULTSIGNIN => UNDERFLOW) = (0:0:0, 0:0:0);
    (OPMODE *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (OPMODE *> CARRYOUT) = (0:0:0, 0:0:0);
    (OPMODE *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (OPMODE *> OVERFLOW) = (0:0:0, 0:0:0);
    (OPMODE *> P) = (0:0:0, 0:0:0);
    (OPMODE *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (OPMODE *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (OPMODE *> PCOUT) = (0:0:0, 0:0:0);
    (OPMODE *> UNDERFLOW) = (0:0:0, 0:0:0);
    (PCIN *> CARRYCASCOUT) = (0:0:0, 0:0:0);
    (PCIN *> CARRYOUT) = (0:0:0, 0:0:0);
    (PCIN *> MULTSIGNOUT) = (0:0:0, 0:0:0);
    (PCIN *> OVERFLOW) = (0:0:0, 0:0:0);
    (PCIN *> P) = (0:0:0, 0:0:0);
    (PCIN *> PATTERNBDETECT) = (0:0:0, 0:0:0);
    (PCIN *> PATTERNDETECT) = (0:0:0, 0:0:0);
    (PCIN *> PCOUT) = (0:0:0, 0:0:0);
    (PCIN *> UNDERFLOW) = (0:0:0, 0:0:0);
`ifdef XIL_TIMING
    $period (negedge CLK, 0:0:0, notifier);
    $period (posedge CLK, 0:0:0, notifier);
    $setuphold (negedge CLK, negedge A, 0:0:0, 0:0:0, notifier,a_en_n,a_en_n, clk_dly, a_dly);
    $setuphold (negedge CLK, negedge ACIN, 0:0:0, 0:0:0, notifier,acin_en_n,acin_en_n, clk_dly, acin_dly);
    $setuphold (negedge CLK, negedge ALUMODE, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, alumode_dly);
    $setuphold (negedge CLK, negedge B, 0:0:0, 0:0:0, notifier,b_en_n,b_en_n, clk_dly, b_dly);
    $setuphold (negedge CLK, negedge BCIN, 0:0:0, 0:0:0, notifier,bcin_en_n,bcin_en_n, clk_dly, bcin_dly);
    $setuphold (negedge CLK, negedge C, 0:0:0, 0:0:0, notifier,c_en_n,c_en_n, clk_dly, c_dly);
    $setuphold (negedge CLK, negedge CARRYCASCIN, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, carrycascin_dly);
    $setuphold (negedge CLK, negedge CARRYIN, 0:0:0, 0:0:0, notifier,carryin_en_n,carryin_en_n, clk_dly, carryin_dly);
    $setuphold (negedge CLK, negedge CARRYINSEL, 0:0:0, 0:0:0, notifier,carryinsel_en_n,carryinsel_en_n, clk_dly, carryinsel_dly);
    $setuphold (negedge CLK, negedge CEA1, 0:0:0, 0:0:0, notifier,clk_rsta_en_n,clk_rsta_en_n, clk_dly, cea1_dly);
    $setuphold (negedge CLK, negedge CEA2, 0:0:0, 0:0:0, notifier,clk_rsta_en_n,clk_rsta_en_n, clk_dly, cea2_dly);
    $setuphold (negedge CLK, negedge CEAD, 0:0:0, 0:0:0, notifier,clk_rstd_en_n,clk_rstd_en_n, clk_dly, cead_dly);
    $setuphold (negedge CLK, negedge CEALUMODE, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, cealumode_dly);
    $setuphold (negedge CLK, negedge CEB1, 0:0:0, 0:0:0, notifier,clk_rstb_en_n,clk_rstb_en_n, clk_dly, ceb1_dly);
    $setuphold (negedge CLK, negedge CEB2, 0:0:0, 0:0:0, notifier,clk_rstb_en_n,clk_rstb_en_n, clk_dly, ceb2_dly);
    $setuphold (negedge CLK, negedge CEC, 0:0:0, 0:0:0, notifier,clk_rstc_en_n,clk_rstc_en_n, clk_dly, cec_dly);
    $setuphold (negedge CLK, negedge CECARRYIN, 0:0:0, 0:0:0, notifier,clk_rstallcarryin_en_n,clk_rstallcarryin_en_n, clk_dly, cecarryin_dly);
    $setuphold (negedge CLK, negedge CECTRL, 0:0:0, 0:0:0, notifier,clk_rstctrl_en_n,clk_rstctrl_en_n, clk_dly, cectrl_dly);
    $setuphold (negedge CLK, negedge CED, 0:0:0, 0:0:0, notifier,clk_rstd_en_n,clk_rstd_en_n, clk_dly, ced_dly);
    $setuphold (negedge CLK, negedge CEINMODE, 0:0:0, 0:0:0, notifier,clk_rstinmode_en_n,clk_rstinmode_en_n, clk_dly, ceinmode_dly);
    $setuphold (negedge CLK, negedge CEM, 0:0:0, 0:0:0, notifier,clk_rstm_en_n,clk_rstm_en_n, clk_dly, cem_dly);
    $setuphold (negedge CLK, negedge CEP, 0:0:0, 0:0:0, notifier,clk_rstp_en_n,clk_rstp_en_n, clk_dly, cep_dly);
    $setuphold (negedge CLK, negedge D, 0:0:0, 0:0:0, notifier,d_en_n,d_en_n, clk_dly, d_dly);
    $setuphold (negedge CLK, negedge INMODE, 0:0:0, 0:0:0, notifier,inmode_en_n,inmode_en_n, clk_dly, inmode_dly);
    $setuphold (negedge CLK, negedge MULTSIGNIN, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, multsignin_dly);
    $setuphold (negedge CLK, negedge OPMODE, 0:0:0, 0:0:0, notifier,opmode_en_n,opmode_en_n, clk_dly, opmode_dly);
    $setuphold (negedge CLK, negedge PCIN, 0:0:0, 0:0:0, notifier,pcin_en_n,pcin_en_n, clk_dly, pcin_dly);
    $setuphold (negedge CLK, negedge RSTA, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rsta_dly);
    $setuphold (negedge CLK, negedge RSTALLCARRYIN, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstallcarryin_dly);
    $setuphold (negedge CLK, negedge RSTALUMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstalumode_dly);
    $setuphold (negedge CLK, negedge RSTB, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstb_dly);
    $setuphold (negedge CLK, negedge RSTC, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstc_dly);
    $setuphold (negedge CLK, negedge RSTCTRL, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstctrl_dly);
    $setuphold (negedge CLK, negedge RSTD, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstd_dly);
    $setuphold (negedge CLK, negedge RSTINMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstinmode_dly);
    $setuphold (negedge CLK, negedge RSTM, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstm_dly);
    $setuphold (negedge CLK, negedge RSTP, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstp_dly);
    $setuphold (negedge CLK, posedge A, 0:0:0, 0:0:0, notifier,a_en_n,a_en_n, clk_dly, a_dly);
    $setuphold (negedge CLK, posedge ACIN, 0:0:0, 0:0:0, notifier,acin_en_n,acin_en_n, clk_dly, acin_dly);
    $setuphold (negedge CLK, posedge ALUMODE, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, alumode_dly);
    $setuphold (negedge CLK, posedge B, 0:0:0, 0:0:0, notifier,b_en_n,b_en_n, clk_dly, b_dly );
    $setuphold (negedge CLK, posedge BCIN, 0:0:0, 0:0:0, notifier,bcin_en_n,bcin_en_n, clk_dly, bcin_dly);
    $setuphold (negedge CLK, posedge C, 0:0:0, 0:0:0, notifier,c_en_n,c_en_n, clk_dly, c_dly);
    $setuphold (negedge CLK, posedge CARRYCASCIN, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, carrycascin_dly);
    $setuphold (negedge CLK, posedge CARRYIN, 0:0:0, 0:0:0, notifier,carryin_en_n,carryin_en_n, clk_dly, carryin_dly);
    $setuphold (negedge CLK, posedge CARRYINSEL, 0:0:0, 0:0:0, notifier,carryinsel_en_n,carryinsel_en_n, clk_dly, carryinsel_dly);
    $setuphold (negedge CLK, posedge CEA1, 0:0:0, 0:0:0, notifier,clk_rsta_en_n,clk_rsta_en_n, clk_dly, cea1_dly);
    $setuphold (negedge CLK, posedge CEA2, 0:0:0, 0:0:0, notifier,clk_rsta_en_n,clk_rsta_en_n, clk_dly, cea2_dly);
    $setuphold (negedge CLK, posedge CEAD, 0:0:0, 0:0:0, notifier,clk_rstd_en_n,clk_rstd_en_n, clk_dly, cead_dly);
    $setuphold (negedge CLK, posedge CEALUMODE, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, cealumode_dly);
    $setuphold (negedge CLK, posedge CEB1, 0:0:0, 0:0:0, notifier,clk_rstb_en_n,clk_rstb_en_n, clk_dly, ceb1_dly);
    $setuphold (negedge CLK, posedge CEB2, 0:0:0, 0:0:0, notifier,clk_rstb_en_n,clk_rstb_en_n, clk_dly, ceb2_dly);
    $setuphold (negedge CLK, posedge CEC, 0:0:0, 0:0:0, notifier,clk_rstc_en_n,clk_rstc_en_n, clk_dly, cec_dly);
    $setuphold (negedge CLK, posedge CECARRYIN, 0:0:0, 0:0:0, notifier,clk_rstallcarryin_en_n,clk_rstallcarryin_en_n, clk_dly, cecarryin_dly);
    $setuphold (negedge CLK, posedge CECTRL, 0:0:0, 0:0:0, notifier,clk_rstctrl_en_n,clk_rstctrl_en_n, clk_dly, cectrl_dly);
    $setuphold (negedge CLK, posedge CED, 0:0:0, 0:0:0, notifier,clk_rstd_en_n,clk_rstd_en_n, clk_dly, ced_dly);
    $setuphold (negedge CLK, posedge CEINMODE, 0:0:0, 0:0:0, notifier,clk_rstinmode_en_n,clk_rstinmode_en_n, clk_dly, ceinmode_dly);
    $setuphold (negedge CLK, posedge CEM, 0:0:0, 0:0:0, notifier,clk_rstm_en_n,clk_rstm_en_n, clk_dly, cem_dly);
    $setuphold (negedge CLK, posedge CEP, 0:0:0, 0:0:0, notifier,clk_rstp_en_n,clk_rstp_en_n, clk_dly, cep_dly);
    $setuphold (negedge CLK, posedge D, 0:0:0, 0:0:0, notifier,d_en_n,d_en_n, clk_dly, d_dly);
    $setuphold (negedge CLK, posedge INMODE, 0:0:0, 0:0:0, notifier,inmode_en_n,inmode_en_n, clk_dly, inmode_dly);
    $setuphold (negedge CLK, posedge MULTSIGNIN, 0:0:0, 0:0:0, notifier,clk_en_n,clk_en_n, clk_dly, multsignin_dly);
    $setuphold (negedge CLK, posedge OPMODE, 0:0:0, 0:0:0, notifier,opmode_en_n,opmode_en_n, clk_dly, opmode_dly);
    $setuphold (negedge CLK, posedge PCIN, 0:0:0, 0:0:0, notifier,pcin_en_n,pcin_en_n, clk_dly, pcin_dly);
    $setuphold (negedge CLK, posedge RSTA, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rsta_dly);
    $setuphold (negedge CLK, posedge RSTALLCARRYIN, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstallcarryin_dly);
    $setuphold (negedge CLK, posedge RSTALUMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstalumode_dly);
    $setuphold (negedge CLK, posedge RSTB, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstb_dly);
    $setuphold (negedge CLK, posedge RSTC, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstc_dly);
    $setuphold (negedge CLK, posedge RSTCTRL, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstctrl_dly);
    $setuphold (negedge CLK, posedge RSTD, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstd_dly);
    $setuphold (negedge CLK, posedge RSTINMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstinmode_dly);
    $setuphold (negedge CLK, posedge RSTM, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstm_dly);
    $setuphold (negedge CLK, posedge RSTP, 0:0:0, 0:0:0, notifier,clk_gsr_en_n,clk_gsr_en_n, clk_dly, rstp_dly);
    $setuphold (posedge CLK, negedge A, 0:0:0, 0:0:0, notifier,a_en_p,a_en_p, clk_dly, a_dly);
    $setuphold (posedge CLK, negedge ACIN, 0:0:0, 0:0:0, notifier,acin_en_p,acin_en_p, clk_dly, acin_dly);
    $setuphold (posedge CLK, negedge ALUMODE, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, alumode_dly);
    $setuphold (posedge CLK, negedge B, 0:0:0, 0:0:0, notifier,b_en_p,b_en_p, clk_dly, b_dly);
    $setuphold (posedge CLK, negedge BCIN, 0:0:0, 0:0:0, notifier,bcin_en_p,bcin_en_p, clk_dly, bcin_dly);
    $setuphold (posedge CLK, negedge C, 0:0:0, 0:0:0, notifier,c_en_p,c_en_p, clk_dly, c_dly);
    $setuphold (posedge CLK, negedge CARRYCASCIN, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, carrycascin_dly);
    $setuphold (posedge CLK, negedge CARRYIN, 0:0:0, 0:0:0, notifier,carryin_en_p,carryin_en_p, clk_dly, carryin_dly);
    $setuphold (posedge CLK, negedge CARRYINSEL, 0:0:0, 0:0:0, notifier,carryinsel_en_p,carryinsel_en_p, clk_dly, carryinsel_dly);
    $setuphold (posedge CLK, negedge CEA1, 0:0:0, 0:0:0, notifier,clk_rsta_en_p,clk_rsta_en_p, clk_dly, cea1_dly);
    $setuphold (posedge CLK, negedge CEA2, 0:0:0, 0:0:0, notifier,clk_rsta_en_p,clk_rsta_en_p, clk_dly, cea2_dly);
    $setuphold (posedge CLK, negedge CEAD, 0:0:0, 0:0:0, notifier,clk_rstd_en_p,clk_rstd_en_p, clk_dly, cead_dly);
    $setuphold (posedge CLK, negedge CEALUMODE, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, cealumode_dly);
    $setuphold (posedge CLK, negedge CEB1, 0:0:0, 0:0:0, notifier,clk_rstb_en_p,clk_rstb_en_p, clk_dly, ceb1_dly);
    $setuphold (posedge CLK, negedge CEB2, 0:0:0, 0:0:0, notifier,clk_rstb_en_p,clk_rstb_en_p, clk_dly, ceb2_dly);
    $setuphold (posedge CLK, negedge CEC, 0:0:0, 0:0:0, notifier,clk_rstc_en_p,clk_rstc_en_p, clk_dly, cec_dly);
    $setuphold (posedge CLK, negedge CECARRYIN, 0:0:0, 0:0:0, notifier,clk_rstallcarryin_en_p,clk_rstallcarryin_en_p, clk_dly, cecarryin_dly);
    $setuphold (posedge CLK, negedge CECTRL, 0:0:0, 0:0:0, notifier,clk_rstctrl_en_p,clk_rstctrl_en_p, clk_dly, cectrl_dly);
    $setuphold (posedge CLK, negedge CED, 0:0:0, 0:0:0, notifier,clk_rstd_en_p,clk_rstd_en_p, clk_dly, ced_dly);
    $setuphold (posedge CLK, negedge CEINMODE, 0:0:0, 0:0:0, notifier,clk_rstinmode_en_p,clk_rstinmode_en_p, clk_dly, ceinmode_dly);
    $setuphold (posedge CLK, negedge CEM, 0:0:0, 0:0:0, notifier,clk_rstm_en_p,clk_rstm_en_p, clk_dly, cem_dly);
    $setuphold (posedge CLK, negedge CEP, 0:0:0, 0:0:0, notifier,clk_rstp_en_p,clk_rstp_en_p, clk_dly, cep_dly);
    $setuphold (posedge CLK, negedge D, 0:0:0, 0:0:0, notifier,d_en_p,d_en_p, clk_dly, d_dly);
    $setuphold (posedge CLK, negedge INMODE, 0:0:0, 0:0:0, notifier,inmode_en_p,inmode_en_p, clk_dly, inmode_dly);
    $setuphold (posedge CLK, negedge MULTSIGNIN, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, multsignin_dly);
    $setuphold (posedge CLK, negedge OPMODE, 0:0:0, 0:0:0, notifier,opmode_en_p,opmode_en_p, clk_dly, opmode_dly);
    $setuphold (posedge CLK, negedge PCIN, 0:0:0, 0:0:0, notifier,pcin_en_p,pcin_en_p, clk_dly, pcin_dly);
    $setuphold (posedge CLK, negedge RSTA, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rsta_dly);
    $setuphold (posedge CLK, negedge RSTALLCARRYIN, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstallcarryin_dly);
    $setuphold (posedge CLK, negedge RSTALUMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstalumode_dly);
    $setuphold (posedge CLK, negedge RSTB, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstb_dly);
    $setuphold (posedge CLK, negedge RSTC, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstc_dly);
    $setuphold (posedge CLK, negedge RSTCTRL, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstctrl_dly);
    $setuphold (posedge CLK, negedge RSTD, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstd_dly);
    $setuphold (posedge CLK, negedge RSTINMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstinmode_dly);
    $setuphold (posedge CLK, negedge RSTM, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstm_dly);
    $setuphold (posedge CLK, negedge RSTP, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstp_dly);
    $setuphold (posedge CLK, posedge A, 0:0:0, 0:0:0, notifier,a_en_p,a_en_p, clk_dly, a_dly);
    $setuphold (posedge CLK, posedge ACIN, 0:0:0, 0:0:0, notifier,acin_en_p,acin_en_p, clk_dly, acin_dly);
    $setuphold (posedge CLK, posedge ALUMODE, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, alumode_dly);
    $setuphold (posedge CLK, posedge B, 0:0:0, 0:0:0, notifier,b_en_p,b_en_p, clk_dly, b_dly );
    $setuphold (posedge CLK, posedge BCIN, 0:0:0, 0:0:0, notifier,bcin_en_p,bcin_en_p, clk_dly, bcin_dly);
    $setuphold (posedge CLK, posedge C, 0:0:0, 0:0:0, notifier,c_en_p,c_en_p, clk_dly, c_dly);
    $setuphold (posedge CLK, posedge CARRYCASCIN, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, carrycascin_dly);
    $setuphold (posedge CLK, posedge CARRYIN, 0:0:0, 0:0:0, notifier,carryin_en_p,carryin_en_p, clk_dly, carryin_dly);
    $setuphold (posedge CLK, posedge CARRYINSEL, 0:0:0, 0:0:0, notifier,carryinsel_en_p,carryinsel_en_p, clk_dly, carryinsel_dly);
    $setuphold (posedge CLK, posedge CEA1, 0:0:0, 0:0:0, notifier,clk_rsta_en_p,clk_rsta_en_p, clk_dly, cea1_dly);
    $setuphold (posedge CLK, posedge CEA2, 0:0:0, 0:0:0, notifier,clk_rsta_en_p,clk_rsta_en_p, clk_dly, cea2_dly);
    $setuphold (posedge CLK, posedge CEAD, 0:0:0, 0:0:0, notifier,clk_rstd_en_p,clk_rstd_en_p, clk_dly, cead_dly);
    $setuphold (posedge CLK, posedge CEALUMODE, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, cealumode_dly);
    $setuphold (posedge CLK, posedge CEB1, 0:0:0, 0:0:0, notifier,clk_rstb_en_p,clk_rstb_en_p, clk_dly, ceb1_dly);
    $setuphold (posedge CLK, posedge CEB2, 0:0:0, 0:0:0, notifier,clk_rstb_en_p,clk_rstb_en_p, clk_dly, ceb2_dly);
    $setuphold (posedge CLK, posedge CEC, 0:0:0, 0:0:0, notifier,clk_rstc_en_p,clk_rstc_en_p, clk_dly, cec_dly);
    $setuphold (posedge CLK, posedge CECARRYIN, 0:0:0, 0:0:0, notifier,clk_rstallcarryin_en_p,clk_rstallcarryin_en_p, clk_dly, cecarryin_dly);
    $setuphold (posedge CLK, posedge CECTRL, 0:0:0, 0:0:0, notifier,clk_rstctrl_en_p,clk_rstctrl_en_p, clk_dly, cectrl_dly);
    $setuphold (posedge CLK, posedge CED, 0:0:0, 0:0:0, notifier,clk_rstd_en_p,clk_rstd_en_p, clk_dly, ced_dly);
    $setuphold (posedge CLK, posedge CEINMODE, 0:0:0, 0:0:0, notifier,clk_rstinmode_en_p,clk_rstinmode_en_p, clk_dly, ceinmode_dly);
    $setuphold (posedge CLK, posedge CEM, 0:0:0, 0:0:0, notifier,clk_rstm_en_p,clk_rstm_en_p, clk_dly, cem_dly);
    $setuphold (posedge CLK, posedge CEP, 0:0:0, 0:0:0, notifier,clk_rstp_en_p,clk_rstp_en_p, clk_dly, cep_dly);
    $setuphold (posedge CLK, posedge D, 0:0:0, 0:0:0, notifier,d_en_p,d_en_p, clk_dly, d_dly);
    $setuphold (posedge CLK, posedge INMODE, 0:0:0, 0:0:0, notifier,inmode_en_p,inmode_en_p, clk_dly, inmode_dly);
    $setuphold (posedge CLK, posedge MULTSIGNIN, 0:0:0, 0:0:0, notifier,clk_en_p,clk_en_p, clk_dly, multsignin_dly);
    $setuphold (posedge CLK, posedge OPMODE, 0:0:0, 0:0:0, notifier,opmode_en_p,opmode_en_p, clk_dly, opmode_dly);
    $setuphold (posedge CLK, posedge PCIN, 0:0:0, 0:0:0, notifier,pcin_en_p,pcin_en_p, clk_dly, pcin_dly);
    $setuphold (posedge CLK, posedge RSTA, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rsta_dly);
    $setuphold (posedge CLK, posedge RSTALLCARRYIN, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstallcarryin_dly);
    $setuphold (posedge CLK, posedge RSTALUMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstalumode_dly);
    $setuphold (posedge CLK, posedge RSTB, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstb_dly);
    $setuphold (posedge CLK, posedge RSTC, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstc_dly);
    $setuphold (posedge CLK, posedge RSTCTRL, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstctrl_dly);
    $setuphold (posedge CLK, posedge RSTD, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstd_dly);
    $setuphold (posedge CLK, posedge RSTINMODE, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstinmode_dly);
    $setuphold (posedge CLK, posedge RSTM, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstm_dly);
    $setuphold (posedge CLK, posedge RSTP, 0:0:0, 0:0:0, notifier,clk_gsr_en_p,clk_gsr_en_p, clk_dly, rstp_dly);
    $width (negedge CLK, 0:0:0, 0, notifier);
    $width (posedge CLK, 0:0:0, 0, notifier);
`endif
    specparam PATHPULSE$ = 0;
  endspecify

endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2017 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 2017.3
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  16K-Bit Data and 2K-Bit Parity Dual Port Block RAM
// /___/   /\     Filename : RAMB18E1.v
// \   \  /  \
//  \___\/\___\
//
// Revision:
//    02/26/08 - Initial version.
//    07/25/08 - Fixed ECC in register mode. (IR 477257)
//    07/30/08 - Updated to support SDP mode with smaller port width <= 18. (IR 477258) 
//    11/04/08 - Fixed incorrect output during first clock cycle. (CR 470964)
//    03/11/09 - X's the unused bits of outputs (CR 511363).
//    03/12/09 - Removed parameter from specify block (CR 503821).
//    03/23/09 - Fixed unusual behavior of X's in the unused bits of outputs (CR 513167). 
//    04/10/09 - Implemented workaround for NCSim event triggering during initial time (CR 517450).
//    08/03/09 - Updated collision behavior when both clocks are in phase/within 100 ps (CR 522327).
//    08/12/09 - Updated collision address check for none in phase clocks (CR 527010).
//    11/18/09 - Define tasks and functions before calling (CR 532610).
//    12/16/09 - Enhanced memory initialization (CR 540764).
//    03/15/10 - Updated address collision for asynchronous clocks and read first mode (CR 527010).
//    04/01/10 - Fixed clocks detection for collision (CR 552123).
//    05/11/10 - Updated clocks detection for collision (CR 557624).
//             - Added attribute RDADDR_COLLISION_HWCONFIG. (CR 557971).
//    05/25/10 - Added WRITE_FIRST support in SDP mode (CR 561807).
//    06/03/10 - Added functionality for attribute RDADDR_COLLISION_HWCONFIG (CR 557971).
//    07/08/10 - Added SIM_DEVICE attribute (CR 567633).
//    07/09/10 - Initialized memory to zero for INIT_FILE (CR 560672).
//    08/09/10 - Updated the model according to new address collision/overlap tables (CR 566507). 
//    09/16/10 - Updated from bit to bus timing (CR 575523).
//    10/14/10 - Removed NO_CHANGE support in SDP mode (CR 575924).
//    10/15/10 - Updated 7SERIES address overlap and address collision (CR 575953).
//    12/10/10 - Converted parameter to wire in specify block (CR 574534).
//    03/16/11 - Changed synchronous clock skew to 50ps for 7 series(CR 588053).
//    08/04/11 - Fixed address overlap when clocks are within 100ps (CR 611004).
//    09/12/11 - Fixed ECC error when clocks are within 100ps with address collision/overlap (CR 621942).
//    09/28/11 - Fixed ECC error when clocks are within 100ps with address collision/overlap, part 2 (CR 621942).
//    10/11/11 - Fixed collision with clocks rise at the same time (CR 628129).
//    10/17/11 - Fixed collision with clocks within 100ps in SDP mode (CR 620844).
//    10/28/11 - Removed all mention of internal block ram from messaging (CR 569190).
//    11/04/11 - Fixed collision with clock within 100ps in TDP mode (CR 627670).
//    12/13/11 - Added `celldefine and `endcelldefine (CR 524859).
//    02/05/12 - Fixed read width function when READ_WIDTH_A/B = 0 (CR 643482).
//    02/22/12 - Fixed mem/memp out of bounds warning messages (CR 584399).
//    03/06/12 - Fixed hierarchical error from CR 584399 (CR 648454).
//    03/15/12 - Reverted CR 584399 (CR 651279).
//    02/15/13 - Updated collision check to use clock period or 3ns (CR 694934).
//    07/25/13 - Added invertible pins support (CR 715417).
//    09/04/13 - Removed warning for memp (CR 728988).
//    03/24/14 - Balanced all iniputs with xor (CR778933).
//    08/29/14 - Added negative timing check (CR 821138).
//    09/05/14 - Fixed timing check (CR 822107)
//    10/01/14 - Updated conditional timing check for IS_INVERTED parameter.
//    10/22/14 - Added #1 to $finish (CR 808642).
//    01/21/15 - SIM_DEVICE defaulted to 7SERIES (PR 841966).
// End Revision

`timescale 1 ps / 1 ps
`celldefine
    
module RAMB18E1 (DOADO, DOBDO, DOPADOP, DOPBDOP,
       ADDRARDADDR, ADDRBWRADDR, CLKARDCLK, CLKBWRCLK, DIADI, DIBDI, DIPADIP, DIPBDIP, ENARDEN, ENBWREN, REGCEAREGCE, REGCEB, RSTRAMARSTRAM, RSTRAMB, RSTREGARSTREG, RSTREGB, WEA, WEBWE);

    parameter integer DOA_REG = 0;
    parameter integer DOB_REG = 0;
    parameter [255:0] INITP_00 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_01 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_02 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_03 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_04 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_05 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_06 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INITP_07 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_00 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_01 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_02 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_03 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_04 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_05 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_06 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_07 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_08 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_09 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_0F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_10 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_11 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_12 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_13 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_14 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_15 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_16 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_17 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_18 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_19 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_1F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_20 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_21 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_22 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_23 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_24 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_25 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_26 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_27 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_28 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_29 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_2F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_30 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_31 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_32 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_33 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_34 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_35 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_36 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_37 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_38 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_39 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [255:0] INIT_3F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter [17:0] INIT_A = 18'h0;
    parameter [17:0] INIT_B = 18'h0;
    parameter INIT_FILE = "NONE";
    parameter IS_CLKARDCLK_INVERTED = 1'b0;
    parameter IS_CLKBWRCLK_INVERTED = 1'b0;
    parameter IS_ENARDEN_INVERTED = 1'b0;
    parameter IS_ENBWREN_INVERTED = 1'b0;
    parameter IS_RSTRAMARSTRAM_INVERTED = 1'b0;
    parameter IS_RSTRAMB_INVERTED = 1'b0;
    parameter IS_RSTREGARSTREG_INVERTED = 1'b0;
    parameter IS_RSTREGB_INVERTED = 1'b0;

`ifdef XIL_TIMING
    parameter LOC = "UNPLACED";
`endif
    
    parameter RAM_MODE = "TDP";
    parameter RDADDR_COLLISION_HWCONFIG = "DELAYED_WRITE";
    parameter integer READ_WIDTH_A = 0;
    parameter integer READ_WIDTH_B = 0;
    parameter RSTREG_PRIORITY_A = "RSTREG";
    parameter RSTREG_PRIORITY_B = "RSTREG";
    parameter SIM_COLLISION_CHECK = "ALL";
    parameter SIM_DEVICE = "7SERIES";
    parameter [17:0] SRVAL_A = 18'h0;
    parameter [17:0] SRVAL_B = 18'h0;
    parameter WRITE_MODE_A = "WRITE_FIRST";
    parameter WRITE_MODE_B = "WRITE_FIRST";
    parameter integer WRITE_WIDTH_A = 0;
    parameter integer WRITE_WIDTH_B = 0;
    
    localparam SETUP_ALL = 1000;
    localparam SETUP_READ_FIRST = 3000;
    
    output [15:0] DOADO;
    output [15:0] DOBDO;
    output [1:0] DOPADOP;
    output [1:0] DOPBDOP;
    
    input CLKARDCLK;
    input CLKBWRCLK;
    input ENARDEN;
    input ENBWREN;
    input REGCEAREGCE;
    input REGCEB;
    input RSTRAMARSTRAM;
    input RSTRAMB;
    input RSTREGARSTREG;
    input RSTREGB;
    input [13:0] ADDRARDADDR;
    input [13:0] ADDRBWRADDR;
    input [15:0] DIADI;
    input [15:0] DIBDI;
    input [1:0] DIPADIP;
    input [1:0] DIPBDIP;
    input [1:0] WEA;
    input [3:0] WEBWE;

    tri0 GSR = glbl.GSR;

    wire [7:0] dangle_out8;
    wire dangle_out;
    wire [1:0] dangle_out2;
    wire [3:0] dangle_out4;
    wire [5:0] dangle_out6;
    wire [8:0] dangle_out9;
    wire [15:0] dangle_out16;
    wire [31:0] dangle_out32;
    wire [47:0] dangle_out48;
    wire [15:0] doado_wire, dobdo_wire;
    wire [1:0] dopadop_wire, dopbdop_wire;
    reg [15:0] doado_out, dobdo_out;
    reg [1:0] dopadop_out, dopbdop_out;
    reg notifier, notifier_a, notifier_b;
    reg notifier_addra0, notifier_addra1, notifier_addra2, notifier_addra3, notifier_addra4;
    reg notifier_addra5, notifier_addra6, notifier_addra7, notifier_addra8, notifier_addra9;
    reg notifier_addra10, notifier_addra11, notifier_addra12, notifier_addra13;
    reg notifier_addrb0, notifier_addrb1, notifier_addrb2, notifier_addrb3, notifier_addrb4;
    reg notifier_addrb5, notifier_addrb6, notifier_addrb7, notifier_addrb8, notifier_addrb9;
    reg notifier_addrb10, notifier_addrb11, notifier_addrb12, notifier_addrb13;
    reg   attr_err = 1'b0;

    wire regcearegce_in;
    wire regceb_in;
    wire [13:0] addrardaddr_in;
    wire [13:0] addrbwraddr_in;
    wire [15:0] diadi_in;
    wire [15:0] dibdi_in;
    wire [1:0] dipadip_in;
    wire [1:0] dipbdip_in;
    wire [1:0] wea_in;
    wire [3:0] webwe_in;

   wire clkardclk_in;
   wire clkbwrclk_in;
   wire enarden_in;
   wire enbwren_in;
   wire rstramarstram_in;
   wire rstramb_in;
   wire rstregarstreg_in;
   wire rstregb_in;

`ifdef XIL_TIMING
    wire CLKARDCLK_delay;
    wire CLKBWRCLK_delay;
    wire ENARDEN_delay;
    wire ENBWREN_delay;
    wire REGCEAREGCE_delay;
    wire REGCEB_delay;
    wire RSTRAMARSTRAM_delay;
    wire RSTRAMB_delay;
    wire RSTREGARSTREG_delay;
    wire RSTREGB_delay;
    wire [13:0] ADDRARDADDR_delay;
    wire [13:0] ADDRBWRADDR_delay;
    wire [15:0] DIADI_delay;
    wire [15:0] DIBDI_delay;
    wire [1:0] DIPADIP_delay;
    wire [1:0] DIPBDIP_delay;
    wire [1:0] WEA_delay;
    wire [3:0] WEBWE_delay;
`endif

`ifdef XIL_TIMING
   assign regcearegce_in = REGCEAREGCE_delay;
   assign regceb_in = REGCEB_delay;
   assign addrardaddr_in = ADDRARDADDR_delay;
   assign addrbwraddr_in = ADDRBWRADDR_delay;
   assign diadi_in = DIADI_delay;
   assign dibdi_in = DIBDI_delay;
   assign dipadip_in = DIPADIP_delay;
   assign dipbdip_in = DIPBDIP_delay;
   assign wea_in = WEA_delay;
   assign webwe_in = WEBWE_delay;
   assign clkardclk_in = CLKARDCLK_delay ^ IS_CLKARDCLK_INVERTED;
   assign clkbwrclk_in = CLKBWRCLK_delay ^ IS_CLKBWRCLK_INVERTED;
   assign enarden_in = ENARDEN_delay ^ IS_ENARDEN_INVERTED;
   assign enbwren_in = ENBWREN_delay ^ IS_ENBWREN_INVERTED;
   assign rstramarstram_in = RSTRAMARSTRAM_delay ^ IS_RSTRAMARSTRAM_INVERTED;
   assign rstramb_in = RSTRAMB_delay ^ IS_RSTRAMB_INVERTED;
   assign rstregarstreg_in = RSTREGARSTREG_delay ^ IS_RSTREGARSTREG_INVERTED;
   assign rstregb_in = RSTREGB_delay ^ IS_RSTREGB_INVERTED;
`else
   assign regcearegce_in = REGCEAREGCE;
   assign regceb_in = REGCEB;
   assign addrardaddr_in = ADDRARDADDR;
   assign addrbwraddr_in = ADDRBWRADDR;
   assign diadi_in = DIADI;
   assign dibdi_in = DIBDI;
   assign dipadip_in = DIPADIP;
   assign dipbdip_in = DIPBDIP;
   assign wea_in = WEA;
   assign webwe_in = WEBWE;
   assign clkardclk_in = CLKARDCLK ^ IS_CLKARDCLK_INVERTED;
   assign clkbwrclk_in = CLKBWRCLK ^ IS_CLKBWRCLK_INVERTED;
   assign enarden_in = ENARDEN ^ IS_ENARDEN_INVERTED;
   assign enbwren_in = ENBWREN ^ IS_ENBWREN_INVERTED;
   assign rstramarstram_in = RSTRAMARSTRAM ^ IS_RSTRAMARSTRAM_INVERTED;
   assign rstramb_in = RSTRAMB ^ IS_RSTRAMB_INVERTED;
   assign rstregarstreg_in = RSTREGARSTREG ^ IS_RSTREGARSTREG_INVERTED;
   assign rstregb_in = RSTREGB ^ IS_RSTREGB_INVERTED;
`endif

   initial begin


          if (!((IS_CLKARDCLK_INVERTED >= 1'b0) && (IS_CLKARDCLK_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_CLKARDCLK_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_CLKARDCLK_INVERTED);
        attr_err = 1'b1;
     end

          if (!((IS_CLKBWRCLK_INVERTED >= 1'b0) && (IS_CLKBWRCLK_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_CLKBWRCLK_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_CLKBWRCLK_INVERTED);
        attr_err = 1'b1;
     end
      
          if (!((IS_ENARDEN_INVERTED >= 1'b0) && (IS_ENARDEN_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_ENARDEN_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_ENARDEN_INVERTED);
        attr_err = 1'b1;
     end

          if (!((IS_ENBWREN_INVERTED >= 1'b0) && (IS_ENBWREN_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_ENBWREN_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_ENBWREN_INVERTED);
        attr_err = 1'b1;
     end
      
          if (!((IS_RSTRAMARSTRAM_INVERTED >= 1'b0) && (IS_RSTRAMARSTRAM_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_RSTRAMARSTRAM_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_RSTRAMARSTRAM_INVERTED);
        attr_err = 1'b1;
     end

          if (!((IS_RSTRAMB_INVERTED >= 1'b0) && (IS_RSTRAMB_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_RSTRAMB_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_RSTRAMB_INVERTED);
        attr_err = 1'b1;
     end
      
          if (!((IS_RSTREGARSTREG_INVERTED >= 1'b0) && (IS_RSTREGARSTREG_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_RSTREGARSTREG_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_RSTREGARSTREG_INVERTED);
        attr_err = 1'b1;
     end

          if (!((IS_RSTREGB_INVERTED >= 1'b0) && (IS_RSTREGB_INVERTED <= 1'b1))) begin
        $display("Attribute Syntax Error : The attribute IS_RSTREGB_INVERTED on RAMB18E1 instance %m is set to %b.  Legal values for this attribute are 1'b0 to 1'b1.", IS_RSTREGB_INVERTED);
        attr_err = 1'b1;
     end

          if (attr_err == 1'b1) #1 $finish;

   end // initial begin


    // special handle for sdp width = 36
    localparam [35:0] init_sdp = (READ_WIDTH_A == 36) ? {INIT_B[17:16],INIT_A[17:16],INIT_B[15:0],INIT_A[15:0]} : {INIT_B, INIT_A};
    localparam [35:0] srval_sdp = (READ_WIDTH_A == 36) ? {SRVAL_B[17:16],SRVAL_A[17:16],SRVAL_B[15:0],SRVAL_A[15:0]} : {SRVAL_B, SRVAL_A};

    
    generate
        case (RAM_MODE)
       
       "TDP" : begin : gen_tdp
   
      RB18_INTERNAL_VLOG #(.RAM_MODE(RAM_MODE),
              .INIT_A(INIT_A),
              .INIT_B(INIT_B),
              .INIT_FILE(INIT_FILE),
              .SRVAL_A(SRVAL_A),
              .SRVAL_B(SRVAL_B),
              .RDADDR_COLLISION_HWCONFIG(RDADDR_COLLISION_HWCONFIG),
              .READ_WIDTH_A(READ_WIDTH_A),
              .READ_WIDTH_B(READ_WIDTH_B),
              .WRITE_WIDTH_A(WRITE_WIDTH_A),
              .WRITE_WIDTH_B(WRITE_WIDTH_B),
              .WRITE_MODE_A(WRITE_MODE_A),
              .WRITE_MODE_B(WRITE_MODE_B),
              .SETUP_ALL(SETUP_ALL),
              .SETUP_READ_FIRST(SETUP_READ_FIRST),
              .SIM_COLLISION_CHECK(SIM_COLLISION_CHECK),
              .SIM_DEVICE(SIM_DEVICE),
              .DOA_REG(DOA_REG),
              .DOB_REG(DOB_REG),
              .RSTREG_PRIORITY_A(RSTREG_PRIORITY_A),
              .RSTREG_PRIORITY_B(RSTREG_PRIORITY_B),
              .BRAM_SIZE(18),
              .INIT_00(INIT_00),
              .INIT_01(INIT_01),
              .INIT_02(INIT_02),
              .INIT_03(INIT_03),
              .INIT_04(INIT_04),
              .INIT_05(INIT_05),
              .INIT_06(INIT_06),
              .INIT_07(INIT_07),
              .INIT_08(INIT_08),
              .INIT_09(INIT_09),
              .INIT_0A(INIT_0A),
              .INIT_0B(INIT_0B),
              .INIT_0C(INIT_0C),
              .INIT_0D(INIT_0D),
              .INIT_0E(INIT_0E),
              .INIT_0F(INIT_0F),
              .INIT_10(INIT_10),
              .INIT_11(INIT_11),
              .INIT_12(INIT_12),
              .INIT_13(INIT_13),
              .INIT_14(INIT_14),
              .INIT_15(INIT_15),
              .INIT_16(INIT_16),
              .INIT_17(INIT_17),
              .INIT_18(INIT_18),
              .INIT_19(INIT_19),
              .INIT_1A(INIT_1A),
              .INIT_1B(INIT_1B),
              .INIT_1C(INIT_1C),
              .INIT_1D(INIT_1D),
              .INIT_1E(INIT_1E),
              .INIT_1F(INIT_1F),
              .INIT_20(INIT_20),
              .INIT_21(INIT_21),
              .INIT_22(INIT_22),
              .INIT_23(INIT_23),
              .INIT_24(INIT_24),
              .INIT_25(INIT_25),
              .INIT_26(INIT_26),
              .INIT_27(INIT_27),
              .INIT_28(INIT_28),
              .INIT_29(INIT_29),
              .INIT_2A(INIT_2A),
              .INIT_2B(INIT_2B),
              .INIT_2C(INIT_2C),
              .INIT_2D(INIT_2D),
              .INIT_2E(INIT_2E),
              .INIT_2F(INIT_2F),
              .INIT_30(INIT_30),
              .INIT_31(INIT_31),
              .INIT_32(INIT_32),
              .INIT_33(INIT_33),
              .INIT_34(INIT_34),
              .INIT_35(INIT_35),
              .INIT_36(INIT_36),
              .INIT_37(INIT_37),
              .INIT_38(INIT_38),
              .INIT_39(INIT_39),
              .INIT_3A(INIT_3A),
              .INIT_3B(INIT_3B),
              .INIT_3C(INIT_3C),
              .INIT_3D(INIT_3D),
              .INIT_3E(INIT_3E),
              .INIT_3F(INIT_3F),
              .INITP_00(INITP_00),
              .INITP_01(INITP_01),
              .INITP_02(INITP_02),
              .INITP_03(INITP_03),
              .INITP_04(INITP_04),
              .INITP_05(INITP_05),
              .INITP_06(INITP_06),
              .INITP_07(INITP_07))
      
      INT_RAMB_TDP (.ADDRA({2'b0,addrardaddr_in}), 
               .ADDRB({2'b0,addrbwraddr_in}), 
               .CASCADEINA(1'b0), 
               .CASCADEINB(1'b0), 
               .CASCADEOUTA(dangle_out), 
               .CASCADEOUTB(dangle_out), 
                  .CLKA(clkardclk_in), 
                  .CLKB(clkbwrclk_in), 
               .DBITERR(dangle_out), 
               .DIA({48'b0,diadi_in}), 
               .DIB({48'b0,dibdi_in}), 
               .DIPA({2'b0,dipadip_in}), 
               .DIPB({6'b0,dipbdip_in}), 
               .DOA({dangle_out48,doado_wire}), 
               .DOB({dangle_out16,dobdo_wire}), 
               .DOPA({dangle_out6,dopadop_wire}), 
               .DOPB({dangle_out2,dopbdop_wire}), 
               .ECCPARITY(dangle_out8), 
                  .ENA(enarden_in), 
                  .ENB(enbwren_in), 
                  .GSR(GSR), 
                  .INJECTDBITERR(1'b0),
                  .INJECTSBITERR(1'b0), 
                  .RDADDRECC(dangle_out9), 
                  .REGCEA(regcearegce_in), 
                  .REGCEB(regceb_in), 
                  .RSTRAMA(rstramarstram_in), 
                  .RSTRAMB(rstramb_in), 
                  .RSTREGA(rstregarstreg_in), 
                  .RSTREGB(rstregb_in), 
                  .SBITERR(dangle_out), 
                  .WEA({4{wea_in}}), 
               .WEB({2{webwe_in}}));

       end // case: "TDP"
       "SDP" : begin : gen_sdp

      if (WRITE_WIDTH_B == 36) begin : gen_wide

          RB18_INTERNAL_VLOG #(.RAM_MODE(RAM_MODE),
              .INIT_A({36'b0,init_sdp}),
              .INIT_B({36'b0,init_sdp}),
              .INIT_FILE(INIT_FILE),
              .SRVAL_A({36'b0,{srval_sdp}}),
              .SRVAL_B({36'b0,{srval_sdp}}),
              .RDADDR_COLLISION_HWCONFIG(RDADDR_COLLISION_HWCONFIG),
              .READ_WIDTH_A(READ_WIDTH_A),
              .READ_WIDTH_B(READ_WIDTH_A),
              .WRITE_WIDTH_A(WRITE_WIDTH_B),
              .WRITE_WIDTH_B(WRITE_WIDTH_B),
              .WRITE_MODE_A(WRITE_MODE_A),
              .WRITE_MODE_B(WRITE_MODE_B),
              .SETUP_ALL(SETUP_ALL),
              .SETUP_READ_FIRST(SETUP_READ_FIRST),
              .SIM_COLLISION_CHECK(SIM_COLLISION_CHECK),
              .SIM_DEVICE(SIM_DEVICE),
              .DOA_REG(DOA_REG),
              .DOB_REG(DOB_REG),
              .RSTREG_PRIORITY_A(RSTREG_PRIORITY_A),
              .RSTREG_PRIORITY_B(RSTREG_PRIORITY_B),
              .BRAM_SIZE(18),
              .INIT_00(INIT_00),
              .INIT_01(INIT_01),
              .INIT_02(INIT_02),
              .INIT_03(INIT_03),
              .INIT_04(INIT_04),
              .INIT_05(INIT_05),
              .INIT_06(INIT_06),
              .INIT_07(INIT_07),
              .INIT_08(INIT_08),
              .INIT_09(INIT_09),
              .INIT_0A(INIT_0A),
              .INIT_0B(INIT_0B),
              .INIT_0C(INIT_0C),
              .INIT_0D(INIT_0D),
              .INIT_0E(INIT_0E),
              .INIT_0F(INIT_0F),
              .INIT_10(INIT_10),
              .INIT_11(INIT_11),
              .INIT_12(INIT_12),
              .INIT_13(INIT_13),
              .INIT_14(INIT_14),
              .INIT_15(INIT_15),
              .INIT_16(INIT_16),
              .INIT_17(INIT_17),
              .INIT_18(INIT_18),
              .INIT_19(INIT_19),
              .INIT_1A(INIT_1A),
              .INIT_1B(INIT_1B),
              .INIT_1C(INIT_1C),
              .INIT_1D(INIT_1D),
              .INIT_1E(INIT_1E),
              .INIT_1F(INIT_1F),
              .INIT_20(INIT_20),
              .INIT_21(INIT_21),
              .INIT_22(INIT_22),
              .INIT_23(INIT_23),
              .INIT_24(INIT_24),
              .INIT_25(INIT_25),
              .INIT_26(INIT_26),
              .INIT_27(INIT_27),
              .INIT_28(INIT_28),
              .INIT_29(INIT_29),
              .INIT_2A(INIT_2A),
              .INIT_2B(INIT_2B),
              .INIT_2C(INIT_2C),
              .INIT_2D(INIT_2D),
              .INIT_2E(INIT_2E),
              .INIT_2F(INIT_2F),
              .INIT_30(INIT_30),
              .INIT_31(INIT_31),
              .INIT_32(INIT_32),
              .INIT_33(INIT_33),
              .INIT_34(INIT_34),
              .INIT_35(INIT_35),
              .INIT_36(INIT_36),
              .INIT_37(INIT_37),
              .INIT_38(INIT_38),
              .INIT_39(INIT_39),
              .INIT_3A(INIT_3A),
              .INIT_3B(INIT_3B),
              .INIT_3C(INIT_3C),
              .INIT_3D(INIT_3D),
              .INIT_3E(INIT_3E),
              .INIT_3F(INIT_3F),
              .INITP_00(INITP_00),
              .INITP_01(INITP_01),
              .INITP_02(INITP_02),
              .INITP_03(INITP_03),
              .INITP_04(INITP_04),
              .INITP_05(INITP_05),
              .INITP_06(INITP_06),
              .INITP_07(INITP_07))
      
              INT_RAMB_SDP (.ADDRA({2'b0,addrardaddr_in}), 
                  .ADDRB({2'b0,addrbwraddr_in}), 
                  .CASCADEINA(1'b0), 
                  .CASCADEINB(1'b0), 
                  .CASCADEOUTA(dangle_out), 
                  .CASCADEOUTB(dangle_out), 
                  .CLKA(clkardclk_in), 
                  .CLKB(clkbwrclk_in), 
                  .DBITERR(dangle_out), 
                  .DIA(64'b0), 
                  .DIB({32'b0,dibdi_in,diadi_in}), 
                  .DIPA(4'b0), 
                  .DIPB({4'b0,dipbdip_in,dipadip_in}), 
                  .DOA({dangle_out32,dobdo_wire,doado_wire}), 
                  .DOB(dangle_out32), 
                  .DOPA({dangle_out4,dopbdop_wire,dopadop_wire}), 
                  .DOPB(dangle_out4), 
                  .ECCPARITY(dangle_out8), 
                  .ENA(enarden_in), 
                  .ENB(enbwren_in), 
                  .GSR(GSR), 
                  .INJECTDBITERR(1'b0),
                  .INJECTSBITERR(1'b0), 
                  .RDADDRECC(dangle_out9), 
                  .REGCEA(regcearegce_in), 
                  .REGCEB(regceb_in), 
                  .RSTRAMA(rstramarstram_in), 
                  .RSTRAMB(rstramb_in), 
                  .RSTREGA(rstregarstreg_in), 
                  .RSTREGB(rstregb_in), 
                  .SBITERR(dangle_out), 
                  .WEA(8'b0), 
                  .WEB({2{webwe_in}}));

      end // if (WRITE_WIDTH_B == 36)
      else begin : gen_narrow

      RB18_INTERNAL_VLOG #(.RAM_MODE(RAM_MODE),
              .INIT_A({36'b0,init_sdp}),
              .INIT_B({36'b0,init_sdp}),
              .INIT_FILE(INIT_FILE),
              .SRVAL_A({36'b0,{srval_sdp}}),
              .SRVAL_B({36'b0,{srval_sdp}}),
              .RDADDR_COLLISION_HWCONFIG(RDADDR_COLLISION_HWCONFIG),
              .READ_WIDTH_A(READ_WIDTH_A),
              .READ_WIDTH_B(READ_WIDTH_A),
              .WRITE_WIDTH_A(WRITE_WIDTH_B),
              .WRITE_WIDTH_B(WRITE_WIDTH_B),
              .WRITE_MODE_A(WRITE_MODE_A),
              .WRITE_MODE_B(WRITE_MODE_B),
              .SETUP_ALL(SETUP_ALL),
              .SETUP_READ_FIRST(SETUP_READ_FIRST),
              .SIM_COLLISION_CHECK(SIM_COLLISION_CHECK),
              .SIM_DEVICE(SIM_DEVICE),
              .DOA_REG(DOA_REG),
              .DOB_REG(DOB_REG),
              .RSTREG_PRIORITY_A(RSTREG_PRIORITY_A),
              .RSTREG_PRIORITY_B(RSTREG_PRIORITY_B),
              .BRAM_SIZE(18),
              .INIT_00(INIT_00),
              .INIT_01(INIT_01),
              .INIT_02(INIT_02),
              .INIT_03(INIT_03),
              .INIT_04(INIT_04),
              .INIT_05(INIT_05),
              .INIT_06(INIT_06),
              .INIT_07(INIT_07),
              .INIT_08(INIT_08),
              .INIT_09(INIT_09),
              .INIT_0A(INIT_0A),
              .INIT_0B(INIT_0B),
              .INIT_0C(INIT_0C),
              .INIT_0D(INIT_0D),
              .INIT_0E(INIT_0E),
              .INIT_0F(INIT_0F),
              .INIT_10(INIT_10),
              .INIT_11(INIT_11),
              .INIT_12(INIT_12),
              .INIT_13(INIT_13),
              .INIT_14(INIT_14),
              .INIT_15(INIT_15),
              .INIT_16(INIT_16),
              .INIT_17(INIT_17),
              .INIT_18(INIT_18),
              .INIT_19(INIT_19),
              .INIT_1A(INIT_1A),
              .INIT_1B(INIT_1B),
              .INIT_1C(INIT_1C),
              .INIT_1D(INIT_1D),
              .INIT_1E(INIT_1E),
              .INIT_1F(INIT_1F),
              .INIT_20(INIT_20),
              .INIT_21(INIT_21),
              .INIT_22(INIT_22),
              .INIT_23(INIT_23),
              .INIT_24(INIT_24),
              .INIT_25(INIT_25),
              .INIT_26(INIT_26),
              .INIT_27(INIT_27),
              .INIT_28(INIT_28),
              .INIT_29(INIT_29),
              .INIT_2A(INIT_2A),
              .INIT_2B(INIT_2B),
              .INIT_2C(INIT_2C),
              .INIT_2D(INIT_2D),
              .INIT_2E(INIT_2E),
              .INIT_2F(INIT_2F),
              .INIT_30(INIT_30),
              .INIT_31(INIT_31),
              .INIT_32(INIT_32),
              .INIT_33(INIT_33),
              .INIT_34(INIT_34),
              .INIT_35(INIT_35),
              .INIT_36(INIT_36),
              .INIT_37(INIT_37),
              .INIT_38(INIT_38),
              .INIT_39(INIT_39),
              .INIT_3A(INIT_3A),
              .INIT_3B(INIT_3B),
              .INIT_3C(INIT_3C),
              .INIT_3D(INIT_3D),
              .INIT_3E(INIT_3E),
              .INIT_3F(INIT_3F),
              .INITP_00(INITP_00),
              .INITP_01(INITP_01),
              .INITP_02(INITP_02),
              .INITP_03(INITP_03),
              .INITP_04(INITP_04),
              .INITP_05(INITP_05),
              .INITP_06(INITP_06),
              .INITP_07(INITP_07))
      
              INT_RAMB_SDP (.ADDRA({2'b0,addrardaddr_in}), 
                  .ADDRB({2'b0,addrbwraddr_in}), 
                  .CASCADEINA(1'b0), 
                  .CASCADEINB(1'b0), 
                  .CASCADEOUTA(dangle_out), 
                  .CASCADEOUTB(dangle_out), 
                  .CLKA(clkardclk_in), 
                  .CLKB(clkbwrclk_in), 
                  .DBITERR(dangle_out), 
                  .DIA(64'b0), 
                  .DIB({48'b0,dibdi_in}), 
                  .DIPA(4'b0), 
                  .DIPB({6'b0,dipbdip_in}), 
                  .DOA({dangle_out32,dobdo_wire,doado_wire}), 
                  .DOB(dangle_out32), 
                  .DOPA({dangle_out4,dopbdop_wire,dopadop_wire}), 
                  .DOPB(dangle_out4), 
                  .ECCPARITY(dangle_out8), 
                  .ENA(enarden_in), 
                  .ENB(enbwren_in), 
                  .GSR(GSR), 
                  .INJECTDBITERR(1'b0),
                  .INJECTSBITERR(1'b0), 
                  .RDADDRECC(dangle_out9), 
                  .REGCEA(regcearegce_in), 
                  .REGCEB(regceb_in), 
                  .RSTRAMA(rstramarstram_in), 
                  .RSTRAMB(rstramb_in), 
                  .RSTREGA(rstregarstreg_in), 
                  .RSTREGB(rstregb_in), 
                  .SBITERR(dangle_out), 
                  .WEA(8'b0), 
                  .WEB({2{webwe_in}}));
      end // else: !if(WRITE_WIDTH_B == 36)
          
       end // case: "SDP"
       
   endcase // case(RAM_MODE)
    endgenerate

    
//*** Timing Checks Start here

    reg [15:0] DOADO_out;
    reg [15:0] DOBDO_out;
    reg [1:0] DOPADOP_out;
    reg [1:0] DOPBDOP_out;

    assign DOADO = DOADO_out;
    assign DOBDO = DOBDO_out;
    assign DOPADOP = DOPADOP_out;
    assign DOPBDOP = DOPBDOP_out;

    always @(doado_wire or rstramb_in or GSR) DOADO_out = doado_wire;
    always @(dobdo_wire or rstramb_in or GSR) DOBDO_out = dobdo_wire;
    always @(dopadop_wire or rstramb_in or GSR) DOPADOP_out = dopadop_wire;
    always @(dopbdop_wire or rstramb_in or GSR) DOPBDOP_out = dopbdop_wire;

`ifdef XIL_TIMING

   wire clkardclk_en_n;
   wire clkardclk_en_p;
   wire clkbwrclk_en_n;
   wire clkbwrclk_en_p;
   assign clkardclk_en_n =  IS_CLKARDCLK_INVERTED;
   assign clkardclk_en_p = ~IS_CLKARDCLK_INVERTED;
   assign clkbwrclk_en_n =  IS_CLKBWRCLK_INVERTED;
   assign clkbwrclk_en_p = ~IS_CLKBWRCLK_INVERTED;

   wire enarden_clka_n = enarden_in && clkardclk_en_n;
   wire enarden_clka_p = enarden_in && clkardclk_en_p;
   wire enbwren_clkb_n = enbwren_in && clkbwrclk_en_n;
   wire enbwren_clkb_p = enbwren_in && clkbwrclk_en_p;
   
   wire diadi0_enable_n = (RAM_MODE == "TDP") && enarden_in && wea_in[0] && clkardclk_en_n;
   wire diadi0_enable_p = (RAM_MODE == "TDP") && enarden_in && wea_in[0] && clkardclk_en_p;

   wire dibdi0_enable_n = (RAM_MODE == "TDP") ? (enbwren_in && webwe_in[0] && clkbwrclk_en_n) : (enbwren_in && webwe_in[2] && clkbwrclk_en_n) ;
   wire dibdi0_enable_p = (RAM_MODE == "TDP") ? (enbwren_in && webwe_in[0] && clkbwrclk_en_p) : (enbwren_in && webwe_in[2] && clkbwrclk_en_p) ;
    
   wire sdp_dia0_clkwr_n = (RAM_MODE == "SDP") && enbwren_in && webwe_in[0] && clkbwrclk_en_n;
   wire sdp_dia0_clkwr_p = (RAM_MODE == "SDP") && enbwren_in && webwe_in[0] && clkbwrclk_en_p;


    always @(notifier or notifier_a or notifier_addra0 or notifier_addra1 or notifier_addra2 or notifier_addra3 or notifier_addra4 or
             notifier_addra5 or notifier_addra6 or notifier_addra7 or notifier_addra8 or notifier_addra9 or notifier_addra10 or 
             notifier_addra11 or notifier_addra12 or notifier_addra13) begin    
   doado_out <= 16'hxxxx;
   dopadop_out <= 2'bxx;
    end

    always @(notifier or notifier_b or notifier_addrb0 or notifier_addrb1 or notifier_addrb2 or notifier_addrb3 or notifier_addrb4 or
             notifier_addrb5 or notifier_addrb6 or notifier_addrb7 or notifier_addrb8 or notifier_addrb9 or notifier_addrb10 or 
             notifier_addrb11 or notifier_addrb12 or notifier_addrb13) begin

   dobdo_out <= 16'hxxxx;
   dopbdop_out <= 2'bxx;
      
      if (RAM_MODE == "SDP") begin
       doado_out <= 16'hxxxx;
       dopadop_out <= 2'bxx; 
      end
      
   end


    always @(notifier_addra0) begin
   task_warn_msg ("ADDRARDADDR[0]", "CLKARDCLK");
    end

    always @(notifier_addra1) begin
   task_warn_msg ("ADDRARDADDR[1]", "CLKARDCLK");
    end
    
    always @(notifier_addra2) begin
   task_warn_msg ("ADDRARDADDR[2]", "CLKARDCLK");
    end
    
    always @(notifier_addra3) begin
   task_warn_msg ("ADDRARDADDR[3]", "CLKARDCLK");
    end
    
    always @(notifier_addra4) begin
   task_warn_msg ("ADDRARDADDR[4]", "CLKARDCLK");
    end

    always @(notifier_addra5) begin
   task_warn_msg ("ADDRARDADDR[5]", "CLKARDCLK");
    end
    
    always @(notifier_addra6) begin
   task_warn_msg ("ADDRARDADDR[6]", "CLKARDCLK");
    end
    
    always @(notifier_addra7) begin
   task_warn_msg ("ADDRARDADDR[7]", "CLKARDCLK");
    end   

    always @(notifier_addra8) begin
   task_warn_msg ("ADDRARDADDR[8]", "CLKARDCLK");
    end

    always @(notifier_addra9) begin
   task_warn_msg ("ADDRARDADDR[9]", "CLKARDCLK");
    end
    
    always @(notifier_addra10) begin
   task_warn_msg ("ADDRARDADDR[10]", "CLKARDCLK");
    end
    
    always @(notifier_addra11) begin
   task_warn_msg ("ADDRARDADDR[11]", "CLKARDCLK");
    end
    
     always @(notifier_addra12) begin
   task_warn_msg ("ADDRARDADDR[12]", "CLKARDCLK");
    end

    always @(notifier_addra13) begin
   task_warn_msg ("ADDRARDADDR[13]", "CLKARDCLK");
    end
    

    always @(notifier_addrb0) begin
   task_warn_msg ("ADDRBWRADDR[0]", "CLKBWRCLK");
    end

    always @(notifier_addrb1) begin
   task_warn_msg ("ADDRBWRADDR[1]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb2) begin
   task_warn_msg ("ADDRBWRADDR[2]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb3) begin
   task_warn_msg ("ADDRBWRADDR[3]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb4) begin
   task_warn_msg ("ADDRBWRADDR[4]", "CLKBWRCLK");
    end

    always @(notifier_addrb5) begin
   task_warn_msg ("ADDRBWRADDR[5]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb6) begin
   task_warn_msg ("ADDRBWRADDR[6]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb7) begin
   task_warn_msg ("ADDRBWRADDR[7]", "CLKBWRCLK");
    end   

    always @(notifier_addrb8) begin
   task_warn_msg ("ADDRBWRADDR[8]", "CLKBWRCLK");
    end

    always @(notifier_addrb9) begin
   task_warn_msg ("ADDRBWRADDR[9]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb10) begin
   task_warn_msg ("ADDRBWRADDR[10]", "CLKBWRCLK");
    end
    
    always @(notifier_addrb11) begin
   task_warn_msg ("ADDRBWRADDR[11]", "CLKBWRCLK");
    end
    
     always @(notifier_addrb12) begin
   task_warn_msg ("ADDRBWRADDR[12]", "CLKBWRCLK");
    end

    always @(notifier_addrb13) begin
   task_warn_msg ("ADDRBWRADDR[13]", "CLKBWRCLK");
    end
    
    
    task task_warn_msg;

        input [8*15:1] addr_str;
   input [8*9:1] clk_str;
   
   begin

       $display("Error: Setup/Hold Violation on %s with respect to %s when memory has been enabled. The memory contents at %s of the RAM can be corrupted. This corruption is not modeled in this simulation model. Please take the necessary steps to recover from this data corruption in hardware.", addr_str, clk_str, addr_str);

   end
   
    endtask // task_warn_msg

`endif //  `ifdef XIL_TIMING


    wire ram_mode_wire = (RAM_MODE == "TDP") ? 1 : 0;

    specify

        (CLKARDCLK *> DOADO) = (100:100:100, 100:100:100);
        (CLKARDCLK *> DOPADOP) = (100:100:100, 100:100:100);

   if (ram_mode_wire == 0) (CLKARDCLK *> DOBDO) = (100:100:100, 100:100:100);
        if (ram_mode_wire == 0) (CLKARDCLK *> DOPBDOP) = (100:100:100, 100:100:100);
        if (ram_mode_wire == 1) (CLKBWRCLK *> DOBDO) = (100:100:100, 100:100:100);
        if (ram_mode_wire == 1) (CLKBWRCLK *> DOPBDOP) = (100:100:100, 100:100:100);

`ifdef XIL_TIMING
   
   $setuphold (posedge CLKARDCLK, posedge ADDRARDADDR, 0:0:0, 0:0:0, notifier_addra0, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, ADDRARDADDR_delay);
          $setuphold (posedge CLKARDCLK, negedge ADDRARDADDR, 0:0:0, 0:0:0, notifier_addra0, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, ADDRARDADDR_delay);
          $setuphold (posedge CLKARDCLK, posedge DIADI, 0:0:0, 0:0:0, notifier_a, diadi0_enable_p, diadi0_enable_p, CLKARDCLK_delay, DIADI_delay);
          $setuphold (posedge CLKARDCLK, negedge DIADI, 0:0:0, 0:0:0, notifier_a, diadi0_enable_p, diadi0_enable_p, CLKARDCLK_delay, DIADI_delay);
          $setuphold (posedge CLKARDCLK, posedge DIPADIP, 0:0:0, 0:0:0, notifier_a, diadi0_enable_p, diadi0_enable_p, CLKARDCLK_delay, DIPADIP_delay);
          $setuphold (posedge CLKARDCLK, negedge DIPADIP, 0:0:0, 0:0:0, notifier_a, diadi0_enable_p, diadi0_enable_p, CLKARDCLK_delay, DIPADIP_delay);
   $setuphold (posedge CLKARDCLK, posedge ENARDEN, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, ENARDEN_delay);
          $setuphold (posedge CLKARDCLK, negedge ENARDEN, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, ENARDEN_delay);
          $setuphold (posedge CLKARDCLK, posedge RSTRAMARSTRAM, 0:0:0, 0:0:0, notifier_a, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, RSTRAMARSTRAM_delay);
          $setuphold (posedge CLKARDCLK, negedge RSTRAMARSTRAM, 0:0:0, 0:0:0, notifier_a, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, RSTRAMARSTRAM_delay);
   $setuphold (posedge CLKARDCLK, posedge RSTREGARSTREG, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, RSTREGARSTREG_delay);
          $setuphold (posedge CLKARDCLK, negedge RSTREGARSTREG, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, RSTREGARSTREG_delay);
   $setuphold (posedge CLKARDCLK, posedge REGCEAREGCE, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, REGCEAREGCE_delay);
          $setuphold (posedge CLKARDCLK, negedge REGCEAREGCE, 0:0:0, 0:0:0, notifier_a, clkardclk_en_p, clkardclk_en_p, CLKARDCLK_delay, REGCEAREGCE_delay);
          $setuphold (posedge CLKARDCLK, posedge WEA, 0:0:0, 0:0:0, notifier_a, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, WEA_delay);
          $setuphold (posedge CLKARDCLK, negedge WEA, 0:0:0, 0:0:0, notifier_a, enarden_clka_p, enarden_clka_p, CLKARDCLK_delay, WEA_delay);

   $setuphold (posedge CLKBWRCLK, posedge ADDRBWRADDR, 0:0:0, 0:0:0, notifier_addrb0, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, ADDRBWRADDR_delay);
          $setuphold (posedge CLKBWRCLK, negedge ADDRBWRADDR, 0:0:0, 0:0:0, notifier_addrb0, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, ADDRBWRADDR_delay);
          $setuphold (posedge CLKBWRCLK, posedge DIADI, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_p, sdp_dia0_clkwr_p, CLKBWRCLK_delay, DIADI_delay);
   $setuphold (posedge CLKBWRCLK, negedge DIADI, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_p, sdp_dia0_clkwr_p, CLKBWRCLK_delay, DIADI_delay);
          $setuphold (posedge CLKBWRCLK, posedge DIPADIP, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_p, sdp_dia0_clkwr_p, CLKBWRCLK_delay, DIPADIP_delay);
          $setuphold (posedge CLKBWRCLK, negedge DIPADIP, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_p, sdp_dia0_clkwr_p, CLKBWRCLK_delay, DIPADIP_delay);
   $setuphold (posedge CLKBWRCLK, posedge DIBDI, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_p, dibdi0_enable_p, CLKBWRCLK_delay, DIBDI_delay);
   $setuphold (posedge CLKBWRCLK, negedge DIBDI, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_p, dibdi0_enable_p, CLKBWRCLK_delay, DIBDI_delay);
          $setuphold (posedge CLKBWRCLK, posedge DIPBDIP, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_p, dibdi0_enable_p, CLKBWRCLK_delay, DIPBDIP_delay);
          $setuphold (posedge CLKBWRCLK, negedge DIPBDIP, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_p, dibdi0_enable_p, CLKBWRCLK_delay, DIPBDIP_delay);
   $setuphold (posedge CLKBWRCLK, posedge ENBWREN, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, ENBWREN_delay);
          $setuphold (posedge CLKBWRCLK, negedge ENBWREN, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, ENBWREN_delay);
   $setuphold (posedge CLKBWRCLK, posedge REGCEB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, REGCEB_delay);
          $setuphold (posedge CLKBWRCLK, negedge REGCEB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, REGCEB_delay);
          $setuphold (posedge CLKBWRCLK, posedge RSTRAMB, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, RSTRAMB_delay);
          $setuphold (posedge CLKBWRCLK, negedge RSTRAMB, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, RSTRAMB_delay);
   $setuphold (posedge CLKBWRCLK, posedge RSTREGB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, RSTREGB_delay);
          $setuphold (posedge CLKBWRCLK, negedge RSTREGB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_p, clkbwrclk_en_p, CLKBWRCLK_delay, RSTREGB_delay);
          $setuphold (posedge CLKBWRCLK, posedge WEBWE, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, WEBWE_delay);
          $setuphold (posedge CLKBWRCLK, negedge WEBWE, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_p, enbwren_clkb_p, CLKBWRCLK_delay, WEBWE_delay);

   $setuphold (negedge CLKARDCLK, posedge ADDRARDADDR, 0:0:0, 0:0:0, notifier_addra0, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, ADDRARDADDR_delay);
          $setuphold (negedge CLKARDCLK, negedge ADDRARDADDR, 0:0:0, 0:0:0, notifier_addra0, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, ADDRARDADDR_delay);
          $setuphold (negedge CLKARDCLK, posedge DIADI, 0:0:0, 0:0:0, notifier_a, diadi0_enable_n, diadi0_enable_n, CLKARDCLK_delay, DIADI_delay);
          $setuphold (negedge CLKARDCLK, negedge DIADI, 0:0:0, 0:0:0, notifier_a, diadi0_enable_n, diadi0_enable_n, CLKARDCLK_delay, DIADI_delay);
          $setuphold (negedge CLKARDCLK, posedge DIPADIP, 0:0:0, 0:0:0, notifier_a, diadi0_enable_n, diadi0_enable_n, CLKARDCLK_delay, DIPADIP_delay);
          $setuphold (negedge CLKARDCLK, negedge DIPADIP, 0:0:0, 0:0:0, notifier_a, diadi0_enable_n, diadi0_enable_n, CLKARDCLK_delay, DIPADIP_delay);
   $setuphold (negedge CLKARDCLK, posedge ENARDEN, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, ENARDEN_delay);
          $setuphold (negedge CLKARDCLK, negedge ENARDEN, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, ENARDEN_delay);
          $setuphold (negedge CLKARDCLK, posedge RSTRAMARSTRAM, 0:0:0, 0:0:0, notifier_a, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, RSTRAMARSTRAM_delay);
          $setuphold (negedge CLKARDCLK, negedge RSTRAMARSTRAM, 0:0:0, 0:0:0, notifier_a, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, RSTRAMARSTRAM_delay);
   $setuphold (negedge CLKARDCLK, posedge RSTREGARSTREG, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, RSTREGARSTREG_delay);
          $setuphold (negedge CLKARDCLK, negedge RSTREGARSTREG, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, RSTREGARSTREG_delay);
   $setuphold (negedge CLKARDCLK, posedge REGCEAREGCE, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, REGCEAREGCE_delay);
          $setuphold (negedge CLKARDCLK, negedge REGCEAREGCE, 0:0:0, 0:0:0, notifier_a, clkardclk_en_n, clkardclk_en_n, CLKARDCLK_delay, REGCEAREGCE_delay);
          $setuphold (negedge CLKARDCLK, posedge WEA, 0:0:0, 0:0:0, notifier_a, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, WEA_delay);
          $setuphold (negedge CLKARDCLK, negedge WEA, 0:0:0, 0:0:0, notifier_a, enarden_clka_n, enarden_clka_n, CLKARDCLK_delay, WEA_delay);

   $setuphold (negedge CLKBWRCLK, posedge ADDRBWRADDR, 0:0:0, 0:0:0, notifier_addrb0, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, ADDRBWRADDR_delay);
          $setuphold (negedge CLKBWRCLK, negedge ADDRBWRADDR, 0:0:0, 0:0:0, notifier_addrb0, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, ADDRBWRADDR_delay);
          $setuphold (negedge CLKBWRCLK, posedge DIADI, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_n, sdp_dia0_clkwr_n, CLKBWRCLK_delay, DIADI_delay);
   $setuphold (negedge CLKBWRCLK, negedge DIADI, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_n, sdp_dia0_clkwr_n, CLKBWRCLK_delay, DIADI_delay);
          $setuphold (negedge CLKBWRCLK, posedge DIPADIP, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_n, sdp_dia0_clkwr_n, CLKBWRCLK_delay, DIPADIP_delay);
          $setuphold (negedge CLKBWRCLK, negedge DIPADIP, 0:0:0, 0:0:0, notifier_b, sdp_dia0_clkwr_n, sdp_dia0_clkwr_n, CLKBWRCLK_delay, DIPADIP_delay);
   $setuphold (negedge CLKBWRCLK, posedge DIBDI, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_n, dibdi0_enable_n, CLKBWRCLK_delay, DIBDI_delay);
   $setuphold (negedge CLKBWRCLK, negedge DIBDI, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_n, dibdi0_enable_n, CLKBWRCLK_delay, DIBDI_delay);
          $setuphold (negedge CLKBWRCLK, posedge DIPBDIP, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_n, dibdi0_enable_n, CLKBWRCLK_delay, DIPBDIP_delay);
          $setuphold (negedge CLKBWRCLK, negedge DIPBDIP, 0:0:0, 0:0:0, notifier_b, dibdi0_enable_n, dibdi0_enable_n, CLKBWRCLK_delay, DIPBDIP_delay);
   $setuphold (negedge CLKBWRCLK, posedge ENBWREN, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, ENBWREN_delay);
          $setuphold (negedge CLKBWRCLK, negedge ENBWREN, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, ENBWREN_delay);
   $setuphold (negedge CLKBWRCLK, posedge REGCEB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, REGCEB_delay);
          $setuphold (negedge CLKBWRCLK, negedge REGCEB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, REGCEB_delay);
          $setuphold (negedge CLKBWRCLK, posedge RSTRAMB, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, RSTRAMB_delay);
          $setuphold (negedge CLKBWRCLK, negedge RSTRAMB, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, RSTRAMB_delay);
   $setuphold (negedge CLKBWRCLK, posedge RSTREGB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, RSTREGB_delay);
          $setuphold (negedge CLKBWRCLK, negedge RSTREGB, 0:0:0, 0:0:0, notifier_b, clkbwrclk_en_n, clkbwrclk_en_n, CLKBWRCLK_delay, RSTREGB_delay);
          $setuphold (negedge CLKBWRCLK, posedge WEBWE, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, WEBWE_delay);
          $setuphold (negedge CLKBWRCLK, negedge WEBWE, 0:0:0, 0:0:0, notifier_b, enbwren_clkb_n, enbwren_clkb_n, CLKBWRCLK_delay, WEBWE_delay);
       
        $period (negedge CLKARDCLK, 0:0:0, notifier_a);
        $period (negedge CLKBWRCLK, 0:0:0, notifier_b);       
   $period (posedge CLKARDCLK, 0:0:0, notifier_a);
   $period (posedge CLKBWRCLK, 0:0:0, notifier_b);
   $width (posedge CLKARDCLK &&& ENARDEN, 0:0:0, 0, notifier_a);
        $width (negedge CLKARDCLK &&& ENARDEN, 0:0:0, 0, notifier_a);
        $width (posedge CLKBWRCLK &&& ENBWREN, 0:0:0, 0, notifier_b);
        $width (negedge CLKBWRCLK &&& ENBWREN, 0:0:0, 0, notifier_b);

`endif //  `ifdef XIL_TIMING
   
   specparam PATHPULSE$ = 0;

    endspecify

endmodule // RAMB18E1


// WARNING !!!: The following model is not an user primitive. 
//              Please do not modify any part of it. RAMB18E1 may not work properly if do so.
//
`timescale 1 ps/1 ps

module RB18_INTERNAL_VLOG (CASCADEOUTA, CASCADEOUTB, DBITERR, DOA, DOB, DOPA, DOPB, ECCPARITY, RDADDRECC, SBITERR, 
          ADDRA, ADDRB, CASCADEINA, CASCADEINB, CLKA, CLKB, DIA, DIB, DIPA, DIPB, ENA, ENB, GSR, INJECTDBITERR, INJECTSBITERR, REGCEA, REGCEB, RSTRAMA, RSTRAMB, RSTREGA, RSTREGB, WEA, WEB);

    output CASCADEOUTA;
    output CASCADEOUTB;
    output DBITERR;
    output SBITERR;
    output [8:0] RDADDRECC;
    output reg [63:0] DOA;
    output reg [31:0] DOB;
    output reg [7:0] DOPA;
    output reg [3:0] DOPB;
    output [7:0] ECCPARITY;
    
    input ENA, CLKA, CASCADEINA, REGCEA;
    input ENB, CLKB, CASCADEINB, REGCEB;
    input GSR;
    input RSTRAMA, RSTRAMB;
    input RSTREGA, RSTREGB;
    input INJECTDBITERR, INJECTSBITERR;
    input [15:0] ADDRA;
    input [15:0] ADDRB;
    input [63:0] DIA;
    input [63:0] DIB;
    input [3:0] DIPA;
    input [7:0] DIPB;
    input [7:0] WEA;
    input [7:0] WEB;

    parameter DOA_REG = 0;
    parameter DOB_REG = 0;
    parameter EN_ECC_READ = "FALSE";
    parameter EN_ECC_WRITE = "FALSE";
    parameter [71:0] INIT_A = 72'h0;
    parameter [71:0] INIT_B = 72'h0;
    parameter RAM_EXTENSION_A = "NONE";
    parameter RAM_EXTENSION_B = "NONE";
    parameter RAM_MODE = "TDP";
    parameter RDADDR_COLLISION_HWCONFIG = "DELAYED_WRITE";
    parameter READ_WIDTH_A = 0;
    parameter READ_WIDTH_B = 0;
    parameter RSTREG_PRIORITY_A = "RSTREG";
    parameter RSTREG_PRIORITY_B = "RSTREG";
    parameter SETUP_ALL = 1000;
    parameter SETUP_READ_FIRST = 3000;
    parameter SIM_COLLISION_CHECK = "ALL";
    parameter SIM_DEVICE = "7SERIES";
    parameter [71:0] SRVAL_A = 72'h0;
    parameter [71:0] SRVAL_B = 72'h0;
    parameter WRITE_MODE_A = "WRITE_FIRST";
    parameter WRITE_MODE_B = "WRITE_FIRST";
    parameter WRITE_WIDTH_A = 0;
    parameter WRITE_WIDTH_B = 0;
    parameter INIT_FILE = "NONE";
    
    parameter INIT_00 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_01 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_02 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_03 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_04 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_05 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_06 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_07 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_08 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_09 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_0F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_10 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_11 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_12 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_13 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_14 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_15 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_16 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_17 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_18 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_19 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_1F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_20 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_21 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_22 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_23 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_24 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_25 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_26 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_27 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_28 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_29 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_2F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_30 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_31 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_32 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_33 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_34 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_35 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_36 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_37 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_38 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_39 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_3F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_40 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_41 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_42 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_43 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_44 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_45 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_46 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_47 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_48 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_49 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_4F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_50 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_51 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_52 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_53 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_54 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_55 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_56 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_57 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_58 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_59 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_5F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_60 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_61 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_62 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_63 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_64 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_65 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_66 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_67 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_68 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_69 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_6F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_70 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_71 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_72 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_73 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_74 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_75 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_76 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_77 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_78 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_79 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INIT_7F = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_00 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_01 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_02 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_03 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_04 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_05 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_06 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_07 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_08 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_09 = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0A = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0B = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0C = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0D = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0E = 256'h0000000000000000000000000000000000000000000000000000000000000000;
    parameter INITP_0F = 256'h0000000000000000000000000000000000000000000000000000000000000000;

// xilinx_internal_parameter on
    // WARNING !!!: This model may not work properly if the following parameters are changed.
    parameter BRAM_SIZE = 36;
// xilinx_internal_parameter off


    integer   count, countp, init_mult, initp_mult, large_width;
    integer count1, countp1, i, i1, j, j1, i_p, i_mem, init_offset, initp_offset;
    integer viol_time = 0;
    integer rdaddr_collision_hwconfig_int, rstreg_priority_a_int, rstreg_priority_b_int;
    integer ram_mode_int, en_ecc_write_int, en_ecc_read_int;
    integer chk_ox_same_clk = 0, chk_ox_msg = 0, chk_col_same_clk = 0;
    
    reg addra_in_15_reg_bram, addrb_in_15_reg_bram;
    reg addra_in_15_reg, addrb_in_15_reg;
    reg addra_in_15_reg1, addrb_in_15_reg1;
    reg junk1;
    reg [1:0] wr_mode_a, wr_mode_b, cascade_a, cascade_b;
    reg [63:0] doa_out = 64'b0, doa_buf = 64'b0, doa_outreg = 64'b0;
    reg [31:0] dob_out = 32'b0, dob_buf = 32'b0, dob_outreg = 32'b0;
    reg [3:0] dopb_out = 4'b0, dopb_buf = 4'b0, dopb_outreg = 4'b0;
    reg [7:0] dopa_out = 8'b0, dopa_buf = 8'b0, dopa_outreg = 8'b0;
    reg [63:0] doa_out_mux = 64'b0, doa_outreg_mux = 64'b0;
    reg [7:0]  dopa_out_mux = 8'b0, dopa_outreg_mux = 8'b0;
    reg [63:0] dob_out_mux = 64'b0, dob_outreg_mux = 64'b0;
    reg [7:0]  dopb_out_mux = 8'b0, dopb_outreg_mux = 8'b0;
    
    reg [7:0] eccparity_out = 8'b0;
    reg [7:0] dopr_ecc, syndrome = 8'b0;
    reg [7:0] dipb_in_ecc;
    reg [71:0] ecc_bit_position;
    reg [7:0] dip_ecc, dip_ecc_col, dipa_in_ecc_corrected;
    reg [63:0] dib_in_ecc, dib_ecc_col, dia_in_ecc_corrected, di_x = 64'bx;
    reg dbiterr_out = 0, sbiterr_out = 0;
    reg dbiterr_outreg = 0, sbiterr_outreg = 0;
    reg dbiterr_out_out = 0, sbiterr_out_out = 0;

    reg [7:0] wea_reg;
    reg enb_reg;
    reg [7:0] out_a = 8'b0, out_b = 8'b0, junk, web_reg;
    reg outp_a = 1'b0, outp_b = 1'b0, junkp;
    reg rising_clka = 1'b0, rising_clkb = 1'b0;
    reg [15:0] addra_reg, addrb_reg;

    reg [63:0] dia_reg, dib_reg;
    reg [3:0] dipa_reg;
    reg [7:0] dipb_reg;
    reg [1:0] viol_type = 2'b00;
    reg col_wr_wr_msg = 1, col_wra_rdb_msg = 1, col_wrb_rda_msg = 1;
    reg [8:0] rdaddrecc_out = 9'b0, rdaddrecc_outreg = 9'b0;
    reg [8:0] rdaddrecc_out_out = 9'b0;
    reg finish_error = 0;

    time time_port_a, time_port_b;

    wire ena_in, enb_in, gsr_in, regcea_in, regceb_in, rstrama_in, rstramb_in;
    wire [7:0] wea_in;
    wire [7:0] web_in;
    wire cascadeina_in, cascadeinb_in;
    wire injectdbiterr_in, injectsbiterr_in;
    wire rstrega_in, rstregb_in;
    reg [15:0] ox_addra_reconstruct, ox_addrb_reconstruct;
    reg [15:0] ox_addra_reconstruct_reg, ox_addrb_reconstruct_reg;
    
    wire temp_wire;  // trigger NCsim at initial time
    assign temp_wire = 1;

    time time_clka_period, time_clkb_period, time_period;
    reg time_skew_a_flag = 0;
    reg time_skew_b_flag = 0;
   
    assign CASCADEOUTA = DOA[0];
    assign CASCADEOUTB = DOB[0];
    assign SBITERR = sbiterr_out_out;
    assign DBITERR = dbiterr_out_out;
    assign ECCPARITY = eccparity_out;
    assign RDADDRECC = rdaddrecc_out_out;
    assign injectdbiterr_in = INJECTDBITERR;
    assign injectsbiterr_in = INJECTSBITERR;
    assign rstrega_in = RSTREGA;
    assign rstregb_in = RSTREGB;

    
    localparam sync_clk_skew = (SIM_DEVICE == "7SERIES") ? 50 : 100;

    
    // Determine memory size
    localparam widest_width = (WRITE_WIDTH_A >= WRITE_WIDTH_B && WRITE_WIDTH_A >= READ_WIDTH_A && 
                WRITE_WIDTH_A >= READ_WIDTH_B) ? WRITE_WIDTH_A : 
               (WRITE_WIDTH_B >= WRITE_WIDTH_A && WRITE_WIDTH_B >= READ_WIDTH_A && 
                WRITE_WIDTH_B >= READ_WIDTH_B) ? WRITE_WIDTH_B :
               (READ_WIDTH_A >= WRITE_WIDTH_A && READ_WIDTH_A >= WRITE_WIDTH_B && 
                READ_WIDTH_A >= READ_WIDTH_B) ? READ_WIDTH_A :
               (READ_WIDTH_B >= WRITE_WIDTH_A && READ_WIDTH_B >= WRITE_WIDTH_B && 
                READ_WIDTH_B >= READ_WIDTH_A) ? READ_WIDTH_B : 72;

    localparam wa_width = (WRITE_WIDTH_A == 1) ? 1   : (WRITE_WIDTH_A == 2) ? 2   :
                          (WRITE_WIDTH_A == 4) ? 4   : (WRITE_WIDTH_A == 9) ? 8   :
                          (WRITE_WIDTH_A == 18) ? 16 : (WRITE_WIDTH_A == 36) ? 32 :
                          (WRITE_WIDTH_A == 72) ? 64 : 64;
    
    localparam wa_width_0 = 0;
    
    localparam wa_width_1 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 8 : (WRITE_WIDTH_A == 36) ? 8 :
                            (WRITE_WIDTH_A == 72) ? 8 : 0;
    
    localparam wa_width_2 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 16 :
                            (WRITE_WIDTH_A == 72) ? 16 : 0;
    
    localparam wa_width_3 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 24 :
                            (WRITE_WIDTH_A == 72) ? 24 : 0;
    
    localparam wa_width_4 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 0 :
                            (WRITE_WIDTH_A == 72) ? 32 : 0;
    
    localparam wa_width_5 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 0 :
                            (WRITE_WIDTH_A == 72) ? 40 : 0;
    
    localparam wa_width_6 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 0 :
                            (WRITE_WIDTH_A == 72) ? 48 : 0;
    
    localparam wa_width_7 = (WRITE_WIDTH_A == 1) ? 0  : (WRITE_WIDTH_A == 2) ? 0  :
                            (WRITE_WIDTH_A == 4) ? 0  : (WRITE_WIDTH_A == 9) ? 0  :
                            (WRITE_WIDTH_A == 18) ? 0 : (WRITE_WIDTH_A == 36) ? 0 :
                            (WRITE_WIDTH_A == 72) ? 56 : 0;
    
    localparam wa_width_n = (WRITE_WIDTH_A == 1) ? 1  : (WRITE_WIDTH_A == 2) ? 2  :
                            (WRITE_WIDTH_A == 4) ? 4  : (WRITE_WIDTH_A == 9) ? 8  :
                            (WRITE_WIDTH_A == 18) ? 8 : (WRITE_WIDTH_A == 36) ? 8 :
                            (WRITE_WIDTH_A == 72) ? 8 : 8;
    
    localparam wb_width = (WRITE_WIDTH_B == 1) ? 1 : (WRITE_WIDTH_B == 2) ? 2 :
                          (WRITE_WIDTH_B == 4) ? 4 : (WRITE_WIDTH_B == 9) ? 8 :
                          (WRITE_WIDTH_B == 18) ? 16 : (WRITE_WIDTH_B == 36) ? 32 :
                          (WRITE_WIDTH_B == 72) ? 64 : 64;

    localparam wb_width_0 = 0;
    
    localparam wb_width_1 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 8 : (WRITE_WIDTH_B == 36) ? 8 :
                            (WRITE_WIDTH_B == 72) ? 8 : 0;
    
    localparam wb_width_2 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 16 :
                            (WRITE_WIDTH_B == 72) ? 16 : 0;
    
    localparam wb_width_3 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 24 :
                            (WRITE_WIDTH_B == 72) ? 24 : 0;
    
    localparam wb_width_4 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 0 :
                            (WRITE_WIDTH_B == 72) ? 32 : 0;
    
    localparam wb_width_5 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 0 :
                            (WRITE_WIDTH_B == 72) ? 40 : 0;
    
    localparam wb_width_6 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 0 :
                            (WRITE_WIDTH_B == 72) ? 48 : 0;
    
    localparam wb_width_7 = (WRITE_WIDTH_B == 1) ? 0  : (WRITE_WIDTH_B == 2) ? 0  :
                            (WRITE_WIDTH_B == 4) ? 0  : (WRITE_WIDTH_B == 9) ? 0  :
                            (WRITE_WIDTH_B == 18) ? 0 : (WRITE_WIDTH_B == 36) ? 0 :
                            (WRITE_WIDTH_B == 72) ? 56 : 0;
    
    localparam wb_width_n = (WRITE_WIDTH_B == 1) ? 1  : (WRITE_WIDTH_B == 2) ? 2  :
                            (WRITE_WIDTH_B == 4) ? 4  : (WRITE_WIDTH_B == 9) ? 8  :
                            (WRITE_WIDTH_B == 18) ? 8 : (WRITE_WIDTH_B == 36) ? 8 :
                            (WRITE_WIDTH_B == 72) ? 8 : 8;
    

    localparam wa_widthp = (WRITE_WIDTH_A == 9) ? 1 : (WRITE_WIDTH_A == 18) ? 2 :
                           (WRITE_WIDTH_A == 36) ? 4 : (WRITE_WIDTH_A == 72) ? 8 : 8;
    
    localparam wb_widthp = (WRITE_WIDTH_B == 9) ? 1 : (WRITE_WIDTH_B == 18) ? 2 :
                           (WRITE_WIDTH_B == 36) ? 4 : (WRITE_WIDTH_B == 72) ? 8 : 8;

    localparam ra_width = (READ_WIDTH_A == 1) ? 1 : (READ_WIDTH_A == 2) ? 2 :
                          (READ_WIDTH_A == 4) ? 4 : (READ_WIDTH_A == 9) ? 8 :
                          (READ_WIDTH_A == 18) ? 16 : (READ_WIDTH_A == 36) ? 32 :
                          (READ_WIDTH_A == 72) ? 64 : (READ_WIDTH_A == 0) ?
                          ((READ_WIDTH_B == 1) ? 1 : (READ_WIDTH_B == 2) ? 2 :
                          (READ_WIDTH_B == 4) ? 4 : (READ_WIDTH_B == 9) ? 8 :
                          (READ_WIDTH_B == 18) ? 16 : (READ_WIDTH_B == 36) ? 32 :
                          (READ_WIDTH_B == 72) ? 64 : 64) : 64;

    localparam ra_width_n = (ra_width == 1) ? 1  : (ra_width == 2) ? 2  :
                            (ra_width == 4) ? 4  : (ra_width == 8) ? 8  :
                            (ra_width == 16) ? 8 : (ra_width == 32) ? 8 :
                            (ra_width == 64) ? 8 : 8;

    localparam rb_width = (READ_WIDTH_B == 1) ? 1 : (READ_WIDTH_B == 2) ? 2 :
                          (READ_WIDTH_B == 4) ? 4 : (READ_WIDTH_B == 9) ? 8 :
                          (READ_WIDTH_B == 18) ? 16 : (READ_WIDTH_B == 36) ? 32 :
                          (READ_WIDTH_B == 72) ? 32 : (READ_WIDTH_B == 0) ?
                          ((READ_WIDTH_A == 1) ? 1 : (READ_WIDTH_A == 2) ? 2 :
                          (READ_WIDTH_A == 4) ? 4 : (READ_WIDTH_A == 9) ? 8 :
                          (READ_WIDTH_A == 18) ? 16 : (READ_WIDTH_A == 36) ? 32 :
                          (READ_WIDTH_A == 72) ? 32 : 32) : 32;
    
    localparam rb_width_0 = 0;

    localparam rb_width_1 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 8 : (rb_width == 32) ? 8 :
                            (rb_width == 64) ? 8 : 8;

    localparam rb_width_2 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 16 :
                            (rb_width == 64) ? 16 : 16;

    localparam rb_width_3 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 24 :
                            (rb_width == 64) ? 24 : 24;

    localparam rb_width_4 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 0 :
                            (rb_width == 64) ? 32 : 32;

    localparam rb_width_5 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 0 :
                            (rb_width == 64) ? 40 : 40;

    localparam rb_width_6 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 0 :
                            (rb_width == 64) ? 48 : 48;

    localparam rb_width_7 = (rb_width == 1) ? 0  : (rb_width == 2) ? 0  :
                            (rb_width == 4) ? 0  : (rb_width == 8) ? 0  :
                            (rb_width == 16) ? 0 : (rb_width == 32) ? 0 :
                            (rb_width == 64) ? 56 : 56;

    localparam rb_width_n = (rb_width == 1) ? 1  : (rb_width == 2) ? 2  :
                            (rb_width == 4) ? 4  : (rb_width == 8) ? 8  :
                            (rb_width == 16) ? 8 : (rb_width == 32) ? 8 :
                            (rb_width == 64) ? 8 : 8;

    localparam ra_widthp = (READ_WIDTH_A == 9) ? 1 : (READ_WIDTH_A == 18) ? 2 :
                           (READ_WIDTH_A == 36) ? 4 : (READ_WIDTH_A == 72) ? 8 : 1;
    
    localparam rb_widthp = (READ_WIDTH_B == 9) ? 1 : (READ_WIDTH_B == 18) ? 2 :
                           (READ_WIDTH_B == 36) ? 4 : (READ_WIDTH_B == 72) ? 4 : 1;
    
    localparam col_addr_lsb = (widest_width == 1) ? 0 : (widest_width == 2) ? 1 : (widest_width == 4) ? 2 :
               (widest_width == 9) ? 3 : (widest_width == 18) ? 4 : (widest_width == 36) ? 5 :
               (widest_width == 72) ? 6 : 0;

    always @(*) begin
      if (WRITE_MODE_A == "READ_FIRST" || WRITE_MODE_B == "READ_FIRST") begin
        if (BRAM_SIZE == 36) ox_addra_reconstruct[15:0] = {1'b0,ADDRA[14:8],8'b0};
        else if (BRAM_SIZE == 18) ox_addra_reconstruct[15:0] = {2'b0,ADDRA[13:7],7'b0};
        else ox_addra_reconstruct[15:0] = ADDRA;
      end else ox_addra_reconstruct[15:0] = ADDRA;
    end

    always @(*) begin
      if (WRITE_MODE_A == "READ_FIRST" || WRITE_MODE_B == "READ_FIRST") begin
        if (BRAM_SIZE == 36) ox_addrb_reconstruct[15:0] = {1'b0,ADDRB[14:8],8'b0};
        else if (BRAM_SIZE == 18) ox_addrb_reconstruct[15:0] = {2'b0,ADDRB[13:7],7'b0};
        else ox_addrb_reconstruct[15:0] = ADDRB;
      end else ox_addrb_reconstruct[15:0] = ADDRB;
    end

    localparam width = (widest_width == 1) ? 1 : (widest_width == 2) ? 2 :
                       (widest_width == 4) ? 4 : (widest_width == 9) ? 8 :
                       (widest_width == 18) ? 16 : (widest_width == 36) ? 32 :
                       (widest_width == 72) ? 64 : 64;    

    localparam width_0 = 0;

    localparam width_1 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 8 : (widest_width == 36) ? 8 :
                         (widest_width == 72) ? 8 : 0;    

    localparam width_2 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 16 :
                         (widest_width == 72) ? 16 : 0;    

    localparam width_3 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 24 :
                         (widest_width == 72) ? 24 : 0;    

    localparam width_4 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 0 :
                         (widest_width == 72) ? 32 : 0;    

    localparam width_5 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 0 :
                         (widest_width == 72) ? 40 : 0;    

    localparam width_6 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 0 :
                         (widest_width == 72) ? 48 : 0;    

    localparam width_7 = (widest_width == 1) ? 0 : (widest_width == 2) ? 0 :
                         (widest_width == 4) ? 0 : (widest_width == 9) ? 0 :
                         (widest_width == 18) ? 0 : (widest_width == 36) ? 0 :
                         (widest_width == 72) ? 56 : 0;    

    localparam width_n = (widest_width == 1) ? 1 : (widest_width == 2) ? 2 :
                         (widest_width == 4) ? 4 : (widest_width == 9) ? 8 :
                         (widest_width == 18) ? 8 : (widest_width == 36) ? 8 :
                         (widest_width == 72) ? 8 : 8;    

    localparam widthp = (widest_width == 9) ? 1 : (widest_width == 18) ? 2 :
                        (widest_width == 36) ? 4 :
                        (widest_width == 72) ? 8 : 1;


    localparam r_addra_lbit_124 = (READ_WIDTH_A == 1) ? 0 : (READ_WIDTH_A == 2) ? 1 : 
                (READ_WIDTH_A == 4) ? 2 : (READ_WIDTH_A == 9) ? 3 : 
                (READ_WIDTH_A == 18) ? 4 : (READ_WIDTH_A == 36) ? 5 : 
                (READ_WIDTH_A == 72) ? 6 : (READ_WIDTH_A == 0) ? 
                ((READ_WIDTH_B == 1) ? 0 : (READ_WIDTH_B == 2) ? 1 : 
                (READ_WIDTH_B == 4) ? 2 : (READ_WIDTH_B == 9) ? 3 : 
                (READ_WIDTH_B == 18) ? 4 : (READ_WIDTH_B == 36) ? 5 : 
                (READ_WIDTH_B == 72) ? 6 : 10) : 10;
    
    localparam r_addrb_lbit_124 = (READ_WIDTH_B == 1) ? 0 : (READ_WIDTH_B == 2) ? 1 : 
                (READ_WIDTH_B == 4) ? 2 : (READ_WIDTH_B == 9) ? 3 : 
                (READ_WIDTH_B == 18) ? 4 : (READ_WIDTH_B == 36) ? 5 : 
                (READ_WIDTH_B == 72) ? 6 : (READ_WIDTH_B == 0) ? 
                ((READ_WIDTH_A == 1) ? 0 : (READ_WIDTH_A == 2) ? 1 : 
                (READ_WIDTH_A == 4) ? 2 : (READ_WIDTH_A == 9) ? 3 : 
                (READ_WIDTH_A == 18) ? 4 : (READ_WIDTH_A == 36) ? 5 : 
                (READ_WIDTH_A == 72) ? 6 : 10) : 10;

    localparam addra_lbit_124 = (WRITE_WIDTH_A == 1) ? 0 : (WRITE_WIDTH_A == 2) ? 1 : 
                (WRITE_WIDTH_A == 4) ? 2 : (WRITE_WIDTH_A == 9) ? 3 : 
                (WRITE_WIDTH_A == 18) ? 4 : (WRITE_WIDTH_A == 36) ? 5 : 
                (WRITE_WIDTH_A == 72) ? 6 : 10;
    
    localparam addrb_lbit_124 = (WRITE_WIDTH_B == 1) ? 0 : (WRITE_WIDTH_B == 2) ? 1 : 
                (WRITE_WIDTH_B == 4) ? 2 : (WRITE_WIDTH_B == 9) ? 3 : 
                (WRITE_WIDTH_B == 18) ? 4 : (WRITE_WIDTH_B == 36) ? 5 : 
                (WRITE_WIDTH_B == 72) ? 6 : 10;
                
    localparam addra_bit_124 = (WRITE_WIDTH_A == 1 && widest_width == 2) ? 0 : (WRITE_WIDTH_A == 1 && widest_width == 4) ? 1 : 
               (WRITE_WIDTH_A == 1 && widest_width == 9) ? 2 : (WRITE_WIDTH_A == 1 && widest_width == 18) ? 3 :
               (WRITE_WIDTH_A == 1 && widest_width == 36) ? 4 : (WRITE_WIDTH_A == 1 && widest_width == 72) ? 5 :
               (WRITE_WIDTH_A == 2 && widest_width == 4) ? 1 : (WRITE_WIDTH_A == 2 && widest_width == 9) ? 2 : 
               (WRITE_WIDTH_A == 2 && widest_width == 18) ? 3 : (WRITE_WIDTH_A == 2 && widest_width == 36) ? 4 :
               (WRITE_WIDTH_A == 2 && widest_width == 72) ? 5 : (WRITE_WIDTH_A == 4 && widest_width == 9) ? 2 :
               (WRITE_WIDTH_A == 4 && widest_width == 18) ? 3 : (WRITE_WIDTH_A == 4 && widest_width == 36) ? 4 : 
               (WRITE_WIDTH_A == 4 && widest_width == 72) ? 5 : 10;
    
    localparam r_addra_bit_124 = (READ_WIDTH_A == 1 && widest_width == 2) ? 0 : (READ_WIDTH_A == 1 && widest_width == 4) ? 1 : 
               (READ_WIDTH_A == 1 && widest_width == 9) ? 2 : (READ_WIDTH_A == 1 && widest_width == 18) ? 3 :
               (READ_WIDTH_A == 1 && widest_width == 36) ? 4 : (READ_WIDTH_A == 1 && widest_width == 72) ? 5 :
               (READ_WIDTH_A == 2 && widest_width == 4) ? 1 : (READ_WIDTH_A == 2 && widest_width == 9) ? 2 : 
               (READ_WIDTH_A == 2 && widest_width == 18) ? 3 : (READ_WIDTH_A == 2 && widest_width == 36) ? 4 :
               (READ_WIDTH_A == 2 && widest_width == 72) ? 5 : (READ_WIDTH_A == 4 && widest_width == 9) ? 2 :
               (READ_WIDTH_A == 4 && widest_width == 18) ? 3 : (READ_WIDTH_A == 4 && widest_width == 36) ? 4 : 
               (READ_WIDTH_A == 4 && widest_width == 72) ? 5 : (READ_WIDTH_A == 0) ? 
                              ((READ_WIDTH_B == 1 && widest_width == 2) ? 0 : (READ_WIDTH_B == 1 && widest_width == 4) ? 1 : 
               (READ_WIDTH_B == 1 && widest_width == 9) ? 2 : (READ_WIDTH_B == 1 && widest_width == 18) ? 3 :
               (READ_WIDTH_B == 1 && widest_width == 36) ? 4 : (READ_WIDTH_B == 1 && widest_width == 72) ? 5 :
               (READ_WIDTH_B == 2 && widest_width == 4) ? 1 : (READ_WIDTH_B == 2 && widest_width == 9) ? 2 : 
               (READ_WIDTH_B == 2 && widest_width == 18) ? 3 : (READ_WIDTH_B == 2 && widest_width == 36) ? 4 :
               (READ_WIDTH_B == 2 && widest_width == 72) ? 5 : (READ_WIDTH_B == 4 && widest_width == 9) ? 2 :
               (READ_WIDTH_B == 4 && widest_width == 18) ? 3 : (READ_WIDTH_B == 4 && widest_width == 36) ? 4 : 
               (READ_WIDTH_B == 4 && widest_width == 72) ? 5 : 10) : 10;

    localparam addrb_bit_124 = (WRITE_WIDTH_B == 1 && widest_width == 2) ? 0 : (WRITE_WIDTH_B == 1 && widest_width == 4) ? 1 : 
               (WRITE_WIDTH_B == 1 && widest_width == 9) ? 2 : (WRITE_WIDTH_B == 1 && widest_width == 18) ? 3 :
               (WRITE_WIDTH_B == 1 && widest_width == 36) ? 4 : (WRITE_WIDTH_B == 1 && widest_width == 72) ? 5 :
               (WRITE_WIDTH_B == 2 && widest_width == 4) ? 1 : (WRITE_WIDTH_B == 2 && widest_width == 9) ? 2 : 
               (WRITE_WIDTH_B == 2 && widest_width == 18) ? 3 : (WRITE_WIDTH_B == 2 && widest_width == 36) ? 4 :
               (WRITE_WIDTH_B == 2 && widest_width == 72) ? 5 : (WRITE_WIDTH_B == 4 && widest_width == 9) ? 2 :
               (WRITE_WIDTH_B == 4 && widest_width == 18) ? 3 : (WRITE_WIDTH_B == 4 && widest_width == 36) ? 4 : 
               (WRITE_WIDTH_B == 4 && widest_width == 72) ? 5 : 10;
    
    localparam r_addrb_bit_124 = (READ_WIDTH_B == 1 && widest_width == 2) ? 0 : (READ_WIDTH_B == 1 && widest_width == 4) ? 1 : 
               (READ_WIDTH_B == 1 && widest_width == 9) ? 2 : (READ_WIDTH_B == 1 && widest_width == 18) ? 3 :
               (READ_WIDTH_B == 1 && widest_width == 36) ? 4 : (READ_WIDTH_B == 1 && widest_width == 72) ? 5 :
               (READ_WIDTH_B == 2 && widest_width == 4) ? 1 : (READ_WIDTH_B == 2 && widest_width == 9) ? 2 : 
               (READ_WIDTH_B == 2 && widest_width == 18) ? 3 : (READ_WIDTH_B == 2 && widest_width == 36) ? 4 :
               (READ_WIDTH_B == 2 && widest_width == 72) ? 5 : (READ_WIDTH_B == 4 && widest_width == 9) ? 2 :
               (READ_WIDTH_B == 4 && widest_width == 18) ? 3 : (READ_WIDTH_B == 4 && widest_width == 36) ? 4 : 
               (READ_WIDTH_B == 4 && widest_width == 72) ? 5 : (READ_WIDTH_B == 0) ? 
                              ((READ_WIDTH_A == 1 && widest_width == 2) ? 0 : (READ_WIDTH_A == 1 && widest_width == 4) ? 1 : 
               (READ_WIDTH_A == 1 && widest_width == 9) ? 2 : (READ_WIDTH_A == 1 && widest_width == 18) ? 3 :
               (READ_WIDTH_A == 1 && widest_width == 36) ? 4 : (READ_WIDTH_A == 1 && widest_width == 72) ? 5 :
               (READ_WIDTH_A == 2 && widest_width == 4) ? 1 : (READ_WIDTH_A == 2 && widest_width == 9) ? 2 : 
               (READ_WIDTH_A == 2 && widest_width == 18) ? 3 : (READ_WIDTH_A == 2 && widest_width == 36) ? 4 :
               (READ_WIDTH_A == 2 && widest_width == 72) ? 5 : (READ_WIDTH_A == 4 && widest_width == 9) ? 2 :
               (READ_WIDTH_A == 4 && widest_width == 18) ? 3 : (READ_WIDTH_A == 4 && widest_width == 36) ? 4 : 
               (READ_WIDTH_A == 4 && widest_width == 72) ? 5 : 10) : 10;

    localparam addra_bit_8 = (WRITE_WIDTH_A == 9 && widest_width == 18) ? 3 : (WRITE_WIDTH_A == 9 && widest_width == 36) ? 4 :
             (WRITE_WIDTH_A == 9 && widest_width == 72) ? 5 : 10;
    
    localparam addra_bit_16 = (WRITE_WIDTH_A == 18 && widest_width == 36) ? 4 : (WRITE_WIDTH_A == 18 && widest_width == 72) ? 5 : 10;

    localparam r_addra_bit_8 = (READ_WIDTH_A == 9 && widest_width == 18) ? 3 : (READ_WIDTH_A == 9 && widest_width == 36) ? 4 :
             (READ_WIDTH_A == 9 && widest_width == 72) ? 5 : (READ_WIDTH_A == 0) ? ((READ_WIDTH_B == 9 && widest_width == 18) ? 3 :
             (READ_WIDTH_B == 9 && widest_width == 36) ? 4 : (READ_WIDTH_B == 9 && widest_width == 72) ? 5 : 10) : 10;
    
    localparam r_addra_bit_16 = (READ_WIDTH_A == 18 && widest_width == 36) ? 4 : (READ_WIDTH_A == 18 && widest_width == 72) ? 5 : 
            (READ_WIDTH_A == 0) ? ((READ_WIDTH_B == 18 && widest_width == 36) ? 4 : 
                                (READ_WIDTH_B == 18 && widest_width == 72) ? 5 : 10) : 10;

    localparam r_addra_bit_32 = (READ_WIDTH_A == 36 && widest_width == 72) ? 5 : 
            (READ_WIDTH_A == 0) ? ((READ_WIDTH_B == 36 && widest_width == 72) ? 5 : 10) : 10;

    localparam addrb_bit_8 = (WRITE_WIDTH_B == 9 && widest_width == 18) ? 3 : (WRITE_WIDTH_B == 9 && widest_width == 36) ? 4 :
             (WRITE_WIDTH_B == 9 && widest_width == 72) ? 5 : 10;
    
    localparam addrb_bit_16 = (WRITE_WIDTH_B == 18 && widest_width == 36) ? 4 : (WRITE_WIDTH_B == 18 && widest_width == 72) ? 5 : 10;

    localparam addrb_bit_32 = (WRITE_WIDTH_B == 36 && widest_width == 72) ? 5 : 10;

    localparam r_addrb_bit_8 = (READ_WIDTH_B == 9 && widest_width == 18) ? 3 : (READ_WIDTH_B == 9 && widest_width == 36) ? 4 :
             (READ_WIDTH_B == 9 && widest_width == 72) ? 5 : (READ_WIDTH_B == 0) ? ((READ_WIDTH_A == 9 && widest_width == 18) ? 3 : 
                            (READ_WIDTH_A == 9 && widest_width == 36) ? 4 : (READ_WIDTH_A == 9 && widest_width == 72) ? 5 : 10) : 10;
    
    localparam r_addrb_bit_16 = (READ_WIDTH_B == 18 && widest_width == 36) ? 4 : (READ_WIDTH_B == 18 && widest_width == 72) ? 5 : 
            (READ_WIDTH_B == 0) ? ((READ_WIDTH_A == 18 && widest_width == 36) ? 4 : 
                                (READ_WIDTH_A == 18 && widest_width == 72) ? 5 : 10) : 10;

    localparam r_addrb_bit_32 = (READ_WIDTH_B == 36 && widest_width == 72) ? 5 : 
            (READ_WIDTH_B == 0) ? ((READ_WIDTH_A == 36 && widest_width == 72) ? 5 : 10) : 10;
    
    localparam mem_size1 = (BRAM_SIZE == 18) ? 16384 : (BRAM_SIZE == 36) ? 32768 : 32768;
    localparam mem_size2 = (BRAM_SIZE == 18) ? 8192 : (BRAM_SIZE == 36) ? 16384 : 16384;
    localparam mem_size4 = (BRAM_SIZE == 18) ? 4096 : (BRAM_SIZE == 36) ? 8192 : 8192;
    localparam mem_size9 = (BRAM_SIZE == 18) ? 2048 : (BRAM_SIZE == 36) ? 4096 : 4096;
    localparam mem_size18 = (BRAM_SIZE == 18) ? 1024 : (BRAM_SIZE == 36) ? 2048 : 2048;
    localparam mem_size36 = (BRAM_SIZE == 18) ? 512 : (BRAM_SIZE == 36) ? 1024 : 1024;
    localparam mem_size72 = (BRAM_SIZE == 18) ? 0 : (BRAM_SIZE == 36) ? 512 : 512;
    
    localparam mem_depth = (widest_width == 1) ? mem_size1 : (widest_width == 2) ? mem_size2 : (widest_width == 4) ? mem_size4 : 
            (widest_width == 9) ? mem_size9 :(widest_width == 18) ? mem_size18 : (widest_width == 36) ? mem_size36 : 
            (widest_width == 72) ? mem_size72 : 32768;
      
    localparam memp_depth = (widest_width == 9) ? mem_size9 :(widest_width == 18) ? mem_size18 : (widest_width == 36) ? mem_size36 : 
             (widest_width == 72) ? mem_size72 : 4096;

    reg [width+widthp-1:0] tmp_mem [0 : mem_depth-1];
    
    reg [width-1:0] mem [mem_depth-1:0];
    reg [widthp-1:0] memp [memp_depth-1:0];
    
    integer index = 0;
   

/******************************************** task and function **************************************/
   
    task task_ram;

   input ram_we;
   input [7:0] ram_di;
   input ram_dip;
   inout [7:0] mem_task;
   inout memp_task;

   begin

       if (ram_we == 1'b1) begin

      mem_task = ram_di;
      
      if (width >= 8)
          memp_task = ram_dip;
       end
   end

    endtask // task_ram

    
    task task_ram_col;

   input ram_col_we_o;
   input ram_col_we;
   input [7:0] ram_col_di;
   input ram_col_dip;
   inout [7:0] ram_col_mem_task;
   inout ram_col_memp_task;
   integer ram_col_i;
   
   begin

       if (ram_col_we == 1'b1) begin

      for (ram_col_i = 0; ram_col_i < 8; ram_col_i = ram_col_i + 1)
          if (ram_col_mem_task[ram_col_i] !== 1'bx || !(ram_col_we === ram_col_we_o && ram_col_we === 1'b1))
         ram_col_mem_task[ram_col_i] = ram_col_di[ram_col_i];
      
      if (width >= 8 && (ram_col_memp_task !== 1'bx || !(ram_col_we === ram_col_we_o && ram_col_we === 1'b1)))
          ram_col_memp_task = ram_col_dip;
      
       end
   end

    endtask // task_ram_col
    

    task task_ram_ox;

   input ram_ox_we_o;
   input ram_ox_we;
   input [7:0] ram_ox_di;
   input ram_ox_dip;
   inout [7:0] ram_ox_mem_task;
   inout ram_ox_memp_task;
   integer ram_ox_i;
   
   begin

       if (ram_ox_we == 1'b1) begin

      for (ram_ox_i = 0; ram_ox_i < 8; ram_ox_i = ram_ox_i + 1)
          ram_ox_mem_task[ram_ox_i] = ram_ox_di[ram_ox_i];
      
      if (width >= 8)
          ram_ox_memp_task = ram_ox_dip;
      
       end
   end

    endtask // task_ram_ox
    
    
    task task_x_buf;
   input [1:0] wr_rd_mode;
   input integer do_uindex;
   input integer do_lindex;
   input integer dop_index;   
   input [63:0] do_ltmp;
   inout [63:0] x_buf_do_tmp;
   input [7:0] dop_ltmp;
   inout [7:0] x_buf_dop_tmp;
   integer i;

   begin

       if (wr_rd_mode == 2'b01) begin
      for (i = do_lindex; i <= do_uindex; i = i + 1) begin
          if (do_ltmp[i] === 1'bx)
         x_buf_do_tmp[i] = 1'bx;
      end
      
      if (dop_ltmp[dop_index] === 1'bx)
          x_buf_dop_tmp[dop_index] = 1'bx;
      
       end // if (wr_rd_mode == 2'b01)
       else begin
      x_buf_do_tmp[do_lindex +: 8] = do_ltmp[do_lindex +: 8];
      x_buf_dop_tmp[dop_index] = dop_ltmp[dop_index];

       end // else: !if(wr_rd_mode == 2'b01)
   end
   
    endtask // task_x_buf
    
    
task task_col_wr_ram_a;
  input [1:0] col_wr_ram_a_seq;
  input [7:0] col_wr_ram_a_web_tmp;
  input [7:0] col_wr_ram_a_wea_tmp;
  input [63:0] col_wr_ram_a_dia_tmp;
  input [7:0] col_wr_ram_a_dipa_tmp;
  input [15:0] col_wr_ram_a_addrb_tmp;
  input [15:0] col_wr_ram_a_addra_tmp;
  begin
    case (wa_width)
      1, 2, 4 : begin
        if (!(col_wr_ram_a_wea_tmp[0] === 1'b1 && col_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || col_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[wa_width-1:0], 1'b0, mem[col_wr_ram_a_addra_tmp[14:addra_lbit_124]], junk1);
          else
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[wa_width-1:0], 1'b0, mem[col_wr_ram_a_addra_tmp[14:addra_bit_124+1]][(col_wr_ram_a_addra_tmp[addra_bit_124:addra_lbit_124] * wa_width) +: wa_width], junk1);                  

          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[0], col_wr_ram_a_web_tmp[0], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
        end // if (!(col_wr_ram_a_wea_tmp[0] === 1'b1 && col_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || col_wr_ram_a_seq == 2'b10)
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if (!(col_wr_ram_a_wea_tmp[0] === 1'b1 && col_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || col_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:3]], memp[col_wr_ram_a_addra_tmp[14:3]]);
          else
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:addra_bit_8+1]][(col_wr_ram_a_addra_tmp[addra_bit_8:3] * wa_width) +: wa_width], memp[col_wr_ram_a_addra_tmp[14:addra_bit_8+1]][(col_wr_ram_a_addra_tmp[addra_bit_8:3] * 1) +: 1]);
             
          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[0], col_wr_ram_a_web_tmp[0], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
        end // if (wa_width <= wb_width)
      end // case: 8
      16 : if (width >= 16) begin
        if (!(col_wr_ram_a_wea_tmp[0] === 1'b1 && col_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || col_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:4]][width_0 +: width_n], memp[col_wr_ram_a_addra_tmp[14:4]][(index)+:1]);
          else
            task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:addra_bit_16+1]][(col_wr_ram_a_addra_tmp[addra_bit_16:4] * wa_width) +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:addra_bit_16+1]][(col_wr_ram_a_addra_tmp[addra_bit_16:4] * 2) +: 1]);                 
              
          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[0], col_wr_ram_a_web_tmp[0], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
            task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:4]][width_1 +: width_n], memp[col_wr_ram_a_addra_tmp[14:4]][(index+1)+:1]);
          else
            task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:addra_bit_16+1]][((col_wr_ram_a_addra_tmp[addra_bit_16:4] * wa_width) + wa_width_1) +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:addra_bit_16+1]][((col_wr_ram_a_addra_tmp[addra_bit_16:4] * 2) + 1) +: 1]);

          if (col_wr_ram_a_seq == 2'b00)
             chk_for_col_msg (col_wr_ram_a_wea_tmp[1], col_wr_ram_a_web_tmp[1], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
        end // if (wa_width <= wb_width)
      end // case: 16
      32 : if (width >= 32) begin
        if (!(col_wr_ram_a_wea_tmp[0] === 1'b1 && col_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || col_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
          task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:5]][width_0 +: width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index)+:1]);
          else if (wa_width < width) begin
          task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:5]][wa_width_0 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index)+:1]);
          end 

          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[0], col_wr_ram_a_web_tmp[0], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
              
          if (wa_width >= width)
          task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:5]][width_1 +: width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+1)+:1]);
          else if (wa_width < width)
          task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:5]][wa_width_1 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+1)+:1]);
          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[1], col_wr_ram_a_web_tmp[1], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
          task_ram_col (col_wr_ram_a_web_tmp[2], col_wr_ram_a_wea_tmp[2], col_wr_ram_a_dia_tmp[23:16], col_wr_ram_a_dipa_tmp[2], mem[col_wr_ram_a_addra_tmp[14:5]][width_2 +: width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+2)+:1]);
          else if (wa_width < width)
          task_ram_col (col_wr_ram_a_web_tmp[2], col_wr_ram_a_wea_tmp[2], col_wr_ram_a_dia_tmp[23:16], col_wr_ram_a_dipa_tmp[2], mem[col_wr_ram_a_addra_tmp[14:5]][wa_width_2 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+2)+:1]);
          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[2], col_wr_ram_a_web_tmp[2], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
              
          if (wa_width >= width)
          task_ram_col (col_wr_ram_a_web_tmp[3], col_wr_ram_a_wea_tmp[3], col_wr_ram_a_dia_tmp[31:24], col_wr_ram_a_dipa_tmp[3], mem[col_wr_ram_a_addra_tmp[14:5]][width_3 +: width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+3)+:1]);
          else if (wa_width < width)
          task_ram_col (col_wr_ram_a_web_tmp[3], col_wr_ram_a_wea_tmp[3], col_wr_ram_a_dia_tmp[31:24], col_wr_ram_a_dipa_tmp[3], mem[col_wr_ram_a_addra_tmp[14:5]][wa_width_3 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:5]][(index+3)+:1]);
          if (col_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_a_wea_tmp[3], col_wr_ram_a_web_tmp[3], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
              
        end // if (wa_width <= wb_width)
      end // case: 32
      64 : if (width >= 64) begin
          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:6]][width_0 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[0], col_wr_ram_a_wea_tmp[0], col_wr_ram_a_dia_tmp[7:0], col_wr_ram_a_dipa_tmp[0], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_0 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[0], col_wr_ram_a_web_tmp[0], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:6]][width_1 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+1)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[1], col_wr_ram_a_wea_tmp[1], col_wr_ram_a_dia_tmp[15:8], col_wr_ram_a_dipa_tmp[1], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_1 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+1)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[1], col_wr_ram_a_web_tmp[1], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[2], col_wr_ram_a_wea_tmp[2], col_wr_ram_a_dia_tmp[23:16], col_wr_ram_a_dipa_tmp[2], mem[col_wr_ram_a_addra_tmp[14:6]][width_2 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+2)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[2], col_wr_ram_a_wea_tmp[2], col_wr_ram_a_dia_tmp[23:16], col_wr_ram_a_dipa_tmp[2], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_2 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+2)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[2], col_wr_ram_a_web_tmp[2], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[3], col_wr_ram_a_wea_tmp[3], col_wr_ram_a_dia_tmp[31:24], col_wr_ram_a_dipa_tmp[3], mem[col_wr_ram_a_addra_tmp[14:6]][width_3 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+3)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[3], col_wr_ram_a_wea_tmp[3], col_wr_ram_a_dia_tmp[31:24], col_wr_ram_a_dipa_tmp[3], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_3 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+3)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[3], col_wr_ram_a_web_tmp[3], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[4], col_wr_ram_a_wea_tmp[4], col_wr_ram_a_dia_tmp[39:32], col_wr_ram_a_dipa_tmp[4], mem[col_wr_ram_a_addra_tmp[14:6]][width_4 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+4)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[4], col_wr_ram_a_wea_tmp[4], col_wr_ram_a_dia_tmp[39:32], col_wr_ram_a_dipa_tmp[4], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_4 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+4)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[4], col_wr_ram_a_web_tmp[4], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[5], col_wr_ram_a_wea_tmp[5], col_wr_ram_a_dia_tmp[47:40], col_wr_ram_a_dipa_tmp[5], mem[col_wr_ram_a_addra_tmp[14:6]][width_5 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+5)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[5], col_wr_ram_a_wea_tmp[5], col_wr_ram_a_dia_tmp[47:40], col_wr_ram_a_dipa_tmp[5], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_5 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+5)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[5], col_wr_ram_a_web_tmp[5], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[6], col_wr_ram_a_wea_tmp[6], col_wr_ram_a_dia_tmp[55:48], col_wr_ram_a_dipa_tmp[6], mem[col_wr_ram_a_addra_tmp[14:6]][width_6 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+6)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[6], col_wr_ram_a_wea_tmp[6], col_wr_ram_a_dia_tmp[55:48], col_wr_ram_a_dipa_tmp[6], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_6 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+6)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[6], col_wr_ram_a_web_tmp[6], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
        task_ram_col (col_wr_ram_a_web_tmp[7], col_wr_ram_a_wea_tmp[7], col_wr_ram_a_dia_tmp[63:56], col_wr_ram_a_dipa_tmp[7], mem[col_wr_ram_a_addra_tmp[14:6]][width_7 +: width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+7)+:1]);
          else
        task_ram_col (col_wr_ram_a_web_tmp[7], col_wr_ram_a_wea_tmp[7], col_wr_ram_a_dia_tmp[63:56], col_wr_ram_a_dipa_tmp[7], mem[col_wr_ram_a_addra_tmp[14:6]][wa_width_7 +: wa_width_n], memp[col_wr_ram_a_addra_tmp[14:6]][(index+7)+:1]);
        if (col_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_a_wea_tmp[7], col_wr_ram_a_web_tmp[7], col_wr_ram_a_addra_tmp, col_wr_ram_a_addrb_tmp);
              
      end // case: 64
    endcase // case(wa_width)
  end
endtask // task_col_wr_ram_a


task task_ox_wr_ram_a;
  input [1:0] ox_wr_ram_a_seq;
  input [7:0] ox_wr_ram_a_web_tmp;
  input [7:0] ox_wr_ram_a_wea_tmp;
  input [63:0] ox_wr_ram_a_dia_tmp;
  input [7:0] ox_wr_ram_a_dipa_tmp;
  input [15:0] ox_wr_ram_a_addrb_tmp;
  input [15:0] ox_wr_ram_a_addra_tmp;

  begin
    case (wa_width)
      1, 2, 4 : begin
        if (!(ox_wr_ram_a_wea_tmp[0] === 1'b1 && ox_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || ox_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[wa_width-1:0], 1'b0, mem[ox_wr_ram_a_addra_tmp[14:addra_lbit_124]], junk1);
          else
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[wa_width-1:0], 1'b0, mem[ox_wr_ram_a_addra_tmp[14:addra_bit_124+1]][(ox_wr_ram_a_addra_tmp[addra_bit_124:addra_lbit_124] * wa_width) +: wa_width], junk1);                  

          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
        
        end // if (!(ox_wr_ram_a_wea_tmp[0] === 1'b1 && ox_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || ox_wr_ram_a_seq == 2'b10)
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if (!(ox_wr_ram_a_wea_tmp[0] === 1'b1 && ox_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || ox_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:3]], memp[ox_wr_ram_a_addra_tmp[14:3]]);
          else
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:addra_bit_8+1]][(ox_wr_ram_a_addra_tmp[addra_bit_8:3] * 8) +: 8], memp[ox_wr_ram_a_addra_tmp[14:addra_bit_8+1]][(ox_wr_ram_a_addra_tmp[addra_bit_8:3] * 1) +: 1]);
             
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
            
        end // if (wa_width <= wb_width)
      end // case: 8
      16 : if (width >= 16) begin
        if (!(ox_wr_ram_a_wea_tmp[0] === 1'b1 && ox_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || ox_wr_ram_a_seq == 2'b10) begin              
          if (wa_width >= width)
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:4]][width_0 +: width_n], memp[ox_wr_ram_a_addra_tmp[14:4]][(index)+:1]);
          else
            task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:addra_bit_16+1]][(ox_wr_ram_a_addra_tmp[addra_bit_16:4] * 16) +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:addra_bit_16+1]][(ox_wr_ram_a_addra_tmp[addra_bit_16:4] * 2) +: 1]);                 
              
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

          if (wa_width >= width)
            task_ram_ox (ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_dia_tmp[15:8], ox_wr_ram_a_dipa_tmp[1], mem[ox_wr_ram_a_addra_tmp[14:4]][width_1 +: width_n], memp[ox_wr_ram_a_addra_tmp[14:4]][(index+1)+:1]);
          else
            task_ram_ox (ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_dia_tmp[15:8], ox_wr_ram_a_dipa_tmp[1], mem[ox_wr_ram_a_addra_tmp[14:addra_bit_16+1]][((ox_wr_ram_a_addra_tmp[addra_bit_16:4] * 16) + wa_width_1) +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:addra_bit_16+1]][((ox_wr_ram_a_addra_tmp[addra_bit_16:4] * 2) + 1) +: 1]);

          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
        end // if (wa_width <= wb_width)
      end // case: 16
      32 : if ( width >= 32) begin
        if (!(ox_wr_ram_a_wea_tmp[0] === 1'b1 && ox_wr_ram_a_web_tmp[0] === 1'b1 && wa_width > wb_width) || ox_wr_ram_a_seq == 2'b10) begin              
          task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:5]][wa_width_0 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:5]][(index)+:1]);
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
              
          task_ram_ox (ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_dia_tmp[15:8], ox_wr_ram_a_dipa_tmp[1], mem[ox_wr_ram_a_addra_tmp[14:5]][wa_width_1 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:5]][(index+1)+:1]);
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

          task_ram_ox (ox_wr_ram_a_web_tmp[2], ox_wr_ram_a_wea_tmp[2], ox_wr_ram_a_dia_tmp[23:16], ox_wr_ram_a_dipa_tmp[2], mem[ox_wr_ram_a_addra_tmp[14:5]][wa_width_2 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:5]][(index+2)+:1]);
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[2], ox_wr_ram_a_web_tmp[2], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
              
          task_ram_ox (ox_wr_ram_a_web_tmp[3], ox_wr_ram_a_wea_tmp[3], ox_wr_ram_a_dia_tmp[31:24], ox_wr_ram_a_dipa_tmp[3], mem[ox_wr_ram_a_addra_tmp[14:5]][wa_width_3 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:5]][(index+3)+:1]);
          if (ox_wr_ram_a_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_a_wea_tmp[3], ox_wr_ram_a_web_tmp[3], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
        end // if (wa_width <= wb_width)
      end // case: 32
      64 : if (width >= 64) begin
        task_ram_ox (ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_dia_tmp[7:0], ox_wr_ram_a_dipa_tmp[0], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_0 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[0], ox_wr_ram_a_web_tmp[0], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_dia_tmp[15:8], ox_wr_ram_a_dipa_tmp[1], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_1 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+1)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[1], ox_wr_ram_a_web_tmp[1], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[2], ox_wr_ram_a_wea_tmp[2], ox_wr_ram_a_dia_tmp[23:16], ox_wr_ram_a_dipa_tmp[2], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_2 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+2)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[2], ox_wr_ram_a_web_tmp[2], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[3], ox_wr_ram_a_wea_tmp[3], ox_wr_ram_a_dia_tmp[31:24], ox_wr_ram_a_dipa_tmp[3], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_3 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+3)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[3], ox_wr_ram_a_web_tmp[3], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[4], ox_wr_ram_a_wea_tmp[4], ox_wr_ram_a_dia_tmp[39:32], ox_wr_ram_a_dipa_tmp[4], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_4 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+4)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[4], ox_wr_ram_a_web_tmp[4], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[5], ox_wr_ram_a_wea_tmp[5], ox_wr_ram_a_dia_tmp[47:40], ox_wr_ram_a_dipa_tmp[5], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_5 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+5)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[5], ox_wr_ram_a_web_tmp[5], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[6], ox_wr_ram_a_wea_tmp[6], ox_wr_ram_a_dia_tmp[55:48], ox_wr_ram_a_dipa_tmp[6], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_6 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+6)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[6], ox_wr_ram_a_web_tmp[6], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);

        task_ram_ox (ox_wr_ram_a_web_tmp[7], ox_wr_ram_a_wea_tmp[7], ox_wr_ram_a_dia_tmp[63:56], ox_wr_ram_a_dipa_tmp[7], mem[ox_wr_ram_a_addra_tmp[14:6]][wa_width_7 +: wa_width_n], memp[ox_wr_ram_a_addra_tmp[14:6]][(index+7)+:1]);
        if (ox_wr_ram_a_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_a_wea_tmp[7], ox_wr_ram_a_web_tmp[7], ox_wr_ram_a_addra_tmp, ox_wr_ram_a_addrb_tmp);
      end // case: 64
    endcase // case(wa_width)
  end
endtask // task_ox_wr_ram_a


task task_col_wr_ram_b;
  input [1:0] col_wr_ram_b_seq;
  input [7:0] col_wr_ram_b_wea_tmp;
  input [7:0] col_wr_ram_b_web_tmp;
  input [63:0] col_wr_ram_b_dib_tmp;
  input [7:0] col_wr_ram_b_dipb_tmp;
  input [15:0] col_wr_ram_b_addra_tmp;
  input [15:0] col_wr_ram_b_addrb_tmp;

  begin
       case (wb_width)

      1, 2, 4 : begin
        if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[wb_width-1:0], 1'b0, mem[col_wr_ram_b_addrb_tmp[14:addrb_lbit_124]], junk1);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[wb_width-1:0], 1'b0, mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_124+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_124:addrb_lbit_124] * wb_width) +: wb_width_n], junk1);                  
              
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);
        end // if (wb_width <= wa_width)
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:3]], memp[col_wr_ram_b_addrb_tmp[14:3]]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_8:3] * wb_width) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_8:3] * 1) +: 1]);
             
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);
        end // if (wb_width <= wa_width)
      end // case: 8
      16 : if (width >= 16) begin
        if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:4]][width_0 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:4]][(index)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) +: 1]);                 
              
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_dib_tmp[15:8], col_wr_ram_b_dipb_tmp[1], mem[col_wr_ram_b_addrb_tmp[14:4]][width_1 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:4]][(index+1)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_dib_tmp[15:8], col_wr_ram_b_dipb_tmp[1], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) + wb_width_n) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) + 1) +: 1]);
              
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);
        end // if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10)
      end // case: 16
      32 : if (width >= 32) begin
        if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10) begin
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:5]][width_0 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:5]][(index)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) +: 1]);                 

          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);          
             
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_dib_tmp[15:8], col_wr_ram_b_dipb_tmp[1], mem[col_wr_ram_b_addrb_tmp[14:5]][width_1 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:5]][(index+1)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_dib_tmp[15:8], col_wr_ram_b_dipb_tmp[1], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_1) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 1) +: 1]);
             
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);
             
          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[2], col_wr_ram_b_web_tmp[2], col_wr_ram_b_dib_tmp[23:16], col_wr_ram_b_dipb_tmp[2], mem[col_wr_ram_b_addrb_tmp[14:5]][width_2 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:5]][(index+2)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[2], col_wr_ram_b_web_tmp[2], col_wr_ram_b_dib_tmp[23:16], col_wr_ram_b_dipb_tmp[2], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_2) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 2) +: 1]);
             
          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[2], col_wr_ram_b_web_tmp[2], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

          if (wb_width >= width)
            task_ram_col (col_wr_ram_b_wea_tmp[3], col_wr_ram_b_web_tmp[3], col_wr_ram_b_dib_tmp[31:24], col_wr_ram_b_dipb_tmp[3], mem[col_wr_ram_b_addrb_tmp[14:5]][width_3 +: width_n], memp[col_wr_ram_b_addrb_tmp[14:5]][(index+3)+:1]);
          else
            task_ram_col (col_wr_ram_b_wea_tmp[3], col_wr_ram_b_web_tmp[3], col_wr_ram_b_dib_tmp[31:24], col_wr_ram_b_dipb_tmp[3], mem[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_3) +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((col_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 3) +: 1]);

          if (col_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (col_wr_ram_b_wea_tmp[3], col_wr_ram_b_web_tmp[3], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        end // if (!(col_wr_ram_b_wea_tmp[0] === 1'b1 && col_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || col_wr_ram_b_seq == 2'b10)
      end // case: 32
      64 : if (width >= 64) begin
        task_ram_col (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_dib_tmp[7:0], col_wr_ram_b_dipb_tmp[0], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_0 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[0], col_wr_ram_b_web_tmp[0], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_dib_tmp[15:8], col_wr_ram_b_dipb_tmp[1], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_1 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+1)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[1], col_wr_ram_b_web_tmp[1], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[2], col_wr_ram_b_web_tmp[2], col_wr_ram_b_dib_tmp[23:16], col_wr_ram_b_dipb_tmp[2], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_2 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+2)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[2], col_wr_ram_b_web_tmp[2], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[3], col_wr_ram_b_web_tmp[3], col_wr_ram_b_dib_tmp[31:24], col_wr_ram_b_dipb_tmp[3], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_3 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+3)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[3], col_wr_ram_b_web_tmp[3], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[4], col_wr_ram_b_web_tmp[4], col_wr_ram_b_dib_tmp[39:32], col_wr_ram_b_dipb_tmp[4], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_4 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+4)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[4], col_wr_ram_b_web_tmp[4], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[5], col_wr_ram_b_web_tmp[5], col_wr_ram_b_dib_tmp[47:40], col_wr_ram_b_dipb_tmp[5], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_5 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+5)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[5], col_wr_ram_b_web_tmp[5], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[6], col_wr_ram_b_web_tmp[6], col_wr_ram_b_dib_tmp[55:48], col_wr_ram_b_dipb_tmp[6], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_6 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+6)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[6], col_wr_ram_b_web_tmp[6], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);

        task_ram_col (col_wr_ram_b_wea_tmp[7], col_wr_ram_b_web_tmp[7], col_wr_ram_b_dib_tmp[63:56], col_wr_ram_b_dipb_tmp[7], mem[col_wr_ram_b_addrb_tmp[14:6]][wb_width_7 +: wb_width_n], memp[col_wr_ram_b_addrb_tmp[14:6]][(index+7)+:1]);
        if (col_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (col_wr_ram_b_wea_tmp[7], col_wr_ram_b_web_tmp[7], col_wr_ram_b_addra_tmp, col_wr_ram_b_addrb_tmp);
      end // case: 64
    endcase // case(wb_width)
  end
endtask // task_col_wr_ram_b


task task_ox_wr_ram_b;
  input [1:0] ox_wr_ram_b_seq;
  input [7:0] ox_wr_ram_b_wea_tmp;
  input [7:0] ox_wr_ram_b_web_tmp;
  input [63:0] ox_wr_ram_b_dib_tmp;
  input [7:0] ox_wr_ram_b_dipb_tmp;
  input [15:0] ox_wr_ram_b_addra_tmp;
  input [15:0] ox_wr_ram_b_addrb_tmp;

  begin
    case (wb_width)
      1, 2, 4 : begin
        if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[wb_width-1:0], 1'b0, mem[ox_wr_ram_b_addrb_tmp[14:addrb_lbit_124]], junk1);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[wb_width-1:0], 1'b0, mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_124+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_124:addrb_lbit_124] * wb_width) +: wb_width], junk1);                  
              
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);
        end // if (wb_width <= wa_width)
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:3]], memp[ox_wr_ram_b_addrb_tmp[14:3]]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_8:3] * wb_width) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_8:3] * 1) +: 1]);
             
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);
        end // if (wb_width <= wa_width)
      end // case: 8
      16 : if (width >= 16) begin
        if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:4]][width_0 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:4]][(index)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) +: 1]);                 
              
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_dib_tmp[15:8], ox_wr_ram_b_dipb_tmp[1], mem[ox_wr_ram_b_addrb_tmp[14:4]][width_1 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:4]][(index+1)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_dib_tmp[15:8], ox_wr_ram_b_dipb_tmp[1], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) + wb_width_1) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) + 1) +: 1]);
              
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        end // if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10)
      end // case: 16
      32 : if (width >= 32) begin
        if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10) begin              
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:5]][width_0 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:5]][(index)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) +: 1]);                 

          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);          
             
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_dib_tmp[15:8], ox_wr_ram_b_dipb_tmp[1], mem[ox_wr_ram_b_addrb_tmp[14:5]][width_1 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:5]][(index+1)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_dib_tmp[15:8], ox_wr_ram_b_dipb_tmp[1], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_1) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 1) +: 1]);
             
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);
             
          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[2], ox_wr_ram_b_web_tmp[2], ox_wr_ram_b_dib_tmp[23:16], ox_wr_ram_b_dipb_tmp[2], mem[ox_wr_ram_b_addrb_tmp[14:5]][width_2 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:5]][(index+2)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[2], ox_wr_ram_b_web_tmp[2], ox_wr_ram_b_dib_tmp[23:16], ox_wr_ram_b_dipb_tmp[2], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_2) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 2) +: 1]);
             
          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[2], ox_wr_ram_b_web_tmp[2], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

          if (wb_width >= width)
            task_ram_ox (ox_wr_ram_b_wea_tmp[3], ox_wr_ram_b_web_tmp[3], ox_wr_ram_b_dib_tmp[31:24], ox_wr_ram_b_dipb_tmp[3], mem[ox_wr_ram_b_addrb_tmp[14:5]][width_3 +: width_n], memp[ox_wr_ram_b_addrb_tmp[14:5]][(index+3)+:1]);
          else
            task_ram_ox (ox_wr_ram_b_wea_tmp[3], ox_wr_ram_b_web_tmp[3], ox_wr_ram_b_dib_tmp[31:24], ox_wr_ram_b_dipb_tmp[3], mem[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_3) +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((ox_wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 3) +: 1]);

          if (ox_wr_ram_b_seq == 2'b00)
            chk_for_col_msg (ox_wr_ram_b_wea_tmp[3], ox_wr_ram_b_web_tmp[3], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        end // if (!(ox_wr_ram_b_wea_tmp[0] === 1'b1 && ox_wr_ram_b_web_tmp[0] === 1'b1 && wb_width > wa_width) || ox_wr_ram_b_seq == 2'b10)
      end // case: 32
      64 : if (width >= 64) begin
        task_ram_ox (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_dib_tmp[7:0], ox_wr_ram_b_dipb_tmp[0], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_0 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[0], ox_wr_ram_b_web_tmp[0], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_dib_tmp[15:8], ox_wr_ram_b_dipb_tmp[1], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_1 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+1)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[1], ox_wr_ram_b_web_tmp[1], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[2], ox_wr_ram_b_web_tmp[2], ox_wr_ram_b_dib_tmp[23:16], ox_wr_ram_b_dipb_tmp[2], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_2 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+2)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[2], ox_wr_ram_b_web_tmp[2], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[3], ox_wr_ram_b_web_tmp[3], ox_wr_ram_b_dib_tmp[31:24], ox_wr_ram_b_dipb_tmp[3], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_3 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+3)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[3], ox_wr_ram_b_web_tmp[3], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[4], ox_wr_ram_b_web_tmp[4], ox_wr_ram_b_dib_tmp[39:32], ox_wr_ram_b_dipb_tmp[4], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_4 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+4)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[4], ox_wr_ram_b_web_tmp[4], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[5], ox_wr_ram_b_web_tmp[5], ox_wr_ram_b_dib_tmp[47:40], ox_wr_ram_b_dipb_tmp[5], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_5 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+5)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[5], ox_wr_ram_b_web_tmp[5], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[6], ox_wr_ram_b_web_tmp[6], ox_wr_ram_b_dib_tmp[55:48], ox_wr_ram_b_dipb_tmp[6], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_6 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+6)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[6], ox_wr_ram_b_web_tmp[6], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);

        task_ram_ox (ox_wr_ram_b_wea_tmp[7], ox_wr_ram_b_web_tmp[7], ox_wr_ram_b_dib_tmp[63:56], ox_wr_ram_b_dipb_tmp[7], mem[ox_wr_ram_b_addrb_tmp[14:6]][wb_width_7 +: wb_width_n], memp[ox_wr_ram_b_addrb_tmp[14:6]][(index+7)+:1]);
        if (ox_wr_ram_b_seq == 2'b00)
          chk_for_col_msg (ox_wr_ram_b_wea_tmp[7], ox_wr_ram_b_web_tmp[7], ox_wr_ram_b_addra_tmp, ox_wr_ram_b_addrb_tmp);
      end // case: 64
    endcase // case(wb_width)
  end
endtask // task_ox_wr_ram_b
    

task task_wr_ram_a;
  input [7:0] wr_ram_a_wea_tmp;
  input [63:0] dia_tmp;
  input [7:0] dipa_tmp;
  input [15:0] wr_ram_a_addra_tmp;
  begin
    case (wa_width)
      1, 2, 4 : begin
        if (wa_width >= width)
              task_ram (wr_ram_a_wea_tmp[0], dia_tmp[wa_width-1:0], 1'b0, mem[wr_ram_a_addra_tmp[14:addra_lbit_124]], junk1);
        else
              task_ram (wr_ram_a_wea_tmp[0], dia_tmp[wa_width-1:0], 1'b0, mem[wr_ram_a_addra_tmp[14:addra_bit_124+1]][(wr_ram_a_addra_tmp[addra_bit_124:addra_lbit_124] * wa_width) +: wa_width_n], junk1);
      end
      8 : if (width >= 8) begin
        if (wa_width >= width)
          task_ram (wr_ram_a_wea_tmp[0], dia_tmp[7:0], dipa_tmp[0], mem[wr_ram_a_addra_tmp[14:3]], memp[wr_ram_a_addra_tmp[14:3]]);
        else
          task_ram (wr_ram_a_wea_tmp[0], dia_tmp[7:0], dipa_tmp[0], mem[wr_ram_a_addra_tmp[14:addra_bit_8+1]][(wr_ram_a_addra_tmp[addra_bit_8:3] * wa_width) +: wa_width_n], memp[wr_ram_a_addra_tmp[14:addra_bit_8+1]][(wr_ram_a_addra_tmp[addra_bit_8:3] * 1) +: 1]);
      end
      16 : if (width >= 16) begin
        if (wa_width >= width) begin
          task_ram (wr_ram_a_wea_tmp[0], dia_tmp[7:0], dipa_tmp[0], mem[wr_ram_a_addra_tmp[14:4]][width_0 +: width_n], memp[wr_ram_a_addra_tmp[14:4]][(index)+:1]);
          task_ram (wr_ram_a_wea_tmp[1], dia_tmp[15:8], dipa_tmp[1], mem[wr_ram_a_addra_tmp[14:4]][width_1 +: width_n], memp[wr_ram_a_addra_tmp[14:4]][(index+1)+:1]);
        end else begin
          task_ram (wr_ram_a_wea_tmp[0], dia_tmp[7:0], dipa_tmp[0], mem[wr_ram_a_addra_tmp[14:addra_bit_16+1]][(wr_ram_a_addra_tmp[addra_bit_16:4] * wa_width) +: wa_width_n], memp[wr_ram_a_addra_tmp[14:addra_bit_16+1]][(wr_ram_a_addra_tmp[addra_bit_16:4] * 2) +: 1]);
          task_ram (wr_ram_a_wea_tmp[1], dia_tmp[15:8], dipa_tmp[1], mem[wr_ram_a_addra_tmp[14:addra_bit_16+1]][((wr_ram_a_addra_tmp[addra_bit_16:4] * wa_width) + wa_width_1) +: wa_width_n], memp[wr_ram_a_addra_tmp[14:addra_bit_16+1]][((wr_ram_a_addra_tmp[addra_bit_16:4] * 2) + 1) +: 1]);
        end // else: !if(wa_width >= wb_width)
      end // case: 16
      32 : if (width >= 32) begin
        task_ram (wr_ram_a_wea_tmp[0], dia_tmp[7:0], dipa_tmp[0], mem[wr_ram_a_addra_tmp[14:5]][wa_width_0 +: wa_width_n], memp[wr_ram_a_addra_tmp[14:5]][(index)+:1]);
        task_ram (wr_ram_a_wea_tmp[1], dia_tmp[15:8], dipa_tmp[1], mem[wr_ram_a_addra_tmp[14:5]][wa_width_1 +: wa_width_n], memp[wr_ram_a_addra_tmp[14:5]][(index+1)+:1]);
        task_ram (wr_ram_a_wea_tmp[2], dia_tmp[23:16], dipa_tmp[2], mem[wr_ram_a_addra_tmp[14:5]][wa_width_2 +: wa_width_n], memp[wr_ram_a_addra_tmp[14:5]][(index+2)+:1]);
        task_ram (wr_ram_a_wea_tmp[3], dia_tmp[31:24], dipa_tmp[3], mem[wr_ram_a_addra_tmp[14:5]][wa_width_3 +: wa_width_n], memp[wr_ram_a_addra_tmp[14:5]][(index+3)+:1]);
      end // case: 32
    endcase // case(wa_width)
  end
endtask // task_wr_ram_a
    
    
task task_wr_ram_b;
  input [7:0] wr_ram_b_web_tmp;
  input [63:0] dib_tmp;
  input [7:0] dipb_tmp;
  input [15:0] wr_ram_b_addrb_tmp;
  begin
    case (wb_width)
      1, 2, 4 : begin
        if (wb_width >= width)
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[wb_width-1:0], 1'b0, mem[wr_ram_b_addrb_tmp[14:addrb_lbit_124]], junk1);
        else
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[wb_width-1:0], 1'b0, mem[wr_ram_b_addrb_tmp[14:addrb_bit_124+1]][(wr_ram_b_addrb_tmp[addrb_bit_124:addrb_lbit_124] * wb_width) +: wb_width_n], junk1);
      end
      8 : if (width >= 8) begin
        if (wb_width >= width)
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:3]], memp[wr_ram_b_addrb_tmp[14:3]]);
        else
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(wr_ram_b_addrb_tmp[addrb_bit_8:3] * wb_width) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_8+1]][(wr_ram_b_addrb_tmp[addrb_bit_8:3] * 1) +: 1]);
      end
      16 : if (width >= 16) begin
        if (wb_width >= width) begin
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:4]][width_0 +: width_n], memp[wr_ram_b_addrb_tmp[14:4]][(index)+:1]);
              task_ram (wr_ram_b_web_tmp[1], dib_tmp[15:8], dipb_tmp[1], mem[wr_ram_b_addrb_tmp[14:4]][width_1 +: width_n], memp[wr_ram_b_addrb_tmp[14:4]][(index+1)+:1]);
        end else begin
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][(wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) +: 1]);
              task_ram (wr_ram_b_web_tmp[1], dib_tmp[15:8], dipb_tmp[1], mem[wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((wr_ram_b_addrb_tmp[addrb_bit_16:4] * wb_width) + wb_width_1) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_16+1]][((wr_ram_b_addrb_tmp[addrb_bit_16:4] * 2) + 1) +: 1]);
        end
      end // case: 16
      32 : if (width >= 32) begin
        if (wb_width >= width) begin
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:5]][width_0 +: width_n], memp[wr_ram_b_addrb_tmp[14:5]][(index)+:1]);
          task_ram (wr_ram_b_web_tmp[1], dib_tmp[15:8], dipb_tmp[1], mem[wr_ram_b_addrb_tmp[14:5]][width_1 +: width_n], memp[wr_ram_b_addrb_tmp[14:5]][(index+1)+:1]);
          task_ram (wr_ram_b_web_tmp[2], dib_tmp[23:16], dipb_tmp[2], mem[wr_ram_b_addrb_tmp[14:5]][width_2 +: width_n], memp[wr_ram_b_addrb_tmp[14:5]][(index+2)+:1]);
          task_ram (wr_ram_b_web_tmp[3], dib_tmp[31:24], dipb_tmp[3], mem[wr_ram_b_addrb_tmp[14:5]][width_3 +: width_n], memp[wr_ram_b_addrb_tmp[14:5]][(index+3)+:1]);
        end else begin
          task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][(wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) +: 1]);
          task_ram (wr_ram_b_web_tmp[1], dib_tmp[15:8], dipb_tmp[1], mem[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_1) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 1) +: 1]);
          task_ram (wr_ram_b_web_tmp[2], dib_tmp[23:16], dipb_tmp[2], mem[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_2) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 2) +: 1]);
          task_ram (wr_ram_b_web_tmp[3], dib_tmp[31:24], dipb_tmp[3], mem[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * wb_width) + wb_width_3) +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:addrb_bit_32+1]][((wr_ram_b_addrb_tmp[addrb_bit_32:5] * 4) + 3) +: 1]);
        end // else: !if(wb_width >= width)
      end // case: 32
      64 : if (width >= 64) begin  // only valid with ECC single bit correction for 64 bits
        task_ram (wr_ram_b_web_tmp[0], dib_tmp[7:0], dipb_tmp[0], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_0 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index)+:1]);
        task_ram (wr_ram_b_web_tmp[1], dib_tmp[15:8], dipb_tmp[1], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_1 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+1)+:1]);
        task_ram (wr_ram_b_web_tmp[2], dib_tmp[23:16], dipb_tmp[2], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_2 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+2)+:1]);
        task_ram (wr_ram_b_web_tmp[3], dib_tmp[31:24], dipb_tmp[3], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_3 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+3)+:1]);
        task_ram (wr_ram_b_web_tmp[4], dib_tmp[39:32], dipb_tmp[4], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_4 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+4)+:1]);
        task_ram (wr_ram_b_web_tmp[5], dib_tmp[47:40], dipb_tmp[5], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_5 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+5)+:1]);
        task_ram (wr_ram_b_web_tmp[6], dib_tmp[55:48], dipb_tmp[6], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_6 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+6)+:1]);
        task_ram (wr_ram_b_web_tmp[7], dib_tmp[63:56], dipb_tmp[7], mem[wr_ram_b_addrb_tmp[14:6]][wb_width_7 +: wb_width_n], memp[wr_ram_b_addrb_tmp[14:6]][(index+7)+:1]);
      end // case: 64
      endcase // case(wb_width)
  end
endtask // task_wr_ram_b

    
task task_col_rd_ram_a;
  input [1:0] col_rd_ram_a_seq;   // 1 is bypass
  input [7:0] col_rd_ram_a_web_tmp;
  input [7:0] col_rd_ram_a_wea_tmp;
  input [15:0] col_rd_ram_a_addra_tmp;
  inout [63:0] col_rd_ram_a_doa_tmp;
  inout [7:0] col_rd_ram_a_dopa_tmp;
  reg [63:0] doa_ltmp;
  reg [7:0] dopa_ltmp;
   
  begin
    doa_ltmp= 64'b0;
    dopa_ltmp= 8'b0;
    case (ra_width)
      1, 2, 4 : begin
        if ((col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[0] !== 1'b1)) begin
          if (ra_width >= width)
            doa_ltmp = mem[col_rd_ram_a_addra_tmp[14:r_addra_lbit_124]];
          else
            doa_ltmp = mem[col_rd_ram_a_addra_tmp[14:r_addra_bit_124+1]][(col_rd_ram_a_addra_tmp[r_addra_bit_124:r_addra_lbit_124] * ra_width) +: ra_width];
            task_x_buf (wr_mode_a, 3, 0, 0, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);           
        end
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if ((col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[0] !== 1'b1)) begin
          if (ra_width >= width) begin
            doa_ltmp = mem[col_rd_ram_a_addra_tmp[14:3]];
            dopa_ltmp =  memp[col_rd_ram_a_addra_tmp[14:3]];
          end else begin
            doa_ltmp = mem[col_rd_ram_a_addra_tmp[14:r_addra_bit_8+1]][(col_rd_ram_a_addra_tmp[r_addra_bit_8:3] * ra_width) +: ra_width_n];
            dopa_ltmp = memp[col_rd_ram_a_addra_tmp[14:r_addra_bit_8+1]][(col_rd_ram_a_addra_tmp[r_addra_bit_8:3] * 1) +: 1];
          end
          task_x_buf (wr_mode_a, 7, 0, 0, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);           
        end
      end // case: 8
      16 : if (width >= 16) begin
        if ((col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[0] !== 1'b1)) begin
          if (ra_width >= width) begin
            doa_ltmp[7:0] = mem[col_rd_ram_a_addra_tmp[14:4]][width_0 +: width_n];
            dopa_ltmp[0:0] = memp[col_rd_ram_a_addra_tmp[14:4]][(index)+:1];
          end else begin
            doa_ltmp[7:0] = mem[col_rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][(col_rd_ram_a_addra_tmp[r_addra_bit_16:4] * ra_width) +: ra_width_n];
            dopa_ltmp[0:0] = memp[col_rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][(col_rd_ram_a_addra_tmp[r_addra_bit_16:4] * 2) +: 1];
          end
          task_x_buf (wr_mode_a, 7, 0, 0, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
        if ((col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[1] !== 1'b1)) begin
          if (ra_width >= width) begin
            doa_ltmp[15:8] = mem[col_rd_ram_a_addra_tmp[14:4]][width_1 +: width_n];
            dopa_ltmp[1:1] = memp[col_rd_ram_a_addra_tmp[14:4]][(index+1)+:1];
          end else begin
            doa_ltmp[15:8] = mem[col_rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][((col_rd_ram_a_addra_tmp[r_addra_bit_16:4] * ra_width) + ra_width_n) +: ra_width_n];
            dopa_ltmp[1:1] = memp[col_rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][((col_rd_ram_a_addra_tmp[r_addra_bit_16:4] * 2) + 1) +: 1];
          end
          task_x_buf (wr_mode_a, 15, 8, 1, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
      end
      32 : if (width >= 32) begin
        if (ra_width >= width) begin
          if ((col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[0] !== 1'b1)) begin
             doa_ltmp[7:0] = mem[col_rd_ram_a_addra_tmp[14:5]][width_0 +: width_n];
             dopa_ltmp[0:0] = memp[col_rd_ram_a_addra_tmp[14:5]][(index)+:1];
             task_x_buf (wr_mode_a, 7, 0, 0, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
          end

          if ((col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[1] !== 1'b1)) begin
             doa_ltmp[15:8] = mem[col_rd_ram_a_addra_tmp[14:5]][width_1 +: width_n];
             dopa_ltmp[1:1] = memp[col_rd_ram_a_addra_tmp[14:5]][(index+1)+:1];
             task_x_buf (wr_mode_a, 15, 8, 1, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
          end

          if ((col_rd_ram_a_web_tmp[2] === 1'b1 && col_rd_ram_a_wea_tmp[2] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[2] === 1'b1 && col_rd_ram_a_wea_tmp[2] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[2] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[2] !== 1'b1)) begin
             doa_ltmp[23:16] = mem[col_rd_ram_a_addra_tmp[14:5]][width_2 +: width_n];
             dopa_ltmp[2:2] = memp[col_rd_ram_a_addra_tmp[14:5]][(index+2)+:1];
             task_x_buf (wr_mode_a, 23, 16, 2, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
          end

          if ((col_rd_ram_a_web_tmp[3] === 1'b1 && col_rd_ram_a_wea_tmp[3] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[3] === 1'b1 && col_rd_ram_a_wea_tmp[3] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[3] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[3] !== 1'b1)) begin
             doa_ltmp[31:24] = mem[col_rd_ram_a_addra_tmp[14:5]][width_3 +: width_n];
             dopa_ltmp[3:3] = memp[col_rd_ram_a_addra_tmp[14:5]][(index+3)+:1];
             task_x_buf (wr_mode_a, 31, 24, 3, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
          end

        end // if (ra_width >= width)
      end
      64 : if (width >= 64) begin
        if ((col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1 && col_rd_ram_a_wea_tmp[0] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[0] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[0] !== 1'b1)) begin
              doa_ltmp[7:0] = mem[col_rd_ram_a_addra_tmp[14:6]][width_0 +: width_n];
              dopa_ltmp[0:0] = memp[col_rd_ram_a_addra_tmp[14:6]][(index)+:1];
              task_x_buf (wr_mode_a, 7, 0, 0, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
              
        if ((col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1 && col_rd_ram_a_wea_tmp[1] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[1] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[1] !== 1'b1)) begin
              doa_ltmp[15:8] = mem[col_rd_ram_a_addra_tmp[14:6]][width_1 +: width_n];
              dopa_ltmp[1:1] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+1)+:1];
              task_x_buf (wr_mode_a, 15, 8, 1, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
          
        if ((col_rd_ram_a_web_tmp[2] === 1'b1 && col_rd_ram_a_wea_tmp[2] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[2] === 1'b1 && col_rd_ram_a_wea_tmp[2] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[2] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[2] !== 1'b1)) begin
              doa_ltmp[23:16] = mem[col_rd_ram_a_addra_tmp[14:6]][width_2 +: width_n];
              dopa_ltmp[2:2] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+2)+:1];
              task_x_buf (wr_mode_a, 23, 16, 2, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
          
        if ((col_rd_ram_a_web_tmp[3] === 1'b1 && col_rd_ram_a_wea_tmp[3] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[3] === 1'b1 && col_rd_ram_a_wea_tmp[3] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[3] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[3] !== 1'b1)) begin
              doa_ltmp[31:24] = mem[col_rd_ram_a_addra_tmp[14:6]][width_3 +: width_n];
              dopa_ltmp[3:3] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+3)+:1];
              task_x_buf (wr_mode_a, 31, 24, 3, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end

        if ((col_rd_ram_a_web_tmp[4] === 1'b1 && col_rd_ram_a_wea_tmp[4] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[4] === 1'b1 && col_rd_ram_a_wea_tmp[4] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[4] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[4] !== 1'b1)) begin
              doa_ltmp[39:32] = mem[col_rd_ram_a_addra_tmp[14:6]][width_4 +: width_n];
              dopa_ltmp[4:4] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+4)+:1];
              task_x_buf (wr_mode_a, 39, 32, 4, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
              
        if ((col_rd_ram_a_web_tmp[5] === 1'b1 && col_rd_ram_a_wea_tmp[5] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[5] === 1'b1 && col_rd_ram_a_wea_tmp[5] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[5] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[5] !== 1'b1)) begin
              doa_ltmp[47:40] = mem[col_rd_ram_a_addra_tmp[14:6]][width_5 +: width_n];
              dopa_ltmp[5:5] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+5)+:1];
              task_x_buf (wr_mode_a, 47, 40, 5, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
          
        if ((col_rd_ram_a_web_tmp[6] === 1'b1 && col_rd_ram_a_wea_tmp[6] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[6] === 1'b1 && col_rd_ram_a_wea_tmp[6] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[6] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[6] !== 1'b1)) begin
              doa_ltmp[55:48] = mem[col_rd_ram_a_addra_tmp[14:6]][width_6 +: width_n];
              dopa_ltmp[6:6] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+6)+:1];
              task_x_buf (wr_mode_a, 55, 48, 6, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
          
        if ((col_rd_ram_a_web_tmp[7] === 1'b1 && col_rd_ram_a_wea_tmp[7] === 1'b1) || (col_rd_ram_a_seq == 2'b01 && col_rd_ram_a_web_tmp[7] === 1'b1 && col_rd_ram_a_wea_tmp[7] === 1'b0 && viol_type == 2'b10) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a != 2'b01 && wr_mode_b != 2'b01) || (col_rd_ram_a_seq == 2'b01 && wr_mode_a == 2'b01 && wr_mode_b != 2'b01 && col_rd_ram_a_web_tmp[7] === 1'b1) || (col_rd_ram_a_seq == 2'b11 && wr_mode_a == 2'b00 && col_rd_ram_a_web_tmp[7] !== 1'b1)) begin
              doa_ltmp[63:56] = mem[col_rd_ram_a_addra_tmp[14:6]][width_7 +: width_n];
              dopa_ltmp[7:7] = memp[col_rd_ram_a_addra_tmp[14:6]][(index+7)+:1];
              task_x_buf (wr_mode_a, 63, 56, 7, doa_ltmp, col_rd_ram_a_doa_tmp, dopa_ltmp, col_rd_ram_a_dopa_tmp);
        end
      end
    endcase // case(ra_width)
  end
endtask // task_col_rd_ram_a


task task_col_rd_ram_b;
  input [1:0] col_rd_ram_b_seq;   // 1 is bypass
  input [7:0] col_rd_ram_b_wea_tmp;
  input [7:0] col_rd_ram_b_web_tmp;
  input [15:0] col_rd_ram_b_addrb_tmp;
  inout [63:0] col_rd_ram_b_dob_tmp;
  inout [7:0] col_rd_ram_b_dopb_tmp;
  reg [63:0] col_rd_ram_b_dob_ltmp;
  reg [7:0] col_rd_ram_b_dopb_ltmp;
   
  begin
    col_rd_ram_b_dob_ltmp= 64'b0;
    col_rd_ram_b_dopb_ltmp= 8'b0;
       
    case (rb_width)
      1, 2, 4 : begin
        if ((col_rd_ram_b_web_tmp[0] === 1'b1 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1 && col_rd_ram_b_web_tmp[0] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[0] !== 1'b1)) begin
          if (rb_width >= width)
            col_rd_ram_b_dob_ltmp = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_lbit_124]];
          else
            col_rd_ram_b_dob_ltmp = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_124+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_124:r_addrb_lbit_124] * rb_width) +: rb_width_n];

          task_x_buf (wr_mode_b, 3, 0, 0, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
      end // case: 1, 2, 4
      8 : if (width >= 8) begin
        if ((col_rd_ram_b_web_tmp[0] === 1'b1 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1 && col_rd_ram_b_web_tmp[0] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[0] !== 1'b1)) begin
          if (rb_width >= width) begin
            col_rd_ram_b_dob_ltmp = mem[col_rd_ram_b_addrb_tmp[14:3]];
            col_rd_ram_b_dopb_ltmp =  memp[col_rd_ram_b_addrb_tmp[14:3]];
          end else begin
            col_rd_ram_b_dob_ltmp = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_8+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_8:3] * rb_width) +: rb_width_n];
            col_rd_ram_b_dopb_ltmp = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_8+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_8:3] * 1) +: 1];
          end
             
          task_x_buf (wr_mode_b, 7, 0, 0, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);

        end
      end // case: 8
      16 : if (width >= 16) begin
        if ((col_rd_ram_b_web_tmp[0] === 1'b1 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1 && col_rd_ram_b_web_tmp[0] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[0] !== 1'b1)) begin
          if (rb_width >= width) begin
             col_rd_ram_b_dob_ltmp[7:0] = mem[col_rd_ram_b_addrb_tmp[14:4]][width_0 +: width_n];
             col_rd_ram_b_dopb_ltmp[0:0] = memp[col_rd_ram_b_addrb_tmp[14:4]][(index)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[7:0] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * rb_width) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[0:0] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * 2) +: 1];
          end
              task_x_buf (wr_mode_b, 7, 0, 0, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
        if ((col_rd_ram_b_web_tmp[1] === 1'b1 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1 && col_rd_ram_b_web_tmp[1] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[1] !== 1'b1)) begin       

          if (rb_width >= width) begin
             col_rd_ram_b_dob_ltmp[15:8] = mem[col_rd_ram_b_addrb_tmp[14:4]][width_1 +: width_n];
             col_rd_ram_b_dopb_ltmp[1:1] = memp[col_rd_ram_b_addrb_tmp[14:4]][(index+1)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[15:8] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * rb_width) + rb_width_n) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[1:1] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * 2) + 1) +: 1];
          end
          task_x_buf (wr_mode_b, 15, 8, 1, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
      end
      32 : if (width >= 32) begin
        if ((col_rd_ram_b_web_tmp[0] === 1'b1 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1 && col_rd_ram_b_web_tmp[0] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[0] !== 1'b1)) begin
          if (rb_width >= width) begin
            col_rd_ram_b_dob_ltmp[7:0] = mem[col_rd_ram_b_addrb_tmp[14:5]][width_0 +: width_n];
            col_rd_ram_b_dopb_ltmp[0:0] = memp[col_rd_ram_b_addrb_tmp[14:5]][(index)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[7:0] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * rb_width) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[0:0] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][(col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * 4) +: 1];
          end
          task_x_buf (wr_mode_b, 7, 0, 0, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
        if ((col_rd_ram_b_web_tmp[1] === 1'b1 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1 && col_rd_ram_b_web_tmp[1] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[1] !== 1'b1)) begin          
          if (rb_width >= width) begin
             col_rd_ram_b_dob_ltmp[15:8] = mem[col_rd_ram_b_addrb_tmp[14:5]][width_1 +: width_n];
             col_rd_ram_b_dopb_ltmp[1:1] = memp[col_rd_ram_b_addrb_tmp[14:5]][(index+1)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[15:8] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * rb_width) + rb_width_1) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[1:1] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * 4) + 1) +: 1];
          end
           task_x_buf (wr_mode_b, 15, 8, 1, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
        if ((col_rd_ram_b_web_tmp[2] === 1'b1 && col_rd_ram_b_wea_tmp[2] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[2] === 1'b1 && col_rd_ram_b_web_tmp[2] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[2] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[2] !== 1'b1)) begin          
          if (rb_width >= width) begin
             col_rd_ram_b_dob_ltmp[23:16] = mem[col_rd_ram_b_addrb_tmp[14:5]][width_2 +: width_n];
             col_rd_ram_b_dopb_ltmp[2:2] = memp[col_rd_ram_b_addrb_tmp[14:5]][(index+2)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[23:16] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * rb_width) + rb_width_2) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[2:2] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * 4) + 2) +: 1];
          end
          task_x_buf (wr_mode_b, 23, 16, 2, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
        if ((col_rd_ram_b_web_tmp[3] === 1'b1 && col_rd_ram_b_wea_tmp[3] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[3] === 1'b1 && col_rd_ram_b_web_tmp[3] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[3] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[3] !== 1'b1)) begin          
          if (rb_width >= width) begin
             col_rd_ram_b_dob_ltmp[31:24] = mem[col_rd_ram_b_addrb_tmp[14:5]][width_3 +: width_n];
             col_rd_ram_b_dopb_ltmp[3:3] = memp[col_rd_ram_b_addrb_tmp[14:5]][(index+3)+:1];
          end else begin
             col_rd_ram_b_dob_ltmp[31:24] = mem[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * rb_width) + rb_width_3) +: rb_width_n];
             col_rd_ram_b_dopb_ltmp[3:3] = memp[col_rd_ram_b_addrb_tmp[14:r_addrb_bit_32+1]][((col_rd_ram_b_addrb_tmp[r_addrb_bit_32:5] * 4) + 3) +: 1];
          end
          task_x_buf (wr_mode_b, 31, 24, 3, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);          
        end
      end
      64 : if (width >= 64) begin
        if ((col_rd_ram_b_web_tmp[0] === 1'b1 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1 && col_rd_ram_b_web_tmp[0] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[0] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[0] !== 1'b1)) begin
              col_rd_ram_b_dob_ltmp[7:0] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_0 +: width_n];
              col_rd_ram_b_dopb_ltmp[0:0] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index)+:1];
              task_x_buf (wr_mode_b, 7, 0, 0, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
              
        if ((col_rd_ram_b_web_tmp[1] === 1'b1 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1 && col_rd_ram_b_web_tmp[1] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[1] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[1] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[15:8] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_1 +: width_n];
              col_rd_ram_b_dopb_ltmp[1:1] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+1)+:1];
              task_x_buf (wr_mode_b, 15, 8, 1, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
          
        if ((col_rd_ram_b_web_tmp[2] === 1'b1 && col_rd_ram_b_wea_tmp[2] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[2] === 1'b1 && col_rd_ram_b_web_tmp[2] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[2] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[2] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[23:16] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_2 +: width_n];
              col_rd_ram_b_dopb_ltmp[2:2] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+2)+:1];
              task_x_buf (wr_mode_b, 23, 16, 2, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
          
        if ((col_rd_ram_b_web_tmp[3] === 1'b1 && col_rd_ram_b_wea_tmp[3] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[3] === 1'b1 && col_rd_ram_b_web_tmp[3] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[3] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[3] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[31:24] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_3 +: width_n];
              col_rd_ram_b_dopb_ltmp[3:3] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+3)+:1];
              task_x_buf (wr_mode_b, 31, 24, 3, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end

        if ((col_rd_ram_b_web_tmp[4] === 1'b1 && col_rd_ram_b_wea_tmp[4] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[4] === 1'b1 && col_rd_ram_b_web_tmp[4] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[4] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[4] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[39:32] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_4 +: width_n];
              col_rd_ram_b_dopb_ltmp[4:4] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+4)+:1];
              task_x_buf (wr_mode_b, 39, 32, 4, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
              
        if ((col_rd_ram_b_web_tmp[5] === 1'b1 && col_rd_ram_b_wea_tmp[5] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[5] === 1'b1 && col_rd_ram_b_web_tmp[5] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[5] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[5] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[47:40] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_5 +: width_n];
              col_rd_ram_b_dopb_ltmp[5:5] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+5)+:1];
              task_x_buf (wr_mode_b, 47, 40, 5, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
          
        if ((col_rd_ram_b_web_tmp[6] === 1'b1 && col_rd_ram_b_wea_tmp[6] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[6] === 1'b1 && col_rd_ram_b_web_tmp[6] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[6] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[6] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[55:48] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_6 +: width_n];
              col_rd_ram_b_dopb_ltmp[6:6] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+6)+:1];
              task_x_buf (wr_mode_b, 55, 48, 6, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end
          
        if ((col_rd_ram_b_web_tmp[7] === 1'b1 && col_rd_ram_b_wea_tmp[7] === 1'b1) || (col_rd_ram_b_seq == 2'b01 && col_rd_ram_b_wea_tmp[7] === 1'b1 && col_rd_ram_b_web_tmp[7] === 1'b0 && viol_type == 2'b11) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b != 2'b01 && wr_mode_a != 2'b01) || (col_rd_ram_b_seq == 2'b01 && wr_mode_b == 2'b01 && wr_mode_a != 2'b01 && col_rd_ram_b_wea_tmp[7] === 1'b1) || (col_rd_ram_b_seq == 2'b11 && wr_mode_b == 2'b00 && col_rd_ram_b_wea_tmp[7] !== 1'b1)) begin          
              col_rd_ram_b_dob_ltmp[63:56] = mem[col_rd_ram_b_addrb_tmp[14:6]][width_7 +: width_n];
              col_rd_ram_b_dopb_ltmp[7:7] = memp[col_rd_ram_b_addrb_tmp[14:6]][(index+7)+:1];
              task_x_buf (wr_mode_b, 63, 56, 7, col_rd_ram_b_dob_ltmp, col_rd_ram_b_dob_tmp, col_rd_ram_b_dopb_ltmp, col_rd_ram_b_dopb_tmp);
        end

      end
    endcase // case(rb_width)
  end
endtask // task_col_rd_ram_b


    task task_rd_ram_a;

   input [15:0] rd_ram_a_addra_tmp;
   inout [63:0] doa_tmp;
   inout [7:0] dopa_tmp;

   begin

       case (ra_width)
      1, 2, 4 : begin
                    if (ra_width >= width)
              doa_tmp = mem[rd_ram_a_addra_tmp[14:r_addra_lbit_124]];

               else
              doa_tmp = mem[rd_ram_a_addra_tmp[14:r_addra_bit_124+1]][(rd_ram_a_addra_tmp[r_addra_bit_124:r_addra_lbit_124] * ra_width) +: ra_width];
                end
      8 : begin
              if (ra_width >= width) begin
             doa_tmp = mem[rd_ram_a_addra_tmp[14:3]];
             dopa_tmp =  memp[rd_ram_a_addra_tmp[14:3]];
         end
         else begin
             doa_tmp = mem[rd_ram_a_addra_tmp[14:r_addra_bit_8+1]][(rd_ram_a_addra_tmp[r_addra_bit_8:3] * ra_width) +: ra_width];
             dopa_tmp = memp[rd_ram_a_addra_tmp[14:r_addra_bit_8+1]][(rd_ram_a_addra_tmp[r_addra_bit_8:3] * ra_widthp) +: ra_widthp];
         end
          end
      16 : begin
               if (ra_width >= width) begin
              doa_tmp = mem[rd_ram_a_addra_tmp[14:4]];
              dopa_tmp = memp[rd_ram_a_addra_tmp[14:4]];
          end 
          else begin
              doa_tmp = mem[rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][(rd_ram_a_addra_tmp[r_addra_bit_16:4] * ra_width) +: ra_width];
              dopa_tmp = memp[rd_ram_a_addra_tmp[14:r_addra_bit_16+1]][(rd_ram_a_addra_tmp[r_addra_bit_16:4] * ra_widthp) +: ra_widthp];
          end
           end
      32 : begin
               if (ra_width >= width) begin
              doa_tmp = mem[rd_ram_a_addra_tmp[14:5]];
              dopa_tmp = memp[rd_ram_a_addra_tmp[14:5]];
          end 
          else begin
              doa_tmp = mem[rd_ram_a_addra_tmp[14:r_addra_bit_32+1]][(rd_ram_a_addra_tmp[r_addra_bit_32:5] * ra_width) +: ra_width];
              dopa_tmp = memp[rd_ram_a_addra_tmp[14:r_addra_bit_32+1]][(rd_ram_a_addra_tmp[r_addra_bit_32:5] * ra_widthp) +: ra_widthp];
          end
           end
      64 : begin
               if (ra_width >= width) begin
              doa_tmp = mem[rd_ram_a_addra_tmp[14:6]];
              dopa_tmp = memp[rd_ram_a_addra_tmp[14:6]];
          end 
           end             
       endcase // case(ra_width)

   end
    endtask // task_rd_ram_a
    

    task task_rd_ram_b;

   input [15:0] rd_ram_b_addrb_tmp;
   inout [31:0] dob_tmp;
   inout [3:0] dopb_tmp;

   begin
       
       case (rb_width)
      1, 2, 4 : begin
                    if (rb_width >= width)
              dob_tmp = mem[rd_ram_b_addrb_tmp[14:r_addrb_lbit_124]];
               else
              dob_tmp = mem[rd_ram_b_addrb_tmp[14:r_addrb_bit_124+1]][(rd_ram_b_addrb_tmp[r_addrb_bit_124:r_addrb_lbit_124] * rb_width) +: rb_width];
                            end
      8 : begin
              if (rb_width >= width) begin
             dob_tmp = mem[rd_ram_b_addrb_tmp[14:3]];
             dopb_tmp =  memp[rd_ram_b_addrb_tmp[14:3]];
         end
         else begin
             dob_tmp = mem[rd_ram_b_addrb_tmp[14:r_addrb_bit_8+1]][(rd_ram_b_addrb_tmp[r_addrb_bit_8:3] * 8) +: 8];
             dopb_tmp = memp[rd_ram_b_addrb_tmp[14:r_addrb_bit_8+1]][(rd_ram_b_addrb_tmp[r_addrb_bit_8:3] * 1) +: 1];
         end
          end
      16 : begin
               if (rb_width >= width) begin
              dob_tmp = mem[rd_ram_b_addrb_tmp[14:4]];
              dopb_tmp = memp[rd_ram_b_addrb_tmp[14:4]];
          end 
          else begin
              dob_tmp = mem[rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][(rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * 16) +: 16];
              dopb_tmp = memp[rd_ram_b_addrb_tmp[14:r_addrb_bit_16+1]][(rd_ram_b_addrb_tmp[r_addrb_bit_16:4] * 2) +: 2];
          end
            end
      32 : begin
               dob_tmp = mem[rd_ram_b_addrb_tmp[14:5]];
               dopb_tmp = memp[rd_ram_b_addrb_tmp[14:5]];
           end
      64 : begin
           if (rb_width >= width) begin
              dob_tmp = mem[rd_ram_b_addrb_tmp[14:6]];
              dopb_tmp = memp[rd_ram_b_addrb_tmp[14:6]];
          end 
           end
       endcase
   end
    endtask // task_rd_ram_b    


    task chk_for_col_msg;

   input wea_tmp;
   input web_tmp;
   input [15:0] addra_tmp;
   input [15:0] addrb_tmp;
   
   begin

       if (SIM_COLLISION_CHECK == "ALL" || SIM_COLLISION_CHECK == "WARNING_ONLY")
      
      if (wea_tmp === 1'b1 && web_tmp === 1'b1 && col_wr_wr_msg == 1) begin

          if (chk_ox_msg == 1) begin

         if (!(rdaddr_collision_hwconfig_int == 0 && chk_ox_same_clk == 1))
             $display("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA write was requested to the overlapped address simultaneously at both port A and port B of the RAM. The contents written to the RAM at address location %h (hex) of port A and address location %h (hex) of port B are unknown.", $time/1000.0, addra_tmp, addrb_tmp);

         
          end
          else
         $display("Memory Collision Error on RAMB18E1 : %m at simulation time %.3f ns.\nA write was requested to the same address simultaneously at both port A and port B of the RAM. The contents written to the RAM at address location %h (hex) of port A and address location %h (hex) of port B are unknown.", $time/1000.0, addra_tmp, addrb_tmp);
          
          col_wr_wr_msg = 0;

      end // if (wea_tmp === 1'b1 && web_tmp === 1'b1 && col_wr_wr_msg == 1)
      else if (wea_tmp === 1'b1 && web_tmp === 1'b0 && col_wra_rdb_msg == 1) begin

          if (chk_ox_msg == 1) begin
         
         if (!(rdaddr_collision_hwconfig_int == 0 && chk_ox_same_clk == 1))
             $display("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port B while a write was requested to the overlapped address %h (hex) of port A.  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.", $time/1000.0, addrb_tmp, addra_tmp);   
         
          end
          else begin
         
         if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (!(chk_col_same_clk == 1 && rdaddr_collision_hwconfig_int == 0) && SIM_DEVICE == "VIRTEX6"))
               $display("Memory Collision Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port B while a write was requested to the same address on port A.  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.", $time/1000.0, addrb_tmp);
         else if (wr_mode_a != 2'b01 || (viol_type == 2'b11 && wr_mode_a == 2'b01))
             $display("Memory Collision Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port B while a write was requested to the same address on port A.  The write will be successful however the read value on port B is unknown until the next CLKB cycle.", $time/1000.0, addrb_tmp);

          end // else: !if(chk_ox_msg == 1)
          
          col_wra_rdb_msg = 0;

      end
      else if (wea_tmp === 1'b0 && web_tmp === 1'b1 && col_wrb_rda_msg == 1) begin

          if (chk_ox_msg == 1) begin
            
         if (!(rdaddr_collision_hwconfig_int == 0 && chk_ox_same_clk == 1))
             $display("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port A while a write was requested to the overlapped address %h (hex) of port B.  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.", $time/1000.0, addra_tmp, addrb_tmp);

          end
          else begin
         
         if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (!(chk_col_same_clk == 1 && rdaddr_collision_hwconfig_int == 0) && SIM_DEVICE == "VIRTEX6"))
               $display("Memory Collision Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port A while a write was requested to the same address on port B.  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.", $time/1000.0, addrb_tmp);
         else if (wr_mode_b != 2'b01 || (viol_type == 2'b10 && wr_mode_b == 2'b01))
                 $display("Memory Collision Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read was performed on address %h (hex) of port A while a write was requested to the same address on port B.  The write will be successful however the read value on port A is unknown until the next CLKA cycle.", $time/1000.0, addra_tmp);
         
          end // else: !if(chk_ox_msg == 1)
         
          col_wrb_rda_msg = 0;

      end // if (wea_tmp === 1'b0 && web_tmp === 1'b1 && col_wrb_rda_msg == 1)
       
   end

    endtask // chk_for_col_msg


    task task_col_ecc_read;

    inout [63:0] do_tmp;
    inout [7:0] dop_tmp;
    input [15:0] addr_tmp;
   
    reg [71:0] task_ecc_bit_position;
    reg [7:0] task_dopr_ecc, task_syndrome;
    reg [63:0] task_di_in_ecc_corrected;
    reg [7:0] task_dip_in_ecc_corrected;
    
    begin

   if (|do_tmp === 1'bx) begin // if there is collision
       dbiterr_out <= 1'bx;
       sbiterr_out <= 1'bx;
   end
   else begin
       
       task_dopr_ecc = fn_dip_ecc(1'b0, do_tmp, dop_tmp);
       
       task_syndrome = task_dopr_ecc ^ dop_tmp;
       
       if (task_syndrome !== 0) begin
      
      if (task_syndrome[7]) begin  // dectect single bit error
          
          task_ecc_bit_position = {do_tmp[63:57], dop_tmp[6], do_tmp[56:26], dop_tmp[5], do_tmp[25:11], dop_tmp[4], do_tmp[10:4], dop_tmp[3], do_tmp[3:1], dop_tmp[2], do_tmp[0], dop_tmp[1:0], dop_tmp[7]};
          
          
          if (task_syndrome[6:0] > 71) begin
         $display ("DRC Error : Simulation halted due Corrupted DIP. To correct this problem, make sure that reliable data is fed to the DIP. The correct Parity must be generated by a Hamming code encoder or encoder in the Block RAM. The output from the model is unreliable if there are more than 2 bit errors. The model doesn't warn if there is sporadic input of more than 2 bit errors due to the limitation in Hamming code.");
         $finish;
          end
          
          task_ecc_bit_position[task_syndrome[6:0]] = ~task_ecc_bit_position[task_syndrome[6:0]]; // correct single bit error in the output 
          
          task_di_in_ecc_corrected = {task_ecc_bit_position[71:65], task_ecc_bit_position[63:33], task_ecc_bit_position[31:17], task_ecc_bit_position[15:9], task_ecc_bit_position[7:5], task_ecc_bit_position[3]}; // correct single bit error in the memory
          
          do_tmp = task_di_in_ecc_corrected;
          
          task_dip_in_ecc_corrected = {task_ecc_bit_position[0], task_ecc_bit_position[64], task_ecc_bit_position[32], task_ecc_bit_position[16], task_ecc_bit_position[8], task_ecc_bit_position[4], task_ecc_bit_position[2:1]}; // correct single bit error in the parity memory
          
          dop_tmp = task_dip_in_ecc_corrected;
          
          dbiterr_out <= 0;
          sbiterr_out <= 1;
          
      end
      else if (!task_syndrome[7]) begin  // double bit error
          sbiterr_out <= 0;
          dbiterr_out <= 1;
          
      end
       end // if (task_syndrome !== 0)
       else begin
      dbiterr_out <= 0;
      sbiterr_out <= 0;
      
       end // else: !if(task_syndrome !== 0)
     
   end
  
    end
   
    endtask // task_col_ecc_read
    
    
    function [7:0] fn_dip_ecc;

   input encode;
   input [63:0] di_in;
   input [7:0] dip_in;

   begin

       fn_dip_ecc[0] = di_in[0]^di_in[1]^di_in[3]^di_in[4]^di_in[6]^di_in[8]
           ^di_in[10]^di_in[11]^di_in[13]^di_in[15]^di_in[17]^di_in[19]
           ^di_in[21]^di_in[23]^di_in[25]^di_in[26]^di_in[28]
                    ^di_in[30]^di_in[32]^di_in[34]^di_in[36]^di_in[38]
           ^di_in[40]^di_in[42]^di_in[44]^di_in[46]^di_in[48]
           ^di_in[50]^di_in[52]^di_in[54]^di_in[56]^di_in[57]^di_in[59]
           ^di_in[61]^di_in[63];

       fn_dip_ecc[1] = di_in[0]^di_in[2]^di_in[3]^di_in[5]^di_in[6]^di_in[9]
                     ^di_in[10]^di_in[12]^di_in[13]^di_in[16]^di_in[17]
                     ^di_in[20]^di_in[21]^di_in[24]^di_in[25]^di_in[27]^di_in[28]
                     ^di_in[31]^di_in[32]^di_in[35]^di_in[36]^di_in[39]
                     ^di_in[40]^di_in[43]^di_in[44]^di_in[47]^di_in[48]
                     ^di_in[51]^di_in[52]^di_in[55]^di_in[56]^di_in[58]^di_in[59]
                     ^di_in[62]^di_in[63];

       fn_dip_ecc[2] = di_in[1]^di_in[2]^di_in[3]^di_in[7]^di_in[8]^di_in[9]
                     ^di_in[10]^di_in[14]^di_in[15]^di_in[16]^di_in[17]
                     ^di_in[22]^di_in[23]^di_in[24]^di_in[25]^di_in[29]
                     ^di_in[30]^di_in[31]^di_in[32]^di_in[37]^di_in[38]^di_in[39]
                     ^di_in[40]^di_in[45]^di_in[46]^di_in[47]^di_in[48]
                     ^di_in[53]^di_in[54]^di_in[55]^di_in[56]
                     ^di_in[60]^di_in[61]^di_in[62]^di_in[63];
   
       fn_dip_ecc[3] = di_in[4]^di_in[5]^di_in[6]^di_in[7]^di_in[8]^di_in[9]
           ^di_in[10]^di_in[18]^di_in[19]
                     ^di_in[20]^di_in[21]^di_in[22]^di_in[23]^di_in[24]^di_in[25]
                     ^di_in[33]^di_in[34]^di_in[35]^di_in[36]^di_in[37]^di_in[38]^di_in[39]
                     ^di_in[40]^di_in[49]
                     ^di_in[50]^di_in[51]^di_in[52]^di_in[53]^di_in[54]^di_in[55]^di_in[56];

       fn_dip_ecc[4] = di_in[11]^di_in[12]^di_in[13]^di_in[14]^di_in[15]^di_in[16]^di_in[17]^di_in[18]^di_in[19]
                     ^di_in[20]^di_in[21]^di_in[22]^di_in[23]^di_in[24]^di_in[25]
                     ^di_in[41]^di_in[42]^di_in[43]^di_in[44]^di_in[45]^di_in[46]^di_in[47]^di_in[48]^di_in[49]
                     ^di_in[50]^di_in[51]^di_in[52]^di_in[53]^di_in[54]^di_in[55]^di_in[56];


       fn_dip_ecc[5] = di_in[26]^di_in[27]^di_in[28]^di_in[29]
                     ^di_in[30]^di_in[31]^di_in[32]^di_in[33]^di_in[34]^di_in[35]^di_in[36]^di_in[37]^di_in[38]^di_in[39]
                     ^di_in[40]^di_in[41]^di_in[42]^di_in[43]^di_in[44]^di_in[45]^di_in[46]^di_in[47]^di_in[48]^di_in[49]
                     ^di_in[50]^di_in[51]^di_in[52]^di_in[53]^di_in[54]^di_in[55]^di_in[56];

       fn_dip_ecc[6] = di_in[57]^di_in[58]^di_in[59]
                     ^di_in[60]^di_in[61]^di_in[62]^di_in[63];

       if (encode == 1'b1)
      
      fn_dip_ecc[7] = fn_dip_ecc[0]^fn_dip_ecc[1]^fn_dip_ecc[2]^fn_dip_ecc[3]^fn_dip_ecc[4]^fn_dip_ecc[5]^fn_dip_ecc[6]
                     ^di_in[0]^di_in[1]^di_in[2]^di_in[3]^di_in[4]^di_in[5]^di_in[6]^di_in[7]^di_in[8]^di_in[9]
                     ^di_in[10]^di_in[11]^di_in[12]^di_in[13]^di_in[14]^di_in[15]^di_in[16]^di_in[17]^di_in[18]^di_in[19]
                     ^di_in[20]^di_in[21]^di_in[22]^di_in[23]^di_in[24]^di_in[25]^di_in[26]^di_in[27]^di_in[28]^di_in[29]
                     ^di_in[30]^di_in[31]^di_in[32]^di_in[33]^di_in[34]^di_in[35]^di_in[36]^di_in[37]^di_in[38]^di_in[39]
                     ^di_in[40]^di_in[41]^di_in[42]^di_in[43]^di_in[44]^di_in[45]^di_in[46]^di_in[47]^di_in[48]^di_in[49]
                     ^di_in[50]^di_in[51]^di_in[52]^di_in[53]^di_in[54]^di_in[55]^di_in[56]^di_in[57]^di_in[58]^di_in[59]
                     ^di_in[60]^di_in[61]^di_in[62]^di_in[63];
       else
      fn_dip_ecc[7] = dip_in[0]^dip_in[1]^dip_in[2]^dip_in[3]^dip_in[4]^dip_in[5]^dip_in[6]
                     ^di_in[0]^di_in[1]^di_in[2]^di_in[3]^di_in[4]^di_in[5]^di_in[6]^di_in[7]^di_in[8]^di_in[9]
                     ^di_in[10]^di_in[11]^di_in[12]^di_in[13]^di_in[14]^di_in[15]^di_in[16]^di_in[17]^di_in[18]^di_in[19]
                     ^di_in[20]^di_in[21]^di_in[22]^di_in[23]^di_in[24]^di_in[25]^di_in[26]^di_in[27]^di_in[28]^di_in[29]
                     ^di_in[30]^di_in[31]^di_in[32]^di_in[33]^di_in[34]^di_in[35]^di_in[36]^di_in[37]^di_in[38]^di_in[39]
                     ^di_in[40]^di_in[41]^di_in[42]^di_in[43]^di_in[44]^di_in[45]^di_in[46]^di_in[47]^di_in[48]^di_in[49]
                     ^di_in[50]^di_in[51]^di_in[52]^di_in[53]^di_in[54]^di_in[55]^di_in[56]^di_in[57]^di_in[58]^di_in[59]
                     ^di_in[60]^di_in[61]^di_in[62]^di_in[63];
       
   end
   
    endfunction // fn_dip_ecc

/******************************************** END task and function **************************************/    

    
    initial begin
   if (INIT_FILE == "NONE") begin // memory initialization from attributes
   
       init_mult = 256/width;
       
       for (count = 0; count < init_mult; count = count + 1) begin

      init_offset = count * width;
      
      mem[count] = INIT_00[init_offset +:width];
      mem[count + (init_mult * 1)] = INIT_01[init_offset +:width];
      mem[count + (init_mult * 2)] = INIT_02[init_offset +:width];
      mem[count + (init_mult * 3)] = INIT_03[init_offset +:width];
      mem[count + (init_mult * 4)] = INIT_04[init_offset +:width];
      mem[count + (init_mult * 5)] = INIT_05[init_offset +:width];
      mem[count + (init_mult * 6)] = INIT_06[init_offset +:width];
      mem[count + (init_mult * 7)] = INIT_07[init_offset +:width];
      mem[count + (init_mult * 8)] = INIT_08[init_offset +:width];
      mem[count + (init_mult * 9)] = INIT_09[init_offset +:width];
      mem[count + (init_mult * 10)] = INIT_0A[init_offset +:width];
      mem[count + (init_mult * 11)] = INIT_0B[init_offset +:width];
      mem[count + (init_mult * 12)] = INIT_0C[init_offset +:width];
      mem[count + (init_mult * 13)] = INIT_0D[init_offset +:width];
      mem[count + (init_mult * 14)] = INIT_0E[init_offset +:width];
      mem[count + (init_mult * 15)] = INIT_0F[init_offset +:width];
      mem[count + (init_mult * 16)] = INIT_10[init_offset +:width];
      mem[count + (init_mult * 17)] = INIT_11[init_offset +:width];
      mem[count + (init_mult * 18)] = INIT_12[init_offset +:width];
      mem[count + (init_mult * 19)] = INIT_13[init_offset +:width];
      mem[count + (init_mult * 20)] = INIT_14[init_offset +:width];
      mem[count + (init_mult * 21)] = INIT_15[init_offset +:width];
      mem[count + (init_mult * 22)] = INIT_16[init_offset +:width];
      mem[count + (init_mult * 23)] = INIT_17[init_offset +:width];
      mem[count + (init_mult * 24)] = INIT_18[init_offset +:width];
      mem[count + (init_mult * 25)] = INIT_19[init_offset +:width];
      mem[count + (init_mult * 26)] = INIT_1A[init_offset +:width];
      mem[count + (init_mult * 27)] = INIT_1B[init_offset +:width];
      mem[count + (init_mult * 28)] = INIT_1C[init_offset +:width];
      mem[count + (init_mult * 29)] = INIT_1D[init_offset +:width];
      mem[count + (init_mult * 30)] = INIT_1E[init_offset +:width];
      mem[count + (init_mult * 31)] = INIT_1F[init_offset +:width];
      mem[count + (init_mult * 32)] = INIT_20[init_offset +:width];
      mem[count + (init_mult * 33)] = INIT_21[init_offset +:width];
      mem[count + (init_mult * 34)] = INIT_22[init_offset +:width];
      mem[count + (init_mult * 35)] = INIT_23[init_offset +:width];
      mem[count + (init_mult * 36)] = INIT_24[init_offset +:width];
      mem[count + (init_mult * 37)] = INIT_25[init_offset +:width];
      mem[count + (init_mult * 38)] = INIT_26[init_offset +:width];
      mem[count + (init_mult * 39)] = INIT_27[init_offset +:width];
      mem[count + (init_mult * 40)] = INIT_28[init_offset +:width];
      mem[count + (init_mult * 41)] = INIT_29[init_offset +:width];
      mem[count + (init_mult * 42)] = INIT_2A[init_offset +:width];
      mem[count + (init_mult * 43)] = INIT_2B[init_offset +:width];
      mem[count + (init_mult * 44)] = INIT_2C[init_offset +:width];
      mem[count + (init_mult * 45)] = INIT_2D[init_offset +:width];
      mem[count + (init_mult * 46)] = INIT_2E[init_offset +:width];
      mem[count + (init_mult * 47)] = INIT_2F[init_offset +:width];
      mem[count + (init_mult * 48)] = INIT_30[init_offset +:width];
      mem[count + (init_mult * 49)] = INIT_31[init_offset +:width];
      mem[count + (init_mult * 50)] = INIT_32[init_offset +:width];
      mem[count + (init_mult * 51)] = INIT_33[init_offset +:width];
      mem[count + (init_mult * 52)] = INIT_34[init_offset +:width];
      mem[count + (init_mult * 53)] = INIT_35[init_offset +:width];
      mem[count + (init_mult * 54)] = INIT_36[init_offset +:width];
      mem[count + (init_mult * 55)] = INIT_37[init_offset +:width];
      mem[count + (init_mult * 56)] = INIT_38[init_offset +:width];
      mem[count + (init_mult * 57)] = INIT_39[init_offset +:width];
      mem[count + (init_mult * 58)] = INIT_3A[init_offset +:width];
      mem[count + (init_mult * 59)] = INIT_3B[init_offset +:width];
      mem[count + (init_mult * 60)] = INIT_3C[init_offset +:width];
      mem[count + (init_mult * 61)] = INIT_3D[init_offset +:width];
      mem[count + (init_mult * 62)] = INIT_3E[init_offset +:width];
      mem[count + (init_mult * 63)] = INIT_3F[init_offset +:width];

      if (BRAM_SIZE == 36) begin
          mem[count + (init_mult * 64)] = INIT_40[init_offset +:width];
          mem[count + (init_mult * 65)] = INIT_41[init_offset +:width];
          mem[count + (init_mult * 66)] = INIT_42[init_offset +:width];
          mem[count + (init_mult * 67)] = INIT_43[init_offset +:width];
          mem[count + (init_mult * 68)] = INIT_44[init_offset +:width];
          mem[count + (init_mult * 69)] = INIT_45[init_offset +:width];
          mem[count + (init_mult * 70)] = INIT_46[init_offset +:width];
          mem[count + (init_mult * 71)] = INIT_47[init_offset +:width];
          mem[count + (init_mult * 72)] = INIT_48[init_offset +:width];
          mem[count + (init_mult * 73)] = INIT_49[init_offset +:width];
          mem[count + (init_mult * 74)] = INIT_4A[init_offset +:width];
          mem[count + (init_mult * 75)] = INIT_4B[init_offset +:width];
          mem[count + (init_mult * 76)] = INIT_4C[init_offset +:width];
          mem[count + (init_mult * 77)] = INIT_4D[init_offset +:width];
          mem[count + (init_mult * 78)] = INIT_4E[init_offset +:width];
          mem[count + (init_mult * 79)] = INIT_4F[init_offset +:width];
          mem[count + (init_mult * 80)] = INIT_50[init_offset +:width];
          mem[count + (init_mult * 81)] = INIT_51[init_offset +:width];
          mem[count + (init_mult * 82)] = INIT_52[init_offset +:width];
          mem[count + (init_mult * 83)] = INIT_53[init_offset +:width];
          mem[count + (init_mult * 84)] = INIT_54[init_offset +:width];
          mem[count + (init_mult * 85)] = INIT_55[init_offset +:width];
          mem[count + (init_mult * 86)] = INIT_56[init_offset +:width];
          mem[count + (init_mult * 87)] = INIT_57[init_offset +:width];
          mem[count + (init_mult * 88)] = INIT_58[init_offset +:width];
          mem[count + (init_mult * 89)] = INIT_59[init_offset +:width];
          mem[count + (init_mult * 90)] = INIT_5A[init_offset +:width];
          mem[count + (init_mult * 91)] = INIT_5B[init_offset +:width];
          mem[count + (init_mult * 92)] = INIT_5C[init_offset +:width];
          mem[count + (init_mult * 93)] = INIT_5D[init_offset +:width];
          mem[count + (init_mult * 94)] = INIT_5E[init_offset +:width];
          mem[count + (init_mult * 95)] = INIT_5F[init_offset +:width];
          mem[count + (init_mult * 96)] = INIT_60[init_offset +:width];
          mem[count + (init_mult * 97)] = INIT_61[init_offset +:width];
          mem[count + (init_mult * 98)] = INIT_62[init_offset +:width];
          mem[count + (init_mult * 99)] = INIT_63[init_offset +:width];
          mem[count + (init_mult * 100)] = INIT_64[init_offset +:width];
          mem[count + (init_mult * 101)] = INIT_65[init_offset +:width];
          mem[count + (init_mult * 102)] = INIT_66[init_offset +:width];
          mem[count + (init_mult * 103)] = INIT_67[init_offset +:width];
          mem[count + (init_mult * 104)] = INIT_68[init_offset +:width];
          mem[count + (init_mult * 105)] = INIT_69[init_offset +:width];
          mem[count + (init_mult * 106)] = INIT_6A[init_offset +:width];
          mem[count + (init_mult * 107)] = INIT_6B[init_offset +:width];
          mem[count + (init_mult * 108)] = INIT_6C[init_offset +:width];
          mem[count + (init_mult * 109)] = INIT_6D[init_offset +:width];
          mem[count + (init_mult * 110)] = INIT_6E[init_offset +:width];
          mem[count + (init_mult * 111)] = INIT_6F[init_offset +:width];
          mem[count + (init_mult * 112)] = INIT_70[init_offset +:width];
          mem[count + (init_mult * 113)] = INIT_71[init_offset +:width];
          mem[count + (init_mult * 114)] = INIT_72[init_offset +:width];
          mem[count + (init_mult * 115)] = INIT_73[init_offset +:width];
          mem[count + (init_mult * 116)] = INIT_74[init_offset +:width];
          mem[count + (init_mult * 117)] = INIT_75[init_offset +:width];
          mem[count + (init_mult * 118)] = INIT_76[init_offset +:width];
          mem[count + (init_mult * 119)] = INIT_77[init_offset +:width];
          mem[count + (init_mult * 120)] = INIT_78[init_offset +:width];
          mem[count + (init_mult * 121)] = INIT_79[init_offset +:width];
          mem[count + (init_mult * 122)] = INIT_7A[init_offset +:width];
          mem[count + (init_mult * 123)] = INIT_7B[init_offset +:width];
          mem[count + (init_mult * 124)] = INIT_7C[init_offset +:width];
          mem[count + (init_mult * 125)] = INIT_7D[init_offset +:width];
          mem[count + (init_mult * 126)] = INIT_7E[init_offset +:width];
          mem[count + (init_mult * 127)] = INIT_7F[init_offset +:width];
      end // if (BRAM_SIZE == 36)
       end // for (count = 0; count < init_mult; count = count + 1)
       
      
       
       if (width >= 8) begin
          
      initp_mult = 256/widthp;
      
      for (countp = 0; countp < initp_mult; countp = countp + 1) begin

          initp_offset = countp * widthp;

          memp[countp]                    = INITP_00[initp_offset +:widthp];
          memp[countp + (initp_mult * 1)] = INITP_01[initp_offset +:widthp];
          memp[countp + (initp_mult * 2)] = INITP_02[initp_offset +:widthp];
          memp[countp + (initp_mult * 3)] = INITP_03[initp_offset +:widthp];
          memp[countp + (initp_mult * 4)] = INITP_04[initp_offset +:widthp];
          memp[countp + (initp_mult * 5)] = INITP_05[initp_offset +:widthp];
          memp[countp + (initp_mult * 6)] = INITP_06[initp_offset +:widthp];
          memp[countp + (initp_mult * 7)] = INITP_07[initp_offset +:widthp];
          
          if (BRAM_SIZE == 36) begin
         memp[countp + (initp_mult * 8)] = INITP_08[initp_offset +:widthp];
         memp[countp + (initp_mult * 9)] = INITP_09[initp_offset +:widthp];
         memp[countp + (initp_mult * 10)] = INITP_0A[initp_offset +:widthp];
         memp[countp + (initp_mult * 11)] = INITP_0B[initp_offset +:widthp];
         memp[countp + (initp_mult * 12)] = INITP_0C[initp_offset +:widthp];
         memp[countp + (initp_mult * 13)] = INITP_0D[initp_offset +:widthp];
         memp[countp + (initp_mult * 14)] = INITP_0E[initp_offset +:widthp];
         memp[countp + (initp_mult * 15)] = INITP_0F[initp_offset +:widthp];
          end
      end // for (countp = 0; countp < initp_mult; countp = countp + 1)
       end // if (width >= 8)
       
   end // if (INIT_FILE == "NONE")
   
   else begin // memory initialization from memory file
     for (j = 0; j < mem_depth; j = j + 1) begin
       for (j1 = 0; j1 < widest_width; j1 = j1 + 1) begin
         tmp_mem[j][j1] = 1'b0;
       end
     end
       
     $readmemh (INIT_FILE, tmp_mem);

     case (widest_width)

      1, 2, 4 : begin
        for (i_mem = 0; i_mem <= mem_depth; i_mem = i_mem + 1)
          mem[i_mem] = tmp_mem [i_mem];
      end
      9 : if ((width == 8) && (widthp == 1)) begin
        for (i_mem = 0; i_mem <= mem_depth; i_mem = i_mem + 1) begin
           mem[i_mem] = tmp_mem[i_mem][0 +: width];
           memp[i_mem] = tmp_mem[i_mem][width +: widthp];
        end
      end
      18 : if ((width == 16) && (widthp == 2)) begin
        for (i_mem = 0; i_mem <= mem_depth; i_mem = i_mem + 1) begin
           mem[i_mem] = tmp_mem[i_mem][0 +: width];
           memp[i_mem] = tmp_mem[i_mem][width +: widthp];
        end
      end
      36 : if ((width == 32) && (widthp == 4)) begin
        for (i_mem = 0; i_mem <= mem_depth; i_mem = i_mem + 1) begin
          mem[i_mem] = tmp_mem[i_mem][0 +: width];
          memp[i_mem] = tmp_mem[i_mem][width +: widthp];
        end
      end
      72 : if ((width == 64) && (widthp == 8)) begin
        for (i_mem = 0; i_mem <= mem_depth; i_mem = i_mem + 1) begin
          mem[i_mem] = tmp_mem[i_mem][0 +: width];
          memp[i_mem] = tmp_mem[i_mem][width +: widthp];
        end
      end
    endcase // case(widest_width)
   end // else: !if(INIT_FILE == "NONE")

   case (EN_ECC_WRITE)
       "TRUE"  : en_ecc_write_int = 1;
       "FALSE" : en_ecc_write_int = 0;
       default : begin
                       $display("Attribute Syntax Error : The attribute EN_ECC_WRITE on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", EN_ECC_WRITE);
                finish_error = 1;
            end
   endcase

   
   case (EN_ECC_READ)
       "TRUE"  : en_ecc_read_int = 1;
       "FALSE" : en_ecc_read_int = 0;
       default : begin
                       $display("Attribute Syntax Error : The attribute EN_ECC_READ on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", EN_ECC_READ);
                finish_error = 1;
            end
   endcase

   
   case (RAM_MODE)
       "TDP" : begin
              ram_mode_int = 1;

              if (en_ecc_write_int == 1) begin
             $display("DRC Error : The attribute EN_ECC_WRITE on RAMB18E1 instance %m is set to %s which requires RAM_MODE = SDP.", EN_ECC_WRITE);
             finish_error = 1;
         end

              if (en_ecc_read_int == 1) begin
             $display("DRC Error : The attribute EN_ECC_READ on RAMB18E1 instance %m is set to %s which requires RAM_MODE = SDP.", EN_ECC_READ);
             finish_error = 1;
         end

       end // case: "TDP"
       "SDP" : begin
              ram_mode_int = 0;

              if ((WRITE_MODE_A != WRITE_MODE_B) || WRITE_MODE_A == "NO_CHANGE" || WRITE_MODE_B == "NO_CHANGE") begin
          
             $display("DRC Error : Both attributes WRITE_MODE_A and WRITE_MODE_B must be set to READ_FIRST or both attributes must be set to WRITE_FIRST when RAM_MODE = SDP on RAMB18E1 instance %m.");

             finish_error = 1;

         end
      
      
              if (BRAM_SIZE == 18) begin
             if (!(WRITE_WIDTH_B == 36 || READ_WIDTH_A == 36)) begin

            $display("DRC Error : One of the attribute WRITE_WIDTH_B or READ_WIDTH_A must set to 36 when RAM_MODE = SDP.");
            
            finish_error = 1;
             end
         end
         else begin
            
                  if (!(WRITE_WIDTH_B == 72 || READ_WIDTH_A == 72)) begin
            $display("DRC Error : One of the attribute WRITE_WIDTH_B or READ_WIDTH_A must set to 72 when RAM_MODE = SDP.");
            finish_error = 1;
             end
         end // else: !if(BRAM_SIZE == 18)

       end // case: "SDP"
       default : begin
                       $display("Attribute Syntax Error : The attribute RAM_MODE on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are TDP or SDP.", RAM_MODE);
                finish_error = 1;
                 end
   endcase

   
   case (WRITE_WIDTH_A)

       0, 1, 2, 4, 9, 18 : ;
       36 : begin 
           if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_A);
          finish_error = 1;
           end
       end
       72 : begin
           if (BRAM_SIZE == 18) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_A);
          finish_error = 1;
           end
           else if (BRAM_SIZE == 36 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", WRITE_WIDTH_A);
          finish_error = 1;
           end
            end
       default : begin
                if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
               $display("Attribute Syntax Error : The attribute WRITE_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_A);
               finish_error = 1;
           end
           else if (BRAM_SIZE == 36 || (BRAM_SIZE == 18 && ram_mode_int == 0)) begin
               $display("Attribute Syntax Error : The attribute WRITE_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", WRITE_WIDTH_A);
               finish_error = 1;
           end
                  end

   endcase // case(WRITE_WIDTH_A)


       case (WRITE_WIDTH_B)

       0, 1, 2, 4, 9, 18 : ;
       36 : begin 
           if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_B);
          finish_error = 1;
           end
       end
       72 : begin
           if (BRAM_SIZE == 18) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_B);
          finish_error = 1;
           end
           else if (BRAM_SIZE == 36 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute WRITE_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", WRITE_WIDTH_B);
          finish_error = 1;
           end
            end
       default : begin
                if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
               $display("Attribute Syntax Error : The attribute WRITE_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", WRITE_WIDTH_B);
               finish_error = 1;
           end
           else if (BRAM_SIZE == 36 || (BRAM_SIZE == 18 && ram_mode_int == 0)) begin
               $display("Attribute Syntax Error : The attribute WRITE_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", WRITE_WIDTH_B);
               finish_error = 1;
           end
                  end

   endcase // case(WRITE_WIDTH_B)


   case (READ_WIDTH_A)

       0, 1, 2, 4, 9, 18 : ;
       36 : begin 
           if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_A);
          finish_error = 1;
           end
       end
       72 : begin
           if (BRAM_SIZE == 18) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_A);
          finish_error = 1;
           end
           else if (BRAM_SIZE == 36 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", READ_WIDTH_A);
          finish_error = 1;
           end
            end
       default : begin
                if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
               $display("Attribute Syntax Error : The attribute READ_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_A);
               finish_error = 1;
           end
           else if (BRAM_SIZE == 36 || (BRAM_SIZE == 18 && ram_mode_int == 0)) begin
               $display("Attribute Syntax Error : The attribute READ_WIDTH_A on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", READ_WIDTH_A);
               finish_error = 1;
           end
                  end

   endcase // case(READ_WIDTH_A)


       case (READ_WIDTH_B)

       0, 1, 2, 4, 9, 18 : ;
       36 : begin 
           if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_B);
          finish_error = 1;
           end
       end
       72 : begin
           if (BRAM_SIZE == 18) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_B);
          finish_error = 1;
           end
           else if (BRAM_SIZE == 36 && ram_mode_int == 1) begin
          $display("Attribute Syntax Error : The attribute READ_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", READ_WIDTH_B);
          finish_error = 1;
           end
            end
       default : begin
                if (BRAM_SIZE == 18 && ram_mode_int == 1) begin
               $display("Attribute Syntax Error : The attribute READ_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9 or 18.", READ_WIDTH_B);
               finish_error = 1;
           end
           else if (BRAM_SIZE == 36 || (BRAM_SIZE == 18 && ram_mode_int == 0)) begin
               $display("Attribute Syntax Error : The attribute READ_WIDTH_B on RAMB18E1 instance %m is set to %d.  Legal values for this attribute are 0, 1, 2, 4, 9, 18 or 36.", READ_WIDTH_B);
               finish_error = 1;
           end
                  end

   endcase // case(READ_WIDTH_B)

   
   if ((RAM_EXTENSION_A == "LOWER" || RAM_EXTENSION_A == "UPPER") && READ_WIDTH_A != 1) begin
       $display("Attribute Syntax Error : If attribute RAM_EXTENSION_A on RAMB18E1 instance %m is set to either LOWER or UPPER, then READ_WIDTH_A has to be set to 1.");
       finish_error = 1;
   end

   
   if ((RAM_EXTENSION_A == "LOWER" || RAM_EXTENSION_A == "UPPER") && WRITE_WIDTH_A != 1) begin
       $display("Attribute Syntax Error : If attribute RAM_EXTENSION_A on RAMB18E1 instance %m is set to either LOWER or UPPER, then WRITE_WIDTH_A has to be set to 1.");
       finish_error = 1;
   end


    if ((RAM_EXTENSION_B == "LOWER" || RAM_EXTENSION_B == "UPPER") && READ_WIDTH_B != 1) begin
       $display("Attribute Syntax Error : If attribute RAM_EXTENSION_B on RAMB18E1 instance %m is set to either LOWER or UPPER, then READ_WIDTH_B has to be set to 1.");
       finish_error = 1;
   end


   if ((RAM_EXTENSION_B == "LOWER" || RAM_EXTENSION_B == "UPPER") && WRITE_WIDTH_B != 1) begin
       $display("Attribute Syntax Error : If attribute RAM_EXTENSION_B on RAMB18E1 instance %m is set to either LOWER or UPPER, then WRITE_WIDTH_B has to be set to 1.");
       finish_error = 1;
   end


   if (READ_WIDTH_A == 0 && READ_WIDTH_B == 0) begin
       $display("Attribute Syntax Error : Attributes READ_WIDTH_A and READ_WIDTH_B on RAMB18E1 instance %m, both can not be 0.");
       finish_error = 1;
   end

          
   case (WRITE_MODE_A)
       "WRITE_FIRST" : wr_mode_a = 2'b00;
       "READ_FIRST"  : wr_mode_a = 2'b01;
       "NO_CHANGE"   : wr_mode_a = 2'b10;
       default       : begin
            $display("Attribute Syntax Error : The Attribute WRITE_MODE_A on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are WRITE_FIRST, READ_FIRST or NO_CHANGE.", WRITE_MODE_A);
            finish_error = 1;
             end
   endcase


   case (WRITE_MODE_B)
       "WRITE_FIRST" : wr_mode_b = 2'b00;
       "READ_FIRST"  : wr_mode_b = 2'b01;
       "NO_CHANGE"   : wr_mode_b = 2'b10;
       default       : begin
            $display("Attribute Syntax Error : The Attribute WRITE_MODE_B on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are WRITE_FIRST, READ_FIRST or NO_CHANGE.", WRITE_MODE_B);
            finish_error = 1;
             end
   endcase

   case (RAM_EXTENSION_A)
       "UPPER" : cascade_a = 2'b11;
       "LOWER" : cascade_a = 2'b01;
       "NONE"  : cascade_a = 2'b00;
       default : begin
                       $display("Attribute Syntax Error : The attribute RAM_EXTENSION_A on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are LOWER, NONE or UPPER.", RAM_EXTENSION_A);
                finish_error = 1;
            end
   endcase


   case (RAM_EXTENSION_B)
       "UPPER" : cascade_b = 2'b11;
       "LOWER" : cascade_b = 2'b01;
       "NONE"  : cascade_b = 2'b00;
       default : begin
                       $display("Attribute Syntax Error : The attribute RAM_EXTENSION_B on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are LOWER, NONE or UPPER.", RAM_EXTENSION_B);
                finish_error = 1;
            end
   endcase

   
   if ((SIM_COLLISION_CHECK != "ALL") && (SIM_COLLISION_CHECK != "NONE") && (SIM_COLLISION_CHECK != "WARNING_ONLY") && (SIM_COLLISION_CHECK != "GENERATE_X_ONLY")) begin
       
       $display("Attribute Syntax Error : The attribute SIM_COLLISION_CHECK on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are ALL, NONE, WARNING_ONLY or GENERATE_X_ONLY.", SIM_COLLISION_CHECK);
       finish_error = 1;

   end

   
   case (RSTREG_PRIORITY_A)
       "RSTREG" : rstreg_priority_a_int = 1;
       "REGCE"  : rstreg_priority_a_int = 0;
       default : begin
                       $display("Attribute Syntax Error : The attribute RSTREG_PRIORITY_A on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are RSTREG or REGCE.", RSTREG_PRIORITY_A);
                finish_error = 1;
            end
   endcase


   case (RSTREG_PRIORITY_B)
       "RSTREG" : rstreg_priority_b_int = 1;
       "REGCE"  : rstreg_priority_b_int = 0;
       default : begin
                       $display("Attribute Syntax Error : The attribute RSTREG_PRIORITY_B on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are RSTREG or REGCE.", RSTREG_PRIORITY_B);
                finish_error = 1;
                 end
   endcase


   if ((en_ecc_write_int == 1 || en_ecc_read_int == 1) && (WRITE_WIDTH_B != 72 || READ_WIDTH_A != 72)) begin 
       $display("DRC Error : Attributes WRITE_WIDTH_B and READ_WIDTH_A have to be set to 72 on RAMB18E1 instance %m when either attribute EN_ECC_WRITE or EN_ECC_READ is set to TRUE.");
       finish_error = 1;
   end


   case (RDADDR_COLLISION_HWCONFIG)
       "DELAYED_WRITE" : rdaddr_collision_hwconfig_int = 0;
       "PERFORMANCE"   : rdaddr_collision_hwconfig_int = 1;
       default : begin
                       $display("Attribute Syntax Error : The attribute RDADDR_COLLISION_HWCONFIG on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are DELAYED_WRITE or PERFORMANCE.", RDADDR_COLLISION_HWCONFIG);
                finish_error = 1;
                 end
   endcase
   

   if (!(SIM_DEVICE == "VIRTEX6" || SIM_DEVICE == "7SERIES")) begin
       $display("Attribute Syntax Error : The Attribute SIM_DEVICE on RAMB18E1 instance %m is set to %s.  Legal values for this attribute are VIRTEX6, or 7SERIES.", SIM_DEVICE);
       finish_error = 1;
   end
   
   
   if (finish_error == 1)
       #1 $finish;

   
    end // initial begin

    
    // GSR
    always @(GSR)
   if (GSR) begin
       
       assign doa_out = INIT_A[0 +: ra_width];
      
       if (ra_width >= 8) begin
      assign dopa_out = INIT_A[ra_width +: ra_widthp];
       end

       assign dob_out = INIT_B[0 +: rb_width];
      
       if (rb_width >= 8) begin
      assign dopb_out = INIT_B[rb_width +: rb_widthp];
       end

       assign dbiterr_out = 0;
       assign sbiterr_out = 0;
       assign rdaddrecc_out = 9'b0;
       
   end
   else begin
       deassign doa_out;
       deassign dopa_out;
       deassign dob_out;
       deassign dopb_out;
       deassign dbiterr_out;
       deassign sbiterr_out;
       deassign rdaddrecc_out;
 
   end

   
   always @(time_clka_period or time_clkb_period) begin
      
      if (time_clka_period != 0 && time_clkb_period != 0) begin

    if (time_clka_period <= time_clkb_period) begin
       
       if (time_clka_period <= SETUP_READ_FIRST) begin
          time_period = time_clka_period;
       end
       else begin
          time_period = SETUP_READ_FIRST;
       end
       
    end
    else if (time_clkb_period <= SETUP_READ_FIRST)
         time_period = time_clkb_period;
    else
      time_period = SETUP_READ_FIRST;
    
      end
   end
   
    // registering signals
    always @(posedge CLKA) begin

`ifdef MODEL_TECH
       #0 rising_clka = 1; // mentor race condition check
`else
       rising_clka = 1;
`endif
       if (time_skew_a_flag == 0) begin
         if ($time > 110000) begin
            time_clka_period = $time - time_port_a;
            time_skew_a_flag = 1;
         end
       end


       if (ENA === 1'b1) begin
	       time_port_a = $time;
	       addra_reg = ADDRA;
	       wea_reg = WEA;
	       dia_reg = DIA;
	       dipa_reg = DIPA;
	       ox_addra_reconstruct_reg = ox_addra_reconstruct;
       end

    end

    always @(posedge CLKB) begin

`ifdef MODEL_TECH
       #0 rising_clkb = 1; // mentor race condition check
`else
       rising_clkb = 1;
`endif
       
       if (time_skew_b_flag == 0) begin
         if ($time > 110000) begin
	        time_clkb_period = $time - time_port_b;
	        time_skew_b_flag = 1;
         end
       end
       
       
       if (ENB === 1'b1) begin
	       time_port_b = $time;
	       addrb_reg = ADDRB;
	       web_reg = WEB;
	       enb_reg = ENB;
	       dib_reg = DIB;
	       dipb_reg = DIPB;
	       ox_addrb_reconstruct_reg = ox_addrb_reconstruct;
       end
       
    end // always @ (posedge CLKB)


    // CLKA and CLKB
    always @(posedge rising_clka or posedge rising_clkb) begin

   // Registering addr[15] for cascade mode
   if (rising_clka)
       if (cascade_a[1])
      addra_in_15_reg_bram = ~ADDRA[15];
       else
      addra_in_15_reg_bram = ADDRA[15];

   if (rising_clkb)
       if (cascade_b[1])
      addrb_in_15_reg_bram = ~ADDRB[15];
       else
      addrb_in_15_reg_bram = ADDRB[15];
   
   if ((cascade_a == 2'b00 || (addra_in_15_reg_bram == 1'b0 && cascade_a != 2'b00)) && (cascade_b == 2'b00 || (addrb_in_15_reg_bram == 1'b0 && cascade_b != 2'b00)))  begin

/************************************* Collision starts *****************************************/

     if (SIM_COLLISION_CHECK != "NONE") begin
       
       if (GSR === 1'b0) begin

      if (time_port_a > time_port_b) begin
          
          if (time_port_a - time_port_b <= sync_clk_skew) begin
         viol_time = 1;
          end
          else if (time_port_a - time_port_b <= time_period) begin
         viol_time = 2;
          end
      end
      else begin
         
          if (time_port_b - time_port_a <= sync_clk_skew) begin
         viol_time = 1;
          end
          else if (time_port_b - time_port_a <= time_period) begin
         viol_time = 2;
          end

      end // else: !if(time_port_a > time_port_b)

      
      if (ENA === 1'b0 || ENB === 1'b0)
          viol_time = 0;

      
      if ((WRITE_WIDTH_A <= 9 && WEA[0] === 1'b0) || (WRITE_WIDTH_A == 18 && WEA[1:0] === 2'b00) || ((WRITE_WIDTH_A == 36 || WRITE_WIDTH_A == 72) && WEA[3:0] === 4'b0000))
          if ((WRITE_WIDTH_B <= 9 && WEB[0] === 1'b0) || (WRITE_WIDTH_B == 18 && WEB[1:0] === 2'b00) || (WRITE_WIDTH_B == 36 && WEB[3:0] === 4'b0000) || (WRITE_WIDTH_B == 72 && WEB[7:0] === 8'h00))
         viol_time = 0;
       
      
      if (viol_time != 0) begin

        if (SIM_DEVICE == "VIRTEX6") begin
         
          // Clka and clkb rise at the same time
          if ((rising_clka && rising_clkb) || viol_time == 1) begin

         if (ADDRA[15:col_addr_lsb] === ADDRB[15:col_addr_lsb]) begin
          
             viol_type = 2'b01;
             chk_col_same_clk = 1;


             if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (time_port_a > time_port_b)) begin
            doa_buf = dob_buf;
            dopa_buf = dopb_buf;
             end
             else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (time_port_b > time_port_a)) begin
            dob_buf = doa_buf;
            dopb_buf = dopa_buf;
             end
             else begin
            task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
            task_rd_ram_b (ADDRB, dob_buf, dopb_buf);
             end
             

             task_col_wr_ram_a (2'b00, WEB, WEA, di_x, di_x[7:0], ADDRB, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, WEB, di_x, di_x[7:0], ADDRA, ADDRB);
             chk_col_same_clk = 0;
             
             task_col_rd_ram_a (2'b01, WEB, WEA, ADDRA, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, WEA, WEB, ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, WEB, WEA, DIA, DIPA, ADDRB, ADDRA);

                         
                dib_ecc_col = DIB;
             
             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
            
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin
          
            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, dip_ecc_col, ADDRA, ADDRB);

             end
             else
            task_col_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, DIPB, ADDRA, ADDRB);

             
             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, WEB, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, WEB, ADDRB, dob_buf, dopb_buf);


             if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && rdaddr_collision_hwconfig_int == 1) begin
            task_col_wr_ram_a (2'b10, WEB, WEA, di_x, di_x[7:0], ADDRB, ADDRA);
            task_col_wr_ram_b (2'b10, WEA, WEB, di_x, di_x[7:0], ADDRA, ADDRB);
             end

             if ((ram_mode_int == 0 && en_ecc_read_int == 1) && ((time_port_a > time_port_b) || (rising_clka && rising_clkb)))
            task_col_ecc_read (doa_buf, dopa_buf, ADDRA);
            
         end // if (ADDRA[15:col_addr_lsb] === ADDRB[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb])) begin
             
             viol_type = 2'b01;
             chk_ox_msg = 1;
             chk_ox_same_clk = 1;
             
             if (time_port_a > time_port_b)
            task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
             else if (time_port_b > time_port_a)
            task_rd_ram_b (ADDRB, dob_buf, dopb_buf);
             else begin
            task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
            task_rd_ram_b (ADDRB, dob_buf, dopb_buf);
             end
             
             task_col_wr_ram_a (2'b00, WEB, WEA, di_x, di_x[7:0], ADDRB, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, WEB, di_x, di_x[7:0], ADDRA, ADDRB);

             chk_ox_msg = 0;
             chk_ox_same_clk = 0;
             
             task_ox_wr_ram_a (2'b10, WEB, WEA, DIA, DIPA, ADDRB, ADDRA);

                         
                dib_ecc_col = DIB;
             
             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
            
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin
          
            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_ox_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, dip_ecc_col, ADDRA, ADDRB);

             end
             else
            task_ox_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, DIPB, ADDRA, ADDRB);

             
             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, WEB, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, WEB, ADDRB, dob_buf, dopb_buf);


             if (rdaddr_collision_hwconfig_int == 1) begin
            task_col_wr_ram_a (2'b10, WEB, 8'hff, di_x, di_x[7:0], ADDRB, ADDRA);
            task_col_wr_ram_b (2'b10, WEA, 8'hff, di_x, di_x[7:0], ADDRA, ADDRB);
             end

             if ((ram_mode_int == 0 && en_ecc_read_int == 1) && ((time_port_a > time_port_b) || (rising_clka && rising_clkb)))
            task_col_ecc_read (doa_buf, dopa_buf, ADDRA);
            
         end // if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb]))
         else
             viol_time = 0;

         
          end // if (rising_clka && rising_clkb)
          // Clkb before clka
          else if (rising_clka && !rising_clkb) begin


         if (ADDRA[15:col_addr_lsb] === addrb_reg[15:col_addr_lsb]) begin

             viol_type = 2'b10;

             task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
             
             task_col_wr_ram_a (2'b00, web_reg, WEA, di_x, di_x[7:0], addrb_reg, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, web_reg, di_x, di_x[7:0], ADDRA, addrb_reg);
             
             task_col_rd_ram_a (2'b01, web_reg, WEA, ADDRA, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, WEA, web_reg, addrb_reg, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, web_reg, WEA, DIA, DIPA, addrb_reg, ADDRA);

                                     
                dib_ecc_col = dib_reg;

             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
             
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
 
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && enb_reg === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, dib_reg, dipb_reg);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dip_ecc_col, ADDRA, addrb_reg);

             end
             else
            task_col_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dipb_reg, ADDRA, addrb_reg);
             

             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, web_reg, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, web_reg, addrb_reg, dob_buf, dopb_buf);

             
             if (wr_mode_a == 2'b01 || wr_mode_b == 2'b01) begin
            task_col_wr_ram_a (2'b10, web_reg, WEA, di_x, di_x[7:0], addrb_reg, ADDRA);
            task_col_wr_ram_b (2'b10, WEA, web_reg, di_x, di_x[7:0], ADDRA, addrb_reg);
             end

             
             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, ADDRA);

         end // if (ADDRA[15:col_addr_lsb] === addrb_reg[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct_reg[15:col_addr_lsb])) begin
             
             viol_type = 2'b10;
             chk_ox_msg = 1;
             
             task_rd_ram_a (ADDRA, doa_buf, dopa_buf);

             // get msg
             task_col_wr_ram_a (2'b00, web_reg, WEA, di_x, di_x[7:0], addrb_reg, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, web_reg, di_x, di_x[7:0], ADDRA, addrb_reg);
             chk_ox_msg = 0;
          
             task_ox_wr_ram_a (2'b10, web_reg, WEA, DIA, DIPA, addrb_reg, ADDRA);

                                     
                dib_ecc_col = dib_reg;

             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
             
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
 
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && enb_reg === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, dib_reg, dipb_reg);            
            eccparity_out = dip_ecc_col;
            task_ox_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dip_ecc_col, ADDRA, addrb_reg);

             end
             else
            task_ox_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dipb_reg, ADDRA, addrb_reg);
             

             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, web_reg, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, web_reg, addrb_reg, dob_buf, dopb_buf);


             task_col_wr_ram_a (2'b10, web_reg, 8'hff, di_x, di_x[7:0], addrb_reg, ADDRA);
             task_col_wr_ram_b (2'b10, WEA, 8'hff, di_x, di_x[7:0], ADDRA, addrb_reg);

             
             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, ADDRA);


         end // if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct_reg[15:col_addr_lsb]))
         else
             viol_time = 0;

         
          end // if (rising_clka && !rising_clkb)
          // Clka before clkb
          else if (!rising_clka && rising_clkb) begin

         
         if (addra_reg[15:col_addr_lsb] === ADDRB[15:col_addr_lsb]) begin
       
             viol_type = 2'b11;

             task_rd_ram_b (ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b00, WEB, wea_reg, di_x, di_x[7:0], ADDRB, addra_reg);
             task_col_wr_ram_b (2'b00, wea_reg, WEB, di_x, di_x[7:0], addra_reg, ADDRB);
             
             task_col_rd_ram_a (2'b01, WEB, wea_reg, addra_reg, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, wea_reg, WEB, ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, WEB, wea_reg, dia_reg, dipa_reg, ADDRB, addra_reg);

                         
                dib_ecc_col = DIB;


             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin             

            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, dip_ecc_col, addra_reg, ADDRB);
            
             end
             else
            task_col_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, DIPB, addra_reg, ADDRB);
             

             if (wr_mode_a != 2'b01)             
            task_col_rd_ram_a (2'b11, WEB, wea_reg, addra_reg, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, wea_reg, WEB, ADDRB, dob_buf, dopb_buf);


             if (wr_mode_a == 2'b01 || wr_mode_b == 2'b01) begin
            task_col_wr_ram_a (2'b10, WEB, wea_reg, di_x, di_x[7:0], ADDRB, addra_reg);
            task_col_wr_ram_b (2'b10, wea_reg, WEB, di_x, di_x[7:0], addra_reg, ADDRB);
             end

             
             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, addra_reg);

         end // if (addra_reg[15:col_addr_lsb] === ADDRB[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct_reg[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb])) begin

             viol_type = 2'b11;
             chk_ox_msg = 1;

             task_rd_ram_b (ADDRB, dob_buf, dopb_buf);

             // get msg
             task_col_wr_ram_a (2'b00, WEB, wea_reg, di_x, di_x[7:0], ADDRB, addra_reg);
             task_col_wr_ram_b (2'b00, wea_reg, WEB, di_x, di_x[7:0], addra_reg, ADDRB);
             chk_ox_msg = 0;
             
             task_ox_wr_ram_a (2'b10, WEB, wea_reg, dia_reg, dipa_reg, ADDRB, addra_reg);

                         
                dib_ecc_col = DIB;


             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin             

            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_ox_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, dip_ecc_col, addra_reg, ADDRB);
            
             end
             else
            task_ox_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, DIPB, addra_reg, ADDRB);
             

             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, WEB, wea_reg, addra_reg, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, wea_reg, WEB, ADDRB, dob_buf, dopb_buf);


             task_col_wr_ram_a (2'b10, WEB, 8'hff, di_x, di_x[7:0], ADDRB, addra_reg);
             task_col_wr_ram_b (2'b10, wea_reg, 8'hff, di_x, di_x[7:0], addra_reg, ADDRB);

             
             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, addra_reg);

         end // if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct_reg[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb]))
         else
             viol_time = 0;

         
          end // if (!rising_clka && rising_clkb)

            
        end // if (SIM_DEVICE == "VIRTEX6")
        else begin  // 7series

            
          // Clka and clkb rise at the same time
          if ((rising_clka && rising_clkb) || viol_time == 1) begin

         if (ADDRA[15:col_addr_lsb] === ADDRB[15:col_addr_lsb]) begin
          
             viol_type = 2'b01;
             chk_col_same_clk = 1;

             if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (time_port_a > time_port_b)) begin
            doa_buf = dob_buf;
            dopa_buf = dopb_buf;
             end
             else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (time_port_b > time_port_a)) begin
            dob_buf = doa_buf;
            dopb_buf = dopa_buf;
             end
             else begin
            task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
            task_rd_ram_b (ADDRB, dob_buf, dopb_buf);
             end

             
             task_col_wr_ram_a (2'b00, WEB, WEA, di_x, di_x[7:0], ADDRB, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, WEB, di_x, di_x[7:0], ADDRA, ADDRB);
             chk_col_same_clk = 0;
             
             task_col_rd_ram_a (2'b01, WEB, WEA, ADDRA, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, WEA, WEB, ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, WEB, WEA, DIA, DIPA, ADDRB, ADDRA);

                         
                dib_ecc_col = DIB;
             
             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
            
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin
          
            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, dip_ecc_col, ADDRA, ADDRB);

             end
             else
            task_col_wr_ram_b (2'b10, WEA, WEB, dib_ecc_col, DIPB, ADDRA, ADDRB);

             
             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, WEB, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, WEB, ADDRB, dob_buf, dopb_buf);

             if ((ram_mode_int == 0 && en_ecc_read_int == 1) && ((time_port_a > time_port_b) || (rising_clka && rising_clkb)))
                task_col_ecc_read (doa_buf, dopa_buf, ADDRA);
            
         end // if (ADDRA[15:col_addr_lsb] === ADDRB[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb]) && rdaddr_collision_hwconfig_int == 1) begin
         
             $display ("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read/write/write was performed on address %h (hex) of port A while a write/read/write was requested to the overlapped address %h (hex) of port B with RDADDR_COLLISION_HWCONFIG set to %s and WRITE_MODE_A set %s and WRITE_MODE_B set to %s .  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.  To correct this issue, either evaluate changing RDADDR_COLLISION_HWCONFIG to DELAYED_WRITE, change both WITRE_MODEs to something other than READ_FIRST or control addressing to not incur address overlap.", $time/1000.0, ADDRA, ADDRB, RDADDR_COLLISION_HWCONFIG, WRITE_MODE_A, WRITE_MODE_B );

             $finish;
         
         end
         else
             viol_time = 0;

         
          end // if ((rising_clka && rising_clkb) || viol_time == 1)
          // Clkb before clka
          else if (rising_clka && !rising_clkb) begin


         if (ADDRA[15:col_addr_lsb] === addrb_reg[15:col_addr_lsb]) begin

             viol_type = 2'b10;

             task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
             
             task_col_wr_ram_a (2'b00, web_reg, WEA, di_x, di_x[7:0], addrb_reg, ADDRA);
             task_col_wr_ram_b (2'b00, WEA, web_reg, di_x, di_x[7:0], ADDRA, addrb_reg);
             
             task_col_rd_ram_a (2'b01, web_reg, WEA, ADDRA, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, WEA, web_reg, addrb_reg, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, web_reg, WEA, DIA, DIPA, addrb_reg, ADDRA);

                                     
                dib_ecc_col = dib_reg;

             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin
             
            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
 
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && enb_reg === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, dib_reg, dipb_reg);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dip_ecc_col, ADDRA, addrb_reg);

             end
             else
            task_col_wr_ram_b (2'b10, WEA, web_reg, dib_ecc_col, dipb_reg, ADDRA, addrb_reg);
             

             if (wr_mode_a != 2'b01)
            task_col_rd_ram_a (2'b11, web_reg, WEA, ADDRA, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, WEA, web_reg, addrb_reg, dob_buf, dopb_buf);

             
             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, ADDRA);

             
         end // if (ADDRA[15:col_addr_lsb] === addrb_reg[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct[15:col_addr_lsb] === ox_addrb_reconstruct_reg[15:col_addr_lsb]) && rdaddr_collision_hwconfig_int == 1) begin

             $display ("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read/write/write was performed on address %h (hex) of port A while a write/read/write was requested to the overlapped address %h (hex) of port B with RDADDR_COLLISION_HWCONFIG set to %s and WRITE_MODE_A set %s and WRITE_MODE_B set to %s .  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.  To correct this issue, either evaluate changing RDADDR_COLLISION_HWCONFIG to DELAYED_WRITE, change both WITRE_MODEs to something other than READ_FIRST or control addressing to not incur address overlap.", $time/1000.0, ADDRA, addrb_reg, RDADDR_COLLISION_HWCONFIG, WRITE_MODE_A, WRITE_MODE_B );

             $finish;
         
         end
         else
             viol_time = 0;


          end // if (rising_clka && !rising_clkb)
          // Clka before clkb
          else if (!rising_clka && rising_clkb) begin
         
         
         if (addra_reg[15:col_addr_lsb] === ADDRB[15:col_addr_lsb]) begin

             viol_type = 2'b11;

             task_rd_ram_b (ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b00, WEB, wea_reg, di_x, di_x[7:0], ADDRB, addra_reg);
             task_col_wr_ram_b (2'b00, wea_reg, WEB, di_x, di_x[7:0], addra_reg, ADDRB);
             
             task_col_rd_ram_a (2'b01, WEB, wea_reg, addra_reg, doa_buf, dopa_buf);
             task_col_rd_ram_b (2'b01, wea_reg, WEB, ADDRB, dob_buf, dopb_buf);

             task_col_wr_ram_a (2'b10, WEB, wea_reg, dia_reg, dipa_reg, ADDRB, addra_reg);

                         
                dib_ecc_col = DIB;


             if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin             

            if (injectdbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
                dib_ecc_col[62] = ~dib_ecc_col[62];
            end
            else if (injectsbiterr_in === 1) begin
                dib_ecc_col[30] = ~dib_ecc_col[30];
            end

             end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
             
             
             if (ram_mode_int == 0 && en_ecc_write_int == 1 && ENB === 1'b1) begin

            dip_ecc_col = fn_dip_ecc(1'b1, DIB, DIPB);            
            eccparity_out = dip_ecc_col;
            task_col_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, dip_ecc_col, addra_reg, ADDRB);
            
             end
             else
            task_col_wr_ram_b (2'b10, wea_reg, WEB, dib_ecc_col, DIPB, addra_reg, ADDRB);
             

             if (wr_mode_a != 2'b01)             
            task_col_rd_ram_a (2'b11, WEB, wea_reg, addra_reg, doa_buf, dopa_buf);
             if (wr_mode_b != 2'b01)
            task_col_rd_ram_b (2'b11, wea_reg, WEB, ADDRB, dob_buf, dopb_buf);


             if (ram_mode_int == 0 && en_ecc_read_int == 1)
            task_col_ecc_read (doa_buf, dopa_buf, addra_reg);

             
         end // if (addra_reg[15:col_addr_lsb] === ADDRB[15:col_addr_lsb])
         else if ((wr_mode_a == 2'b01 || wr_mode_b == 2'b01) && (ox_addra_reconstruct_reg[15:col_addr_lsb] === ox_addrb_reconstruct[15:col_addr_lsb]) && rdaddr_collision_hwconfig_int == 1) begin

             $display ("Address Overlap Error on RAMB18E1 : %m at simulation time %.3f ns.\nA read/write/write was performed on address %h (hex) of port A while a write/read/write was requested to the overlapped address %h (hex) of port B with RDADDR_COLLISION_HWCONFIG set to %s and WRITE_MODE_A set %s and WRITE_MODE_B set to %s .  The write will be unsuccessful and the contents of the RAM at both address locations of port A and B became unknown.  To correct this issue, either evaluate changing RDADDR_COLLISION_HWCONFIG to DELAYED_WRITE, change both WITRE_MODEs to something other than READ_FIRST or control addressing to not incur address overlap.", $time/1000.0, addra_reg, ADDRB, RDADDR_COLLISION_HWCONFIG, WRITE_MODE_A, WRITE_MODE_B );   

             $finish;
         
         end
         else
             viol_time = 0;
         
         
          end // if (!rising_clka && rising_clkb)

            
        end // else: !if(SIM_DEVICE == "VIRTEX6")
          

            
      end // if (viol_time != 0)
       end // if (GSR === 1'b0)
         
       if (SIM_COLLISION_CHECK == "WARNING_ONLY")
      viol_time = 0;
       
     end // if (SIM_COLLISION_CHECK != "NONE")

   
/*************************************** end collision ********************************/

   end // if ((cascade_a == 2'b00 || (addra_in_15_reg_bram == 1'b0 && cascade_a != 2'b00)) && (cascade_b == 2'b00 || (addrb_in_15_reg_bram == 1'b0 && cascade_b != 2'b00)))
   
   
/**************************** Port A ****************************************/
   if (rising_clka) begin

       // DRC
       if (RSTRAMA === 1 && ram_mode_int == 0 && (en_ecc_write_int == 1 || en_ecc_read_int == 1))
      $display("DRC Warning : SET/RESET (RSTRAM) is not supported in ECC mode on RAMB18E1 instance %m.");

       // end DRC

       
       // registering ADDRA[15] the second time
       if (REGCEA)
      addra_in_15_reg1 = addra_in_15_reg;   
       
   
       if (ENA && (wr_mode_a != 2'b10 || WEA[0] == 0 || RSTRAMA == 1'b1))
      if (cascade_a[1])
          addra_in_15_reg = ~ADDRA[15];
      else
          addra_in_15_reg = ADDRA[15];
   
   
       if (GSR == 1'b0 && ENA == 1'b1 && (cascade_a == 2'b00 || (addra_in_15_reg_bram == 1'b0 && cascade_a != 2'b00))) begin

      // SRVAL
      if (RSTRAMA === 1'b1) begin
          
          doa_buf = SRVAL_A[0 +: ra_width];
          doa_out = SRVAL_A[0 +: ra_width];
          
          if (ra_width >= 8) begin
         dopa_buf = SRVAL_A[ra_width +: ra_widthp];
         dopa_out = SRVAL_A[ra_width +: ra_widthp];
          end
      end
      

      if (viol_time == 0) begin

          // Read first
          if (wr_mode_a == 2'b01 || (ram_mode_int == 0 && en_ecc_read_int == 1)) begin
         task_rd_ram_a (ADDRA, doa_buf, dopa_buf);
         

         // ECC decode
         if (ram_mode_int == 0 && en_ecc_read_int == 1) begin
            
             dopr_ecc = fn_dip_ecc(1'b0, doa_buf, dopa_buf);

             syndrome = dopr_ecc ^ dopa_buf;
            
             if (syndrome !== 0) begin
                
            if (syndrome[7]) begin  // dectect single bit error
               
                ecc_bit_position = {doa_buf[63:57], dopa_buf[6], doa_buf[56:26], dopa_buf[5], doa_buf[25:11], dopa_buf[4], doa_buf[10:4], dopa_buf[3], doa_buf[3:1], dopa_buf[2], doa_buf[0], dopa_buf[1:0], dopa_buf[7]};
                   
                if (syndrome[6:0] > 71) begin
               $display ("DRC Error : Simulation halted due Corrupted DIP. To correct this problem, make sure that reliable data is fed to the DIP. The correct Parity must be generated by a Hamming code encoder or encoder in the Block RAM. The output from the model is unreliable if there are more than 2 bit errors. The model doesn't warn if there is sporadic input of more than 2 bit errors due to the limitation in Hamming code.");
               $finish;
                end
                
                ecc_bit_position[syndrome[6:0]] = ~ecc_bit_position[syndrome[6:0]]; // correct single bit error in the output 
                
                dia_in_ecc_corrected = {ecc_bit_position[71:65], ecc_bit_position[63:33], ecc_bit_position[31:17], ecc_bit_position[15:9], ecc_bit_position[7:5], ecc_bit_position[3]}; // correct single bit error in the memory
                
                doa_buf = dia_in_ecc_corrected;
                
                dipa_in_ecc_corrected = {ecc_bit_position[0], ecc_bit_position[64], ecc_bit_position[32], ecc_bit_position[16], ecc_bit_position[8], ecc_bit_position[4], ecc_bit_position[2:1]}; // correct single bit error in the parity memory
                
                dopa_buf = dipa_in_ecc_corrected;
               
                dbiterr_out <= 0;
                sbiterr_out <= 1;
                
            end
            else if (!syndrome[7]) begin  // double bit error
                sbiterr_out <= 0;
                dbiterr_out <= 1;
                
            end
             end // if (syndrome !== 0)
             else begin
            dbiterr_out <= 0;
            sbiterr_out <= 0;
            
             end // else: !if(syndrome !== 0)
             
             
             // output of rdaddrecc
             rdaddrecc_out[8:0] <= ADDRA[14:6];
             
         end // if (ram_mode_int == 0 && en_ecc_read_int == 1)
          end // if (wr_mode_a == 2'b01)
          
          
          // Write
          task_wr_ram_a (WEA, DIA, DIPA, ADDRA);

          // Read if not read first
          if (wr_mode_a != 2'b01 && !(ram_mode_int == 0 && en_ecc_read_int == 1))
             task_rd_ram_a (ADDRA, doa_buf, dopa_buf);

      end // if (viol_time == 0)
      
       end // if (GSR == 1'b0 && ENA == 1'b1 && (cascade_a == 2'b00 || (addra_in_15_reg_bram == 1'b0 && cascade_a != 2'b00)))
       
   end // if (rising_clka)
   // end of port A


/************************************** port B ***************************************************************/   
   if (rising_clkb) begin

       // DRC
       if (RSTRAMB === 1 && ram_mode_int == 0 && (en_ecc_write_int == 1 || en_ecc_read_int == 1))
      $display("DRC Warning : SET/RESET (RSTRAM) is not supported in ECC mode on RAMB18E1 instance %m.");

       if (!(en_ecc_write_int == 1 || en_ecc_read_int == 1)) begin

      if (injectsbiterr_in === 1)
          $display("DRC Warning : INJECTSBITERR is not supported when neither EN_ECC_WRITE nor EN_ECC_READ = TRUE on RAMB18E1 instance %m.");

      if (injectdbiterr_in === 1)
          $display("DRC Warning : INJECTDBITERR is not supported when neither EN_ECC_WRITE nor EN_ECC_READ = TRUE on RAMB18E1 instance %m.");

       end              
       // End DRC
       
       
       if (REGCEB)
      addrb_in_15_reg1 = addrb_in_15_reg;   
       
       
       if (ENB && (wr_mode_b != 2'b10 || WEB[0] == 0 || RSTRAMB == 1'b1))
      if (cascade_b[1])
          addrb_in_15_reg = ~ADDRB[15];
      else
          addrb_in_15_reg = ADDRB[15];
       
   
       if (GSR == 1'b0 && ENB == 1'b1 && (cascade_b == 2'b00 || (addrb_in_15_reg_bram == 1'b0 && cascade_b != 2'b00))) begin

      // SRVAL
      if (RSTRAMB === 1'b1) begin
          
          dob_buf = SRVAL_B[0 +: rb_width];
          dob_out = SRVAL_B[0 +: rb_width];
          
          if (rb_width >= 8) begin
         dopb_buf = SRVAL_B[rb_width +: rb_widthp];
         dopb_out = SRVAL_B[rb_width +: rb_widthp];
          end
      end


      if (viol_time == 0) begin

          // ECC encode
          if (ram_mode_int == 0 && en_ecc_write_int == 1) begin
         dip_ecc = fn_dip_ecc(1'b1, DIB, DIPB);
         eccparity_out = dip_ecc;
         dipb_in_ecc = dip_ecc;
          end
          else
         dipb_in_ecc = DIPB;

          
          dib_in_ecc = DIB;

          
          // injecting error
          if (en_ecc_write_int == 1 || en_ecc_read_int == 1) begin             
          
         if (injectdbiterr_in === 1) begin  // double bit
             dib_in_ecc[30] = ~dib_in_ecc[30];
             dib_in_ecc[62] = ~dib_in_ecc[62];
         end
         else if (injectsbiterr_in === 1) begin // single bit
             dib_in_ecc[30] = ~dib_in_ecc[30];
         end

          end // if (en_ecc_write_int == 1 || en_ecc_read_int == 1)
          
          
          // Read first
           if (wr_mode_b == 2'b01 && RSTRAMB === 1'b0)
         task_rd_ram_b (ADDRB, dob_buf, dopb_buf);      
             

          // Write
          task_wr_ram_b (WEB, dib_in_ecc, dipb_in_ecc, ADDRB);
          
         
          // Read if not read first
          if (wr_mode_b != 2'b01 && RSTRAMB === 1'b0)
         task_rd_ram_b (ADDRB, dob_buf, dopb_buf);
      
      end // if (viol_time == 0)
      
       
       end // if (GSR == 1'b0 && ENB == 1'b1 && (cascade_b == 2'b00 || addrb_in_15_reg_bram == 1'b0))
       
   end // if (rising_clkb)
   // end of port B
   

   if (GSR == 1'b0) begin
       
       // writing outputs of port A   
       if (ENA && (rising_clka || viol_time != 0)) begin
      
      if (RSTRAMA === 1'b0 && (wr_mode_a != 2'b10 || (WRITE_WIDTH_A <= 9 && WEA[0] === 1'b0) || (WRITE_WIDTH_A == 18 && WEA[1:0] === 2'b00) || ((WRITE_WIDTH_A == 36 || WRITE_WIDTH_A == 72) && WEA[3:0] === 4'b0000))) begin
          
          doa_out <= doa_buf;

          if (ra_width >= 8)
         dopa_out <= dopa_buf;
          
      end
      
       end
       
       
       // writing outputs of port B   
       if (ENB && (rising_clkb || viol_time != 0)) begin
      
      if (RSTRAMB === 1'b0 && (wr_mode_b != 2'b10 || (WRITE_WIDTH_B <= 9 && WEB[0] === 1'b0) || (WRITE_WIDTH_B == 18 && WEB[1:0] === 2'b00) || (WRITE_WIDTH_B == 36 && WEB[3:0] === 4'b0000) || (WRITE_WIDTH_B == 72 && WEB[7:0] === 8'h00))) begin
          
          dob_out <= dob_buf;

          if (rb_width >= 8)
         dopb_out <= dopb_buf;

      end
      
       end

   end // if (GSR == 1'b0)
   
   
   viol_time = 0;
`ifdef MODEL_TECH
   #0 rising_clka = 0; // mentor race condition check
   #0 rising_clkb = 0; // mentor race condition check
`else
   rising_clka = 0;
   rising_clkb = 0;
`endif
   viol_type = 2'b00;
   col_wr_wr_msg = 1;
   col_wra_rdb_msg = 1;
   col_wrb_rda_msg = 1;

    end // always @ (posedge rising_clka or posedge rising_clkb)


    // ********* Cascade  Port A ********
    always @(posedge CLKA or CASCADEINA or addra_in_15_reg or doa_out or dopa_out) begin

   if (cascade_a[1] == 1'b1 && addra_in_15_reg == 1'b1) begin
       doa_out_mux[0] = CASCADEINA;
   end
   else begin
       doa_out_mux = doa_out;

       if (ra_width >= 8)
      dopa_out_mux = dopa_out;
       
   end
   
    end

    // output register mode
    always @(posedge CLKA or CASCADEINA or addra_in_15_reg1 or doa_outreg or dopa_outreg) begin

   if (cascade_a[1] == 1'b1 && addra_in_15_reg1 == 1'b1) begin
       doa_outreg_mux[0] = CASCADEINA;
   end
   else begin
       doa_outreg_mux = doa_outreg;

       if (ra_width >= 8)
      dopa_outreg_mux = dopa_outreg;
       
   end
   
    end

    
    // ********* Cascade  Port B ********
    always @(posedge CLKB or CASCADEINB or addrb_in_15_reg or dob_out or dopb_out) begin

   if (cascade_b[1] == 1'b1 && addrb_in_15_reg == 1'b1) begin
       dob_out_mux[0] = CASCADEINB;
   end
   else begin
       dob_out_mux = dob_out;

       if (rb_width >= 8)
      dopb_out_mux = dopb_out;
       
   end
   
    end

    // output register mode
    always @(posedge CLKB or CASCADEINB or addrb_in_15_reg1 or dob_outreg or dopb_outreg) begin

   if (cascade_b[1] == 1'b1 && addrb_in_15_reg1 == 1'b1) begin
       dob_outreg_mux[0] = CASCADEINB;
   end
   else begin
       dob_outreg_mux = dob_outreg;

       if (rb_width >= 8)
      dopb_outreg_mux = dopb_outreg;
       
   end

    end // always @ (posedge REGCLKB or CASCADEINREGB or addrb_in_15_reg1 or dob_outreg or dopb_outreg)

    
    // ***** Output Registers **** Port A *****
    always @(posedge CLKA or posedge GSR) begin
   
   if (DOA_REG == 1) begin

       if (GSR == 1'b1) begin

      rdaddrecc_outreg <= 9'b0;
      dbiterr_outreg <= 0;
      sbiterr_outreg <= 0;
      doa_outreg <= INIT_A[0 +: ra_width];

      if (ra_width >= 8)
          dopa_outreg <= INIT_A[ra_width +: ra_widthp];
      
       end
       else if (GSR == 1'b0) begin

      if (REGCEA === 1'b1) begin
          dbiterr_outreg <= dbiterr_out;
          sbiterr_outreg <= sbiterr_out;
          rdaddrecc_outreg <= rdaddrecc_out;
      end
      
      
      if (rstreg_priority_a_int == 0) begin // Virtex5 behavior
      
          if (REGCEA == 1'b1) begin
          if (RSTREGA == 1'b1) begin
             
             doa_outreg <= SRVAL_A[0 +: ra_width];
             
             if (ra_width >= 8)
            dopa_outreg <= SRVAL_A[ra_width +: ra_widthp];
             
         end
         else if (RSTREGA == 1'b0) begin
             
             doa_outreg <= doa_out;

             if (ra_width >= 8)
            dopa_outreg <= dopa_out;
             
         end
          end // if (REGCEA == 1'b1)

      end // if (rstreg_priority_a_int == 1'b0)
      else begin

           if (RSTREGA == 1'b1) begin
         
         doa_outreg <= SRVAL_A[0 +: ra_width];
         
         if (ra_width >= 8)
             dopa_outreg <= SRVAL_A[ra_width +: ra_widthp];
         
         end

          else if (RSTREGA == 1'b0) begin

         if (REGCEA == 1'b1) begin
             
             doa_outreg <= doa_out;

             if (ra_width >= 8)
            dopa_outreg <= dopa_out;
             
         end
          end
      end // else: !if(rstreg_priority_a_int == 1'b0)
          
       end // if (GSR == 1'b0)

   end // if (DOA_REG == 1)

    end // always @ (posedge CLKA or posedge GSR)
    

    always @(temp_wire or doa_out_mux or dopa_out_mux or doa_outreg_mux or dopa_outreg_mux or dbiterr_out or dbiterr_outreg or sbiterr_out or sbiterr_outreg or rdaddrecc_out or rdaddrecc_outreg) begin

   case (DOA_REG)

       0 : begin
          dbiterr_out_out = dbiterr_out;
          sbiterr_out_out = sbiterr_out;
          rdaddrecc_out_out = rdaddrecc_out;
               DOA[0 +: ra_width] = doa_out_mux[0 +: ra_width];

          if (ra_width >= 8)
         DOPA[0 +: ra_widthp] = dopa_out_mux[0 +: ra_widthp];

           end
       1 : begin
          dbiterr_out_out = dbiterr_outreg;
          sbiterr_out_out = sbiterr_outreg;
               DOA[0 +: ra_width] = doa_outreg_mux[0 +: ra_width];
          rdaddrecc_out_out = rdaddrecc_outreg;
      
          if (ra_width >= 8)
         DOPA[0 +: ra_widthp] = dopa_outreg_mux[0 +: ra_widthp];

           end
       default : begin
                     $display("Attribute Syntax Error : The attribute DOA_REG on RAMB18E1 instance %m is set to %2d.  Legal values for this attribute are 0 or 1.", DOA_REG);
                     $finish;
                 end

   endcase

    end // always @ (doa_out_mux or dopa_out_mux or doa_outreg_mux or dopa_outreg_mux or dbiterr_out or dbiterr_outreg or sbiterr_out or sbiterr_outreg)
    

// ***** Output Registers **** Port B *****
    always @(posedge CLKB or posedge GSR) begin

   if (DOB_REG == 1) begin
   
       if (GSR == 1'b1) begin

      dob_outreg <= INIT_B[0 +: rb_width];
      
      if (rb_width >= 8)
          dopb_outreg <= INIT_B[rb_width +: rb_widthp];
      
       end
       else if (GSR == 1'b0) begin

      if (rstreg_priority_b_int == 0) begin // Virtex5 behavior
      
          if (REGCEB == 1'b1) begin
          if (RSTREGB == 1'b1) begin
             
             dob_outreg <= SRVAL_B[0 +: rb_width];
             
             if (rb_width >= 8)
            dopb_outreg <= SRVAL_B[rb_width +: rb_widthp];
             
         end
         else if (RSTREGB == 1'b0) begin
             
             dob_outreg <= dob_out;

             if (rb_width >= 8)
            dopb_outreg <= dopb_out;
             
         end
          end // if (REGCEB == 1'b1)

      end // if (rstreg_priority_b_int == 1'b0)
      else begin

           if (RSTREGB == 1'b1) begin
         
         dob_outreg <= SRVAL_B[0 +: rb_width];
         
         if (rb_width >= 8)
             dopb_outreg <= SRVAL_B[rb_width +: rb_widthp];
         
         end

          else if (RSTREGB == 1'b0) begin

         if (REGCEB == 1'b1) begin
             
             dob_outreg <= dob_out;

             if (rb_width >= 8)
            dopb_outreg <= dopb_out;
             
         end
          end
      end // else: !if(rstreg_priority_b_int == 1'b0)

       end // if (GSR == 1'b0)

   end // if (DOB_REG == 1)

    end // always @ (posedge CLKB or posedge GSR)
    

    always @(temp_wire or dob_out_mux or dopb_out_mux or dob_outreg_mux or dopb_outreg_mux) begin

   case (DOB_REG)
       
       0 : begin
                    DOB[0 +: rb_width] = dob_out_mux[0 +: rb_width];
      
          if (rb_width >= 8)
         DOPB[0 +: rb_widthp] = dopb_out_mux[0 +: rb_widthp];
           end
       1 : begin
               DOB[0 +: rb_width] = dob_outreg_mux[0 +: rb_width];
          
          if (rb_width >= 8)
         DOPB[0 +: rb_widthp] = dopb_outreg_mux[0 +: rb_widthp];

           end
       default : begin
                     $display("Attribute Syntax Error : The attribute DOB_REG on RAMB18E1 instance %m is set to %2d.  Legal values for this attribute are 0 or 1.", DOB_REG);
                     $finish;
                 end

   endcase

    end // always @ (dob_out_mux or dopb_out_mux or dob_outreg_mux or dopb_outreg_mux)

    
endmodule // RB18_INTERNAL_VLOG

`endcelldefine
    
// end of RB18_INTERNAL_VLOG - Note: Not an user primitive

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2016 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 2017.1
//  \   \         Description : Xilinx Unified Simulation Library Component
//  /   /                  D Flip-Flop with Clock Enable and Synchronous Reset
// /___/   /\     Filename : FDRE.v
// \   \  /  \
//  \___\/\___\
//
// Revision:
//    08/25/10 - Initial version.
//    10/20/10 - remove unused pin line from table.
//    12/08/11 - add MSGON and XON attributes (CR636891)
//    01/16/12 - 640813 - add MSGON and XON functionality
//    04/16/13 - PR683925 - add invertible pin support.
// End Revision

`timescale  1 ps / 1 ps

`celldefine 

module FDRE #(
  `ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
  parameter MSGON = "TRUE",
  parameter XON = "TRUE",
  `endif
  parameter [0:0] INIT = 1'b0,
  parameter [0:0] IS_C_INVERTED = 1'b0,
  parameter [0:0] IS_D_INVERTED = 1'b0,
  parameter [0:0] IS_R_INVERTED = 1'b0
)(
  output Q,
  
  input C,
  input CE,
  input D,
  input R
);

    reg [0:0] IS_C_INVERTED_REG = IS_C_INVERTED;
    reg [0:0] IS_D_INVERTED_REG = IS_D_INVERTED;
    reg [0:0] IS_R_INVERTED_REG = IS_R_INVERTED;
    
    tri0 glblGSR = glbl.GSR;

`ifdef XIL_TIMING
    wire D_dly, C_dly, CE_dly;
    wire R_dly;
`endif

// begin behavioral model

  reg Q_out;

  assign #100 Q = Q_out;

    always @(glblGSR)
      if (glblGSR) 
        assign Q_out = INIT;
      else
        deassign Q_out;

`ifdef XIL_TIMING
generate
if (IS_C_INVERTED == 1'b0) begin : generate_block1
  always @(posedge C_dly)
    if (((R_dly ^ IS_R_INVERTED_REG) && (R !== 1'bz)) || (R === 1'bx && Q_out == 1'b0))
      Q_out <=  1'b0;
    else if (CE_dly || (CE === 1'bz) || ((CE === 1'bx) && (Q_out == (D_dly ^ IS_D_INVERTED_REG))))
      Q_out <=  D_dly ^ IS_D_INVERTED_REG;
end else begin : generate_block1
  always @(negedge C_dly)
    if (((R_dly ^ IS_R_INVERTED_REG) && (R !== 1'bz)) || (R === 1'bx && Q_out == 1'b0))
      Q_out <=  1'b0;
    else if (CE_dly || (CE === 1'bz) || ((CE === 1'bx) && (Q_out == (D_dly ^ IS_D_INVERTED_REG))))
      Q_out <= D_dly ^ IS_D_INVERTED_REG;
end
endgenerate
`else
generate
if (IS_C_INVERTED == 1'b0) begin : generate_block1
  always @(posedge C)
    if (((R ^ IS_R_INVERTED_REG) && (R !== 1'bz)) || (R === 1'bx && Q_out == 1'b0))
      Q_out <=  1'b0;
    else if (CE || (CE === 1'bz) || ((CE === 1'bx) && (Q_out == (D ^ IS_D_INVERTED_REG))))
      Q_out <=  D ^ IS_D_INVERTED_REG;
end else begin : generate_block1
  always @(negedge C)
    if (((R ^ IS_R_INVERTED_REG) && (R !== 1'bz)) || (R === 1'bx && Q_out == 1'b0))
      Q_out <=  1'b0;
    else if (CE || (CE === 1'bz) || ((CE === 1'bx) && (Q_out == (D ^ IS_D_INVERTED_REG))))
      Q_out <=  D ^ IS_D_INVERTED_REG;
end
endgenerate
`endif

`ifdef XIL_TIMING
    reg notifier;
    wire notifier1;
`endif

`ifdef XIL_TIMING
    wire ngsr, in_out;
    wire nrst;
    wire in_clk_enable, in_clk_enable_p, in_clk_enable_n;
    wire ce_clk_enable, ce_clk_enable_p, ce_clk_enable_n;
    reg init_enable = 1'b1;
    wire rst_clk_enable, rst_clk_enable_p, rst_clk_enable_n;
`endif

`ifdef XIL_TIMING
    not (ngsr, glblGSR);
    xor (in_out, D_dly, IS_D_INVERTED_REG, Q_out);
    not (nrst, (R_dly ^ IS_R_INVERTED_REG) && (R !== 1'bz));

    and (in_clk_enable, ngsr, nrst, CE || (CE === 1'bz));
    and (ce_clk_enable, ngsr, nrst, in_out);
    and (rst_clk_enable, ngsr, CE || (CE === 1'bz), D ^ IS_D_INVERTED_REG);
    always @(negedge nrst) init_enable = (MSGON =="TRUE") && ~glblGSR && (Q_out ^ INIT);

    assign notifier1 = (XON == "FALSE") ?  1'bx : notifier;
    assign ce_clk_enable_n = (MSGON =="TRUE") && ce_clk_enable && (IS_C_INVERTED == 1'b1);
    assign in_clk_enable_n = (MSGON =="TRUE") && in_clk_enable && (IS_C_INVERTED == 1'b1);
    assign rst_clk_enable_n = (MSGON =="TRUE") && rst_clk_enable && (IS_C_INVERTED == 1'b1);
    assign ce_clk_enable_p = (MSGON =="TRUE") && ce_clk_enable && (IS_C_INVERTED == 1'b0);
    assign in_clk_enable_p = (MSGON =="TRUE") && in_clk_enable && (IS_C_INVERTED == 1'b0);
    assign rst_clk_enable_p = (MSGON =="TRUE") && rst_clk_enable && (IS_C_INVERTED == 1'b0);
`endif

// end behavioral model

`ifdef XIL_TIMING
  specify
  (C => Q) = (100:100:100, 100:100:100);
  $period (negedge C &&& CE, 0:0:0, notifier);
  $period (posedge C &&& CE, 0:0:0, notifier);
  $setuphold (negedge C, negedge CE, 0:0:0, 0:0:0, notifier,ce_clk_enable_n,ce_clk_enable_n,C_dly,CE_dly);
  $setuphold (negedge C, negedge D, 0:0:0, 0:0:0, notifier,in_clk_enable_n,in_clk_enable_n,C_dly,D_dly);
  $setuphold (negedge C, negedge R, 0:0:0, 0:0:0, notifier,rst_clk_enable_n,rst_clk_enable_n,C_dly,R_dly);
  $setuphold (negedge C, posedge CE, 0:0:0, 0:0:0, notifier,ce_clk_enable_n,ce_clk_enable_n,C_dly,CE_dly);
  $setuphold (negedge C, posedge D, 0:0:0, 0:0:0, notifier,in_clk_enable_n,in_clk_enable_n,C_dly,D_dly);
  $setuphold (negedge C, posedge R, 0:0:0, 0:0:0, notifier,rst_clk_enable_n,rst_clk_enable_n,C_dly,R_dly);
  $setuphold (posedge C, negedge CE, 0:0:0, 0:0:0, notifier,ce_clk_enable_p,ce_clk_enable_p,C_dly,CE_dly);
  $setuphold (posedge C, negedge D, 0:0:0, 0:0:0, notifier,in_clk_enable_p,in_clk_enable_p,C_dly,D_dly);
  $setuphold (posedge C, negedge R, 0:0:0, 0:0:0, notifier,rst_clk_enable_p,rst_clk_enable_p,C_dly,R_dly);
  $setuphold (posedge C, posedge CE, 0:0:0, 0:0:0, notifier,ce_clk_enable_p,ce_clk_enable_p,C_dly,CE_dly);
  $setuphold (posedge C, posedge D, 0:0:0, 0:0:0, notifier,in_clk_enable_p,in_clk_enable_p,C_dly,D_dly);
  $setuphold (posedge C, posedge R, 0:0:0, 0:0:0, notifier,rst_clk_enable_p,rst_clk_enable_p,C_dly,R_dly);
  $width (negedge C &&& CE, 0:0:0, 0, notifier);
  $width (negedge R &&& init_enable, 0:0:0, 0, notifier);
  $width (posedge C &&& CE, 0:0:0, 0, notifier);
  $width (posedge R &&& init_enable, 0:0:0, 0, notifier);
  specparam PATHPULSE$ = 0;
  endspecify
`endif
endmodule

`endcelldefine

///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2004 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 10.1
//  \   \         Description : Xilinx Functional Simulation Library Component
//  /   /                  Input Buffer
// /___/   /\     Filename : IBUF.v
// \   \  /  \    Timestamp : Thu Mar 25 16:42:23 PST 2004
//  \___\/\___\
//
// Revision:
//    03/23/04 - Initial version.
//    05/23/07 - Changed timescale to 1 ps / 1 ps.
//    07/16/08 - Added IBUF_LOW_PWR attribute.
//    04/22/09 - CR 519127 - Changed IBUF_LOW_PWR default to TRUE.
//    12/13/11 - Added `celldefine and `endcelldefine (CR 524859).
//    10/22/14 - Added #1 to $finish (CR 808642).
// End Revision

`timescale  1 ps / 1 ps


`celldefine

module IBUF (O, I);

    parameter CAPACITANCE = "DONT_CARE";
    parameter IBUF_DELAY_VALUE = "0";
    parameter IBUF_LOW_PWR = "TRUE";
    parameter IFD_DELAY_VALUE = "AUTO";
    parameter IOSTANDARD = "DEFAULT";

`ifdef XIL_TIMING

    parameter LOC = " UNPLACED";

`endif

    
    output O;
    input  I;

    buf B1 (O, I);
    
    
    initial begin
	
        case (CAPACITANCE)

            "LOW", "NORMAL", "DONT_CARE" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute CAPACITANCE on IBUF instance %m is set to %s.  Legal values for this attribute are DONT_CARE, LOW or NORMAL.", CAPACITANCE);
                          #1 $finish;
                      end

        endcase


	case (IBUF_DELAY_VALUE)

            "0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute IBUF_DELAY_VALUE on IBUF instance %m is set to %s.  Legal values for this attribute are 0, 1, 2, ... or 16.", IBUF_DELAY_VALUE);
                          #1 $finish;
                      end

        endcase

        case (IBUF_LOW_PWR)

            "FALSE", "TRUE" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute IBUF_LOW_PWR on IBUF instance %m is set to %s.  Legal values for this attribute are TRUE or FALSE.", IBUF_LOW_PWR);
                          #1 $finish;
                      end

        endcase


	case (IFD_DELAY_VALUE)

            "AUTO", "0", "1", "2", "3", "4", "5", "6", "7", "8" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute IFD_DELAY_VALUE on IBUF instance %m is set to %s.  Legal values for this attribute are AUTO, 0, 1, 2, ... or 8.", IFD_DELAY_VALUE);
                          #1 $finish;
                      end

	endcase

                        
    end


`ifdef XIL_TIMING
    
    specify
        (I => O) = (0:0:0, 0:0:0);
        specparam PATHPULSE$ = 0;
    endspecify
    
`endif

    
endmodule

`endcelldefine


///////////////////////////////////////////////////////////////////////////////
// Copyright (c) 1995/2004 Xilinx, Inc.
// All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /    Vendor : Xilinx
// \   \   \/     Version : 10.1
//  \   \         Description : Xilinx Functional Simulation Library Component
//  /   /                  Output Buffer
// /___/   /\     Filename : OBUF.v
// \   \  /  \    Timestamp : Thu Mar 25 16:42:59 PST 2004
//  \___\/\___\
//
// Revision:
//    03/23/04 - Initial version.
//    02/22/06 - CR#226003 - Added integer, real parameter type
//    05/23/07 - Changed timescale to 1 ps / 1 ps.

`timescale  1 ps / 1 ps


`celldefine

module OBUF (O, I);

    parameter CAPACITANCE = "DONT_CARE";
    parameter integer DRIVE = 12;
    parameter IOSTANDARD = "DEFAULT";

`ifdef XIL_TIMING

    parameter LOC = " UNPLACED";

`endif

    parameter SLEW = "SLOW";
   
    output O;

    input  I;

    tri0 GTS = glbl.GTS;

    bufif0 B1 (O, I, GTS);

    initial begin
	
        case (CAPACITANCE)

            "LOW", "NORMAL", "DONT_CARE" : ;
            default : begin
                          $display("Attribute Syntax Error : The attribute CAPACITANCE on OBUF instance %m is set to %s.  Legal values for this attribute are DONT_CARE, LOW or NORMAL.", CAPACITANCE);
                          #1 $finish;
                      end

        endcase

    end

    
`ifdef XIL_TIMING
    
    specify
        (I => O) = (0:0:0, 0:0:0);
        specparam PATHPULSE$ = 0;
    endspecify

`endif

    
endmodule

`endcelldefine





`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
