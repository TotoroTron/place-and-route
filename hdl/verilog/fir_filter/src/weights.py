import sys
import numpy as np
import matplotlib.pyplot as plt
from scipy.signal import firwin

def generate(filter_depth, data_width, cutoff_freq, sample_rate):
    normalized_cutoff = cutoff_freq / (sample_rate / 2)

    # Design the FIR filter with the given parameters
    # fir_coefficients = firwin(
    #     numtaps=filter_depth,
    #     cutoff=normalized_cutoff,
    #     pass_zero=False,
    #     scale=False,
    #     fs=sample_rate
    # )
    fir_coefficients = firwin(filter_depth, normalized_cutoff)
    plot(fir_coefficients, "fir_coeff.png")

    # Quantize coefficients based on data width
    max_val = 2**(data_width - 1) - 1
    quantized_coefficients = np.round(fir_coefficients * max_val).astype(int)
    quantized_coefficients = np.clip(quantized_coefficients, -max_val, max_val)
    plot(quantized_coefficients, "quant_coeff.png")

    return quantized_coefficients


def plot(weights, filename):
    plt.figure(figsize=(10, 4))
    plt.stem(range(len(weights)), weights, basefmt=" ")
    plt.title("FIR Filter Weights")
    plt.xlabel("Weight Index")
    plt.ylabel("Amplitude")
    plt.grid(True)
    plt.savefig(filename)
    print("Fir filter weights plotted in weights.png")


def write_mem(i, weights, DATA_WIDTH):
    # Open the file to write weights in hexadecimal format
    with open(f"weights{i}.mem", "w") as f:
        for i, weight in enumerate(weights):
            # Convert each weight to hexadecimal, keeping only the lower DATA_WIDTH bits
            hex_value = f"{(weight & ((1 << DATA_WIDTH) - 1)):0{DATA_WIDTH // 4}X}"
            f.write(f"@{i:02X} {hex_value}\n")
    print("FIR filter weights written to weights.mem in hexadecimal format.")


def write_verilog(i, weights, data_width):
    # Open a Verilog header file for writing
    with open(f"weights{i}.vh", "w") as f:
        f.write("// FIR filter weights generated by Python\n")
        f.write(f"// wire signed [{data_width-1}:0] weights [{len(weights)-1}:0];\n\n")
        
        # Define each weight individually in hexadecimal format
        for i, weight in enumerate(weights):
            hex_value = f"{(weight & ((1 << data_width) - 1)):0{data_width // 4}X}"
            f.write(f"assign weights[{i}] = {data_width}'h{hex_value};\n")
    
    print("Verilog header generated as weights.vh.")


def main():

    # Parameters
    NUM_PIPELINES = 1
    FILTER_DEPTH = 48
    PIPE_DEPTH = int(FILTER_DEPTH / NUM_PIPELINES)
    SAMPLE_RATE = 44000
    CUTOFF_FREQ = 1000

    DATA_WIDTH = 24          # Number of bits for each coefficient

    # Generate FIR filter weights
    weights = generate(FILTER_DEPTH, DATA_WIDTH, CUTOFF_FREQ, SAMPLE_RATE)
    print(len(weights))
    for i in range(NUM_PIPELINES):
        write_mem(i, weights[i*PIPE_DEPTH:(i+1)*PIPE_DEPTH-1], DATA_WIDTH)
        write_verilog(i, weights[i*PIPE_DEPTH:(i+1)*PIPE_DEPTH-1], DATA_WIDTH)

if __name__ == '__main__':
    main()
