Relationship between Site and SiteInst? How BlockPlacer relocates SiteInsts during iterative placement?

Hello, I am currently trying my hand at building a (very crude) BEL packer and placer as part of my MS technical paper and am using RapidWright to achieve that goal.
I have so far learned how to do the following with RapidWright:

    1) Design entry via Verilog, synth_design and export dcp via Vivado, open the synthesized dcp in Java via RapidWright.

    2) Read the EDIFNetlist, find the set of all unique cellTypes, group EDIFHierCellInsts by their type:
        Map<String, List<EDIFHierCellInst>> EDIFCellGroups ... ;
        where the key strings are:
            DSP48E1, RAMB18E1, CARRY4, FDRE, FDSE, LUT2-6 (all in one group), etc.

    3) Find basic cell patters such as:
        Carry chains
            traverse carry chains by accessing CO[3] and CIN ports, checking if CO[3] is null, if their nets are GND or connected to another CARRY4.
        DSP cascades
            access PCOUT ports and check if the nets are connected to other DSP cells.
        LUT-FF pairs
            first, find the set of all unique SR-CE net pairs:
                Map<Pair<String, String>, LUTFFGroup> groups = new HashMap<>();
                where the keys are unique pairs of net names (probably not robust but currently works for the designs I have).
            bucket each FF cell into their SR-CE group.
            every FF cell in their respective group can be packed into the same Site.

    4) Create SiteInsts, map EDIFHierCellInsts onto BELs in accordance to the cell patterns
        Random placement of SiteInsts by selecting randomly from device.getAllCompatibleSites(SiteTypeEnum. ...);
        Placement currently only happens once. No simulated annealing or iterative placements or movements.

    5) IntraSite routing via si.routeSite().
        Manual intervention if the default PIP settings are incorrect via:
        si.unrouteIntraSiteNet() and si.addSitePIP()

    6) Write the placed design checkpoint, open the dcp with Vivado to perform inter-Site routing, perform post-implementation simulation to verify design.

In summary i've made a very bad but working placer.
My next step is to actually perform simulated annealing by using the packed SiteInsts as the atomic unit of placement and movement.
This means placing SiteInsts, evaluating a cost function (HPWL), evaluating a stopping criterion, unplacing, moving, and replacing SiteInsts, reevaluating cost function, etc.
However, I am realizing that I may be using Site/SiteInst in a way not meant to be used.

There are four constructors for SiteInst as specified in the documentation:
    SiteInst()
    SiteInst(String name, Design design, SiteTypeEnum type, Site site)
    SiteInst(String name, Module module, SiteTypeEnum type, Site site)
    SiteInst(String name, SiteTypeEnum type)

If I were to use the 4th constructor SiteInst(String name, SiteTypeEnum type) and try to perform si.getBELs(), I would get the following exception:

    Exception in thread "main" java.lang.NullPointerException: Cannot invoke
    "com.xilinx.rapidwright.device.j.a()" because the return value of
    "com.xilinx.rapidwright.design.SiteInst.a()" is null
    at com.xilinx.rapidwright.design.SiteInst.getBELs(Unknown Source)

If I were to use either the 2nd constructor SiteInst(String name, Design design, SiteTypeEnum type, Site site), then perform unplace(), then perform si.getBELs(), I would also get a similar exception.

THIS IS ACTUALLY NOT TRUE!
    From what I've learned in some small experiments, in order to create a new SiteInst() and instill it with Cell-BEL mapping information, a physical device Site must first be specified.
    If I unplace a SiteInst, I lose access to its Cell-BEL mappings. << wrong, a siteinst does preserve its bel-cell map if unplaced()
    I was hoping that by using the 4th constructor, SiteInst(String name, SiteTypeEnum type), i could treat them as "floating" SiteInsts where they retain their Cell-BEL mapping information and even intraSite routing information regardless of their placement status.

    The only catch is, you DO have to construct a SiteInst WITH a physical Site in order to access its BELs.
    So, you can't use constructor 4 and do si.createCell(ehci, bel);

    Found EDIFHierCellInst: fir_filter_inst/o_dout_valid_reg
    Exception in thread "main" java.lang.NullPointerException: Cannot invoke "com.xilinx.rapidwright.device.j.a(String)" because the return value of "com.xilinx.rapidwright.design.SiteInst.a()" is null
            at com.xilinx.rapidwright.design.SiteInst.getBEL(Unknown Source)
            at placer.Main.testSiteInst1(Main.java:135)
            at placer.Main.main(Main.java:47)

    So, you have to have an initial placement to pack SiteInsts with BELs.



I looked elsewhere in the RW repository and found this code snippet in RelocationTools.java that seems to confirm this:

    boolean revertPlacement = false;
    for (Map.Entry<SiteInst, Site> e : oldSite.entrySet()) {
        Site srcSite = e.getValue();
        Tile srcTile = srcSite.getTile();
        Tile destTile = srcTile.getTileXYNeighbor(tileColOffset, tileRowOffset);
        Site destSite = srcSite.getCorrespondingSite(srcSite.getSiteTypeEnum(), destTile);
        SiteInst srcSiteInst = e.getKey();
        assert(destSite != srcSite);
        if (destTile == null || destSite == null) {
            String destTileName = srcTile.getRootName() + "_X" + (srcTile.getTileXCoordinate() + tileColOffset)
                    + "Y" + (srcTile.getTileYCoordinate() + tileRowOffset);
            System.out.println("ERROR: Failed to move SiteInst '" + srcSiteInst.getName() + "' from Tile '" + srcTile.getName()
                    + "' to Tile '" + destTileName + "'");
            revertPlacement = true;
            continue;
        }
        SiteInst destSiteInst = design.getSiteInstFromSite(destSite);
        if (destSiteInst != null) {
            if (destSiteInst.getName().startsWith("STATIC_SOURCE")) {
                destSiteInst.unPlace();
            } else {
                System.out.println("ERROR: Failed to move SiteInst '" + srcSiteInst.getName() + "' from Tile '" + srcTile.getName()
                        + "' to Tile '" + destTile.getName() + "' as it is already occupied");
                revertPlacement = true;
                continue;
            }
        }

        srcSiteInst.place(destSite);
    }

From this snippet, it looks like the preffered method is to first place the SiteInst *somewhere*, **anywhere**, then look for another compatible Site, place the SiteInst at a different Site, then unplace the SiteInst from the previous Site.
It seems that SiteInsts are literally instances of specific Sites on the device, e.g. instance of SLICEL_X5Y10, instance of SLICEL_X20Y50, etc.
instead of instances of a generic SiteTypeEnum.
Is this because a SLICEL for a 7-Series architecture will be different for some other architecture?


From what I can understand about BlockPlacer, it treats Module/ModulInst as the atomic unit for placement, however it seems to operate at a higher level of abstraction than what my goal is.
As in, I can use an off-the-shelf placer/router to implement a design, generate a dcp, open it with RapidWright, instantiate multiple instances of that design via new Module(design) and have BlockPlacer perform simulated annealing to place them in parallel (?).


Is the better course of action to start learning about BlockPlacer, Module, ModuleInst, ModuleInstImpl, package individual Sites as single-Site Modules and try to use AbstractBlockPlacer to implement a custom simulated annealer?
OR
Try to define a "floating" SiteInst class that can retain information about Cell-BEL and intraSite routing information throughout the placement iterations?

