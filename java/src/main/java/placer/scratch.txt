
    private Map<EDIFHierCellInst, List<EDIFHierCellInst>> findLUTFFTrees(
            Map<String, List<EDIFHierCellInst>> EDIFCellGroups) throws IOException {
        List<EDIFHierCellInst> visitedLUTs = new ArrayList<>();
        List<EDIFHierCellInst> visitedFFs = new ArrayList<>();
        Map<EDIFHierCellInst, List<EDIFHierCellInst>> trees = new HashMap<>();
        for (EDIFHierCellInst LUT_EHCI : EDIFCellGroups.get("LUT")) {
            EDIFHierPortInst LUT_EHPI = LUT_EHCI.getPortInst("O");
            EDIFHierNet HNET = LUT_EHPI.getHierarchicalNet();
            // exclude sources, include sinks
            List<EDIFHierPortInst> sinkPorts = HNET.getLeafHierPortInsts(false, true);
            if (sinkPorts.size() < 2) // less than 2 sinks?
                continue;
            List<EDIFHierCellInst> FF_EHCIS = sinkPorts.stream()
                    .map(ehpi -> ehpi.getHierarchicalInst().getChild(ehpi.getPortInst().getCellInst().getName()))
                    .filter(ehci -> ehci.getCellType().getName().equals("FDRE"))
                    .collect(Collectors.toList());
            if (FF_EHCIS.size() < 2) // less than 2 ff sinks?
                continue;
            for (EDIFHierCellInst ff : FF_EHCIS)
                visitedLUTs.add(LUT_EHCI);
            visitedFFs.addAll(FF_EHCIS);
            trees.put(LUT_EHCI, FF_EHCIS);
        }
        EDIFCellGroups.get("LUT").removeAll(visitedLUTs);
        EDIFCellGroups.get("FDRE").removeAll(visitedFFs);
        return trees;
    }









    private List<SiteInst> buildCarryChainSiteInsts(List<EDIFHierCellInst> chain,
            Map<String, List<EDIFHierCellInst>> EDIFCellGroups) {

        List<SiteInst> carrySiteInsts = new ArrayList<>();
        for (EDIFHierCellInst ehci : chain) {
            SiteInst si = new SiteInst(ehci.getFullHierarchicalInstName(), design, SiteTypeEnum.SLICEL,
                    device.getSite("SLICE_X91Y103"));
            System.out.println("SiteTypeEnum: " + si.getSiteTypeEnum());
            /*
             * SO APPARENTLY, SITEINSTS CANT ACCESS THEIR BELS UNLESS THEY ARE PLACED ON A
             * SPECIFIC SITE, MEANING THEY ARE BLIND TO SITETYPEENUMS
             * ONLY SITES ARE AWARE OF SITETYPEENUMS
             * buildCarryChainSiteInsts must inherently place sites while assembling them
             * this will make simulated annealing pretty slow
             *
             */
            System.out.println("BELs in this site... ");
            BEL[] bels = si.getBELs();
            for (BEL bel : bels) {
                System.out.println("\t" + bel.getName());
            }
            si.createCell(ehci, si.getBEL("CARRY4"));
            System.out.println("Created CARRY4");

            Map<String, String[]> O_CARRY_FF_MAP = new HashMap<>();
            O_CARRY_FF_MAP.put("O0", new String[] { "AFF", "A5FF" });
            O_CARRY_FF_MAP.put("O1", new String[] { "BFF", "B5FF" });
            O_CARRY_FF_MAP.put("O2", new String[] { "CFF", "C5FF" });
            O_CARRY_FF_MAP.put("O3", new String[] { "DFF", "D5FF" });

            for (Map.Entry<String, String[]> entry : O_CARRY_FF_MAP.entrySet()) {
                String PORT_NAME = entry.getKey();
                EDIFHierPortInst ehpi = ehci.getPortInst(PORT_NAME);
                EDIFHierNet hnet = ehpi.getHierarchicalNet();
                // bool include sources, bool include sinks
                EDIFHierPortInst sinkPort = hnet.getLeafHierPortInsts(false, true).get(0);
                EDIFHierCellInst sinkCell = sinkPort.getHierarchicalInst()
                        .getChild(sinkPort.getPortInst().getCellInst().getName());
                // for now, just always use FF not 5FF
                if (sinkCell.getCellType().getName() == "FDRE") {
                    si.createCell(sinkCell, si.getBEL(entry.getValue()[0])); // XFF
                    System.out.println("Created FDRE");
                }
            }

            Map<String, String[]> S_CARRY_LUT_MAP = new HashMap<>();
            S_CARRY_LUT_MAP.put("S0", new String[] { "A5LUT", "A6LUT" });
            S_CARRY_LUT_MAP.put("S1", new String[] { "B5LUT", "B6LUT" });
            S_CARRY_LUT_MAP.put("S2", new String[] { "C5LUT", "C6LUT" });
            S_CARRY_LUT_MAP.put("S3", new String[] { "D5LUT", "D6LUT" });

            for (Map.Entry<String, String[]> entry : S_CARRY_LUT_MAP.entrySet()) {
                String PORT_NAME = entry.getKey();
                EDIFHierPortInst ehpi = ehci.getPortInst(PORT_NAME);
                EDIFHierNet hnet = ehpi.getHierarchicalNet();
                // bool include sources, bool include sinks
                EDIFHierPortInst sourcePort = hnet.getLeafHierPortInsts(true, false).get(0);
                EDIFHierCellInst sourceCell = sourcePort.getHierarchicalInst()
                        .getChild(sourcePort.getPortInst().getCellInst().getName());
                String sourceCellType = sourceCell.getCellType().getName();
                if (sourceCellType == "LUT6") {
                    si.createCell(sourceCell, si.getBEL(entry.getValue()[1])); // X6LUT
                    System.out.println("Created LUT6");

                } else if (sourceCellType.contains("LUT")) {
                    si.createCell(sourceCell, si.getBEL(entry.getValue()[0])); // X5LUT
                    System.out.println("Created LUT5");
                }
            }

            carrySiteInsts.add(si);
        } // end for (EDIFHierCellInst ehci : chain)

        return carrySiteInsts;
    } // end buildCarrySiteInsts()







        // List<SiteTypeEnum> skipSites = Arrays.asList(
        // SiteTypeEnum.ILOGICE2,
        // SiteTypeEnum.ILOGICE3,
        // SiteTypeEnum.OLOGICE2,
        // SiteTypeEnum.OLOGICE3,
        // SiteTypeEnum.IOB33,
        // SiteTypeEnum.IOB18,
        // SiteTypeEnum.OPAD);
        // for (SiteInst si : design.getSiteInsts()) {
        // writer.write("\n\tsiteInst: " + si.getName() + ": " + si.getSiteTypeEnum());
        // if (skipSites.contains(si.getSiteTypeEnum())) {
        // writer.write("SKIPPING!");
        // continue;
        // }
        // si.routeSite();
        // }



        Collection<SiteInst> siteInsts = design.getSiteInsts();
        writer.write("\n\nRouting all siteInsts in design... (" + siteInsts.size() + ")");
        System.out.println("\nRouting all siteInsts in design... (" + siteInsts.size() + ")");
        for (SiteInst si : siteInsts) {
            writer.write("\n\tsiteInst: " + si.getSiteTypeEnum() + ": " + si.getName());
            System.out.println("\tsiteInst: " + si.getSiteTypeEnum() + ": " + si.getName());
            if (skipSites.contains(si.getSiteTypeEnum())) {
                writer.write("\n\tSKIPPING!");
                System.out.println("\tSKIPPING!");
                continue;
            }
            Collection<Cell> cells = si.getCells();
            for (Cell cell : cells) {
                writer.write("\n\t\tCell: " + cell.getType() + ": " + cell.getName());
                System.out.println("\t\tCell: " + cell.getType() + ": " + cell.getName());
                EDIFHierCellInst ehci = cell.getEDIFHierCellInst();
                writer.write("\n\t\tEDIFCell: " + ehci.getFullHierarchicalInstName());
                System.out.println("\t\tEDIFCell: " + ehci.getFullHierarchicalInstName());
                List<EDIFHierPortInst> ehpis = ehci.getHierPortInsts();
                for (EDIFHierPortInst ehpi : ehpis) {
                    writer.write("\n\t\t\tEDIFHierPortInst: " + ehpi.getFullHierarchicalInstName());
                    System.out.println("\t\t\tEDIFHierPortInst: " + ehpi.getFullHierarchicalInstName());
                    EDIFNet net = ehpi.getNet();
                    writer.write("\n\t\t\t\tNet: " + net.getName());
                    System.out.println("\t\t\t\tNet: " + net.getName());
                    Collection<EDIFPortInst> ports = net.getPortInsts();
                    for (EDIFPortInst port : ports) {
                        writer.write("\n\t\t\t\t\tPortInst: " + port.getFullName());
                        System.out.println("\t\t\t\t\tPortInst: " + port.getFullName());
                        EDIFCellInst inst = port.getCellInst();
                        if (inst != null) {
                            writer.write("\n\t\t\t\t\t\tCellInst: "
                                    + port.getCellInst().getName() + ": " + port.getCellInst().getCellType());
                            System.out.println("\t\t\t\t\t\tCellInst: "
                                    + port.getCellInst().getName() + ": " + port.getCellInst().getCellType());
                        } else {
                            writer.write("\n\t\t\t\t\t\tCellInst: NULL!");
                            System.out.println("\t\t\t\t\t\tCellInst: NULL!");
                        }
                    }
                    // EDIFHierNet hnet = ehpi.getHierarchicalNet();
                    // System.out.println("\t\t\t\tNet: " + hnet.getNet().getName());
                    // Collection<EDIFHierPortInst> ports = hnet.getLeafHierPortInsts();
                    // for (EDIFHierPortInst port : ports) {
                    // System.out.println("\t\t\t\t\tPortInst: " +
                    // port.getFullHierarchicalInstName());
                    // EDIFHierCellInst inst = port.getHierarchicalInst();
                    // if (inst != null)
                    // System.out.println("\t\t\t\t\t\tCellInst: "
                    // + port.getHierarchicalInst().getFullHierarchicalInstName());
                    // else
                    // System.out.println("\t\t\t\t\t\tCellInst: NULL!");
                    // }
                }
            }

            si.routeSite();
        }


        for (Cell cell : CARRYCells) {
            // printCellNets(cell);

            // Get this cell's logical edifcell
            EDIFCellInst eci = cell.getEDIFCellInst();

            EDIFPortInst cout = eci.getPortInst("CO[3]");
            EDIFNet coutNet = cout.getNet();
            if (coutNet == null) {
                // break carry chain upward direction
                // place this cell, return to previous cell
                // CARRYCells.remove(cell);
                // is removing a list elem within a loop iterating over the list legal?
            } else {
                // goto carry sink cell
            }

            EDIFPortInst cin = eci.getPortInst("CIN");
            EDIFNet cinNet = cin.getNet();
            if (cinNet == null) {
                // break carry chain downward direction
                // place this cell, return to previous cell
                // CARRYCells.remove(cell);
            } else {
                // goto carry source cell
            }

        }

        // alternatively...
        // maybe better to construct list of linkedlists first? carry chains have to be
        // placed as CLB blocks like tetris
        Iterator<Cell> iterator = CARRYCells.iterator();
        List<LinkedList<Cell>> carryChains = new ArrayList<LinkedList<Cell>>();

        while (iterator.hasNext()) {
            LinkedList<Cell> chain = new LinkedList<>();
            Cell cell = iterator.next();

            EDIFCellInst eci = cell.getEDIFCellInst();

            EDIFPortInst cout = eci.getPortInst("CO[3]");
            EDIFNet coutNet = cout.getNet();
            if (coutNet == null) {
                // break carry chain upward direction

                iterator.remove(); // safely remove the current cell
                continue;
            }

            EDIFPortInst cin = eci.getPortInst("CIN");
            EDIFNet cinNet = cin.getNet();
            if (cinNet == null) {
                // break carry chain downward direction
                iterator.remove(); // safely remove the current cell
                continue;
            }
        }

